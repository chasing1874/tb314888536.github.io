<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL_DML_DDL_TCL</title>
    <url>/posts/942c10a8/</url>
    <content><![CDATA[<h1 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h1><p>数据操纵语言</p>
<ul>
<li>插入：insert</li>
<li>修改：update</li>
<li>删除：delete</li>
</ul>
<h2 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h2><p>语法：</p>
<ul>
<li>insert into 表名(列名,…) value(值1,….);、</li>
<li>insert into 表名 set 列名=值…</li>
</ul>
<p>比较：</p>
<ol>
<li><p>方式一支持插入多行，方式二不支持</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403095512308.png" alt="image-20210403095512308"></p>
</li>
<li><p>方式一支持子查询，方式二不支持</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403095608681.png" alt="image-20210403095608681"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403095741374.png" alt="image-20210403095741374"></p>
</li>
</ol>
<ol>
<li><p>插入的值的类型要与列的类型一致或兼容</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> beauty(<span class="keyword">id</span>, <span class="keyword">name</span>, sex, borndate, phone, photo, boyfriend_id)</span><br><span class="line"><span class="keyword">value</span>(<span class="number">13</span>, <span class="string">&#x27;唐艺昕&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1990-4-23&#x27;</span>, <span class="string">&#x27;19900000000&#x27;</span>, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>不可为null的列必须插入值。可以为null的列如何插入值？</p>
<ul>
<li>写null</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403095041920.png" alt="image-20210403095041920"></li>
</ul>
</li>
<li><p>列的顺序可以调换，只要一一对应</p>
</li>
<li><p>列数和值的个数必须一致</p>
</li>
<li><p>可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403095241602.png" alt="image-20210403095241602"></p>
</li>
</ol>
<h2 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a>修改语句</h2><ol>
<li><p>修改单表的记录</p>
<ul>
<li><p>语法：</p>
<p>update 表名 set 列=新值 where 筛选条件;</p>
</li>
</ul>
</li>
<li><p>修改多表的记录</p>
<ul>
<li><p>sql92语法：</p>
<p>update 表1 别名，表2 别名</p>
<p>set 列=值，…</p>
<p>where 连接条件</p>
<p>and 筛选条件</p>
</li>
<li><p>sql99语法：</p>
<p>update 表1 别名</p>
<p>join 表2 别名</p>
<p>on 连接条件</p>
<p>set 列=值</p>
<p>where 筛选条件</p>
</li>
</ul>
</li>
</ol>
<h3 id="修改单表记录"><a href="#修改单表记录" class="headerlink" title="修改单表记录"></a>修改单表记录</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403100110142.png" alt="image-20210403100110142"></p>
<h3 id="修改多表记录"><a href="#修改多表记录" class="headerlink" title="修改多表记录"></a>修改多表记录</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403100959006.png" alt="image-20210403100959006"></p>
<h2 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h2><p>方式一：</p>
<p>delete</p>
<ol>
<li><p>单表的删除</p>
<p>delete from 表名 where 筛选条件;</p>
</li>
<li><p>多表的删除</p>
<ul>
<li><p>sql92</p>
<p>delete 表1的别名， 表2的别名</p>
<p>from 表1 别名，表2 别名</p>
<p>where 连接条件</p>
<p>and 筛选条件;</p>
</li>
<li><p>sql99</p>
<p>delete 表1的别名， 表2的别名</p>
<p>from 表1 别名</p>
<p>join 表2 别名 on 连接条件</p>
<p>where 筛选条件;</p>
</li>
</ul>
</li>
</ol>
<p>方式二：</p>
<p>truncate</p>
<ul>
<li>truncate table 表名;</li>
</ul>
<h3 id="delete和truncate区别"><a href="#delete和truncate区别" class="headerlink" title="delete和truncate区别"></a>delete和truncate区别</h3><ol>
<li>delete可以加where条件，truncate不行</li>
<li>truncate删除，效率高一些</li>
<li>假如要删除的表中有自增长列，如果用delete删除后，在插入数据，自增长列从断电开始；而truncate删除后，再插入数据，自增长列的值从1开始。</li>
<li>truncate删除后没有返回值，delete删除后有返回值</li>
<li>truncate删除不能回滚，delete删除可以回滚。</li>
<li>两者都是清空表里的值，删除后表还存在，是空表</li>
</ol>
<h3 id="delete单表删除"><a href="#delete单表删除" class="headerlink" title="delete单表删除"></a>delete单表删除</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403101436727.png" alt="image-20210403101436727"></p>
<h3 id="delete-多表删除"><a href="#delete-多表删除" class="headerlink" title="delete 多表删除"></a>delete 多表删除</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403102003193.png" alt="image-20210403102003193"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403102040041.png" alt="image-20210403102040041"></p>
<h1 id="DDL语言"><a href="#DDL语言" class="headerlink" title="DDL语言"></a>DDL语言</h1><p>数据定义语言：库和表的管理</p>
<ol>
<li><p>库的管理</p>
<ul>
<li>创建</li>
<li>修改</li>
<li>删除</li>
</ul>
</li>
<li><p>表的管理</p>
<ul>
<li>创建</li>
<li>修改</li>
<li>删除</li>
</ul>
</li>
</ol>
<p>创建：create</p>
<p>修改：alter</p>
<p>删除：drop</p>
<h2 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h2><h3 id="库的创建"><a href="#库的创建" class="headerlink" title="库的创建"></a>库的创建</h3><p>create database 【if not exists】库名;</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403111250940.png" alt="image-20210403111250940"></p>
<h3 id="库的修改"><a href="#库的修改" class="headerlink" title="库的修改"></a>库的修改</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403111358274.png" alt="image-20210403111358274"></p>
<h4 id="更改库的字符集"><a href="#更改库的字符集" class="headerlink" title="更改库的字符集"></a>更改库的字符集</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403111415964.png" alt="image-20210403111415964"></p>
<h3 id="库的删除"><a href="#库的删除" class="headerlink" title="库的删除"></a>库的删除</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> datebase <span class="keyword">if</span> <span class="keyword">exists</span> books;</span><br></pre></td></tr></table></figure>





<h2 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h2><h3 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403111632893.png" alt="image-20210403111632893"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403111829510.png" alt="image-20210403111829510"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403111910555.png" alt="image-20210403111910555"></p>
<h3 id="表的修改"><a href="#表的修改" class="headerlink" title="表的修改"></a>表的修改</h3><ol>
<li><p>修改列名(change column)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">change</span> <span class="keyword">column</span> publishdate pubDate datetime;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>修改列的类型或约束(modify column)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">modify</span> <span class="keyword">column</span> annual <span class="keyword">double</span>;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>添加新列(add column)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">add</span> <span class="keyword">column</span> annual <span class="keyword">double</span>;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>删除列(drop column)</p>
</li>
<li><p>修改表名(rename to)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> author <span class="keyword">rename</span> <span class="keyword">to</span> book_author;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="表的删除"><a href="#表的删除" class="headerlink" title="表的删除"></a>表的删除</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403112855269.png" alt="image-20210403112855269"></p>
<h3 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a>表的复制</h3><h4 id="仅仅复制表的结构"><a href="#仅仅复制表的结构" class="headerlink" title="仅仅复制表的结构"></a>仅仅复制表的结构</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> copy <span class="keyword">like</span> author;</span><br></pre></td></tr></table></figure>



<h4 id="复制表的结构-数据"><a href="#复制表的结构-数据" class="headerlink" title="复制表的结构+数据"></a>复制表的结构+数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> copy2 </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> author;</span><br></pre></td></tr></table></figure>



<h4 id="复制部分数据"><a href="#复制部分数据" class="headerlink" title="复制部分数据"></a>复制部分数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> copy3</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, au_name</span><br><span class="line"><span class="keyword">from</span> author</span><br><span class="line"><span class="keyword">where</span> nation=<span class="string">&#x27;China&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="仅仅复制某些结构"><a href="#仅仅复制某些结构" class="headerlink" title="仅仅复制某些结构"></a>仅仅复制某些结构</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> copy4</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,au_name</span><br><span class="line"><span class="keyword">from</span> author</span><br><span class="line"><span class="keyword">where</span> <span class="number">0</span>;<span class="comment">#恒不成立，里面的数据不会复制过去</span></span><br><span class="line"><span class="comment">#id和au_name被复制</span></span><br></pre></td></tr></table></figure>

<p>跨库复制</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403113855564.png" alt="image-20210403113855564"></p>
<h2 id="常见的数据类型"><a href="#常见的数据类型" class="headerlink" title="常见的数据类型"></a>常见的数据类型</h2><h3 id="数值型："><a href="#数值型：" class="headerlink" title="数值型："></a>数值型：</h3><ul>
<li>整数<ul>
<li>分类：<ul>
<li>tinyint 1</li>
<li>smallint 2</li>
<li>mediumint 3</li>
<li>int、integer 4</li>
<li>bigint 8</li>
</ul>
</li>
<li>特点：<ol>
<li>如果不设置有无符号，默认有符号。无符号设置unsigned</li>
<li>如果插入的值超过了整数的范围，会报out of range错误，并且插入边界值</li>
<li>如果不设置长度，会有默认的长度。长度代表了显示的最大宽度，如果不够会用0左填充，但必须搭配zerofill使用。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h3><ul>
<li><p>定点数</p>
<ul>
<li>Dec(M,D)</li>
<li>Decimal(M,D)</li>
</ul>
</li>
<li><p>浮点数</p>
<ul>
<li>float(M,D)</li>
<li>Double(M,D)</li>
</ul>
</li>
<li><p>特点：</p>
<ul>
<li><p>M：整数部位+小数部位</p>
</li>
<li><p>D：小数部位</p>
</li>
<li><p>如果超过范围，则插入临界值</p>
</li>
<li><p>MD都可省略</p>
<ul>
<li>decimal默认M10，D0</li>
<li>float和double根据插入的数值的精度来决定精度</li>
</ul>
</li>
<li><p>定点型的精确度较高，货币运算用</p>
</li>
</ul>
</li>
</ul>
<h3 id="字符型："><a href="#字符型：" class="headerlink" title="字符型："></a>字符型：</h3><ul>
<li>较短的文本：char(M)、varvarchar(M)</li>
<li>较长的文本：text、blob（较长的二进制数据）</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403120012322.png" alt="image-20210403120012322"></p>
<p>日期型：</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403120107015.png" alt="image-20210403120107015"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403120146019.png" alt="image-20210403120146019"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210403120306725.png" alt="image-20210403120306725"></p>
<h2 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h2><p>含义：</p>
<blockquote>
<p>一种限制，用于限制表中的数据，为了保证表中的数据的准确和可靠性。</p>
</blockquote>
<p>分类：</p>
<ul>
<li>not null：<ul>
<li>非空，用于保证该字段的值不能为空</li>
<li>比如姓名、学号</li>
</ul>
</li>
<li>default：<ul>
<li>默认，用于保证该字段有默认值</li>
<li>比如性别</li>
</ul>
</li>
<li>primary key：<ul>
<li>主键，用于保证该字段的值具有唯一性，并且非空</li>
<li>比如学号、工号</li>
</ul>
</li>
<li>unique：<ul>
<li>唯一，用于保证该字段的值具有唯一性，可以为空。</li>
<li>比如座位号</li>
</ul>
</li>
<li>check：<ul>
<li>检测约束【mysql不支持】</li>
<li>比如年龄、性别</li>
</ul>
</li>
<li>foreign key(表名) references 表名(列名)：<ul>
<li>外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值。</li>
<li>在从表添加外键约束，用于引用主表中某列的值</li>
<li>比如学生表的专业编号、员工表的部门编号</li>
</ul>
</li>
</ul>
<p>添加约束的时机：</p>
<ol>
<li>创建表时</li>
<li>修改表时</li>
</ol>
<p>约束的添加分类：</p>
<ol>
<li>列级约束<ul>
<li>六大约束语法上都支持不报错，但外键约束没有效果</li>
</ul>
</li>
<li>表级约束<ul>
<li>除了非空、默认，其他都支持</li>
</ul>
</li>
</ol>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">位置</th>
<th align="center">支持的约束类型</th>
<th align="center">是否可以取约束名</th>
</tr>
</thead>
<tbody><tr>
<td align="center">列级约束</td>
<td align="center">列的后面</td>
<td align="center">语法都支持，但外键没有效果</td>
<td align="center">不可以</td>
</tr>
<tr>
<td align="center">表级约束</td>
<td align="center">所有列的下面</td>
<td align="center">默认和非空不支持，其他支持</td>
<td align="center">可以（主键没有效果）</td>
</tr>
</tbody></table>
<p>主键和唯一：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">保证唯一性</th>
<th align="center">是否允许为空</th>
<th align="center">一个表可以多少个</th>
<th align="center">是否允许组合</th>
</tr>
</thead>
<tbody><tr>
<td align="center">主键</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">至多一个</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">唯一</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">可以多个</td>
<td align="center">√</td>
</tr>
</tbody></table>
<p>外键：</p>
<ol>
<li>要求在从表设置外键类型</li>
<li>从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</li>
<li>主表的关联列必须是一个key（一般是主键或唯一）</li>
<li>插入数据时，先插入主表，再插入主表；删除数据时，先删除从表，再删除主表。</li>
</ol>
<h3 id="创建表时添加约束"><a href="#创建表时添加约束" class="headerlink" title="创建表时添加约束"></a>创建表时添加约束</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404092710729.png" alt="image-20210404092710729"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404093104324.png" alt="image-20210404093104324"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404093448349.png" alt="image-20210404093448349"></p>
<h3 id="修改表时添加约束"><a href="#修改表时添加约束" class="headerlink" title="修改表时添加约束"></a>修改表时添加约束</h3><p>语法：</p>
<ol>
<li><p>添加列级约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> <span class="keyword">column</span> 字段名 字段类型 新约束;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>添加表级约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 【<span class="keyword">constraint</span> 约束名】 约束类型(字段名) 【外键的引用】;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404101145905.png" alt="image-20210404101145905"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404101522581.png" alt="image-20210404101522581"></p>
<h3 id="修改表时删除约束"><a href="#修改表时删除约束" class="headerlink" title="修改表时删除约束"></a>修改表时删除约束</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404101628749.png"></p>
<h2 id="标识列"><a href="#标识列" class="headerlink" title="标识列"></a>标识列</h2><blockquote>
<p>又称为自增长列，可以不用手动地插入值，系统提供默认的序列值。</p>
</blockquote>
<p>特点：</p>
<ol>
<li>标识列必须和一个key搭配</li>
<li>一个表最多一个标识列</li>
<li>标识列的类型只能是数值型</li>
<li>标识列可以通过set auto_increment_increment设置步长，通过手动插入数据设置其实位置。</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404102659361.png" alt="image-20210404102659361"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404103017965.png" alt="image-20210404103017965"></p>
<h1 id="TCL语言"><a href="#TCL语言" class="headerlink" title="TCL语言"></a>TCL语言</h1><p>Transaction Control Language 事物控制语言</p>
<p>事务：</p>
<p>一个或一组sql语句组成一个执行单元，这个单元要么全部执行，要么全部不执行。（原子性）如果单元中某条sql语句一旦执行失败，整个单元将会回滚。</p>
<ul>
<li>隐式事务：事务没有明显的开启和结束标志。insert、update等</li>
<li>显式事务：<ul>
<li>事务具有明显的开启和结束的标记</li>
<li>前提：必须先设置自动提交功能为禁用</li>
<li>set autocommit = 0</li>
</ul>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404104050756.png" alt="image-20210404104050756"></p>
<p>事务的ACID属性</p>
<ol>
<li>原子性（Atomicity）</li>
<li>一致性（Consistency）</li>
<li>隔离性（Isolation）</li>
<li>持久性（Durability）</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404104340832.png" alt="image-20210404104340832"></li>
</ol>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404113004732.png" alt="image-20210404113004732"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404110808232.png" alt="image-20210404110808232"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404111118711.png" alt="image-20210404111118711"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404111159483.png" alt="image-20210404111159483"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404112158412.png" alt="image-20210404112158412"></p>
<h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">脏读</th>
<th align="center">不可重读读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">read uncommitted</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">read committed</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">repeatable read</td>
<td align="center"></td>
<td align="center">×</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">serializable</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">×</td>
</tr>
</tbody></table>
<p>MySQL默认repeatable read</p>
<p>查看隔离级别：select @@transaction_isolation;</p>
<p>设置隔离级别：set session|global transaction isolation level;</p>
<h3 id="演示savapoint的使用"><a href="#演示savapoint的使用" class="headerlink" title="演示savapoint的使用"></a>演示savapoint的使用</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404113004732.png"></p>
<p>只能搭配rollback使用，不能搭配commit。</p>
<h3 id="delete和truncate在事务使用的区别："><a href="#delete和truncate在事务使用的区别：" class="headerlink" title="delete和truncate在事务使用的区别："></a>delete和truncate在事务使用的区别：</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404120136767.png" alt="image-20210404120136767"></p>
<p>delete能顺利回滚，truncate不能。</p>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><blockquote>
<p>虚拟表，和普通表一样使用。是动态生成的数据。</p>
<p>比如：舞蹈班和普通班</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404113527130.png" alt="image-20210404113527130"></p>
<h3 id="视图创建"><a href="#视图创建" class="headerlink" title="视图创建"></a>视图创建</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404113647131.png" alt="image-20210404113647131"></p>
<h3 id="视图修改"><a href="#视图修改" class="headerlink" title="视图修改"></a>视图修改</h3><p>方式一：</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404114225037.png" alt="image-20210404114225037"></p>
<p>方式二：</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404114308802.png" alt="image-20210404114308802"></p>
<h3 id="视图删除"><a href="#视图删除" class="headerlink" title="视图删除"></a>视图删除</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404114336646.png" alt="image-20210404114336646"></p>
<h3 id="视图查看"><a href="#视图查看" class="headerlink" title="视图查看"></a>视图查看</h3><p>desc myv3;</p>
<p>show create view myv3;</p>
<h3 id="视图更新"><a href="#视图更新" class="headerlink" title="视图更新"></a>视图更新</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404114842071.png" alt="image-20210404114842071"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404114913253.png" alt="image-20210404114913253"></p>
<p>会对原始表修改。应给视图加权限。</p>
<h3 id="不能修改的视图"><a href="#不能修改的视图" class="headerlink" title="不能修改的视图"></a>不能修改的视图</h3><ol>
<li><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404115147493.png" alt="image-20210404115147493"></p>
</li>
<li><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404115226122.png" alt="image-20210404115226122"></p>
</li>
<li><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404115312937.png" alt="image-20210404115312937"></p>
</li>
<li><p>join</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404115405900.png" alt="image-20210404115405900"></p>
</li>
<li><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404115452633.png" alt="image-20210404115452633"></p>
</li>
<li><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210404115610373.png" alt="image-20210404115610373"></p>
</li>
</ol>
<h3 id="视图与表对比"><a href="#视图与表对比" class="headerlink" title="视图与表对比"></a>视图与表对比</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">创建关键字</th>
<th>占用物理空间</th>
<th align="center">使用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">视图</td>
<td align="center">create view</td>
<td>只保存了sql逻辑</td>
<td align="center">增删改查，一般不能增删改</td>
</tr>
<tr>
<td align="center">表</td>
<td align="center">create table</td>
<td>保存了数据</td>
<td align="center">增删改查</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL——函数</title>
    <url>/posts/1c1e9ba/</url>
    <content><![CDATA[<h2 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h2><ul>
<li><p>概念</p>
</li>
<li><p>类似于java的方法，将一组逻辑语句封装在方法体中，对外暴露方法名</p>
</li>
<li><p>好处</p>
<ol>
<li>隐藏了实现细节</li>
<li>提高了代码的重用性</li>
</ol>
</li>
<li><p>调用</p>
<ul>
<li>select 函数名(实参列表) </li>
</ul>
</li>
<li><p>特点</p>
<ol>
<li>叫什么（函数名）</li>
<li>干什么（函数功能）</li>
</ol>
</li>
<li><p>分类</p>
<ol>
<li><p>单行函数</p>
<ul>
<li>comcat</li>
<li>length</li>
<li>ifnull</li>
</ul>
</li>
<li><p>分组函数</p>
<p>功能：做统计使用，又称为统计函数、聚合函数、组函数</p>
</li>
</ol>
</li>
</ul>
<h3 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. length 获取参数值的字节个数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">length</span>(<span class="string">&#x27;张三丰&#x27;</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.concat 拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">CONCAT</span>(last_name, <span class="string">&#x27;_&#x27;</span>, first_name) 姓名</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. upper、lower</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">upper</span>(<span class="string">&#x27;john&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">lower</span>(<span class="string">&#x27;joHn&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">CONCAT</span>(<span class="keyword">UPPER</span>(last_name), <span class="keyword">LOWER</span>(first_name)) 姓名</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#4. substr、 substring</span></span><br><span class="line"><span class="comment">#索引从1开始</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">&#x27;李莫愁爱上了陆展元&#x27;</span>, <span class="number">7</span>) out_put;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">&#x27;李莫愁爱上了陆展元&#x27;</span>, <span class="number">1</span>, <span class="number">3</span>) out_put;</span><br><span class="line"></span><br><span class="line"><span class="comment">#5. instr  返回子串第一次出现的索引，找不到返回0</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">INSTR</span>(<span class="string">&#x27;杨不悔爱上了殷六侠&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;殷六侠&#x27;</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line">            </span><br><span class="line"><span class="comment">#6. trim</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(<span class="keyword">TRIM</span>(<span class="string">&#x27;  张翠山   &#x27;</span>)) <span class="keyword">AS</span> out_put;</span><br><span class="line"></span><br><span class="line"><span class="comment">#7. lpad 用指定的字符实现左填充指定长度</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">lpad</span>(<span class="string">&#x27;殷素素&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#8. rpad 用指定的字符实现右填充指定长度</span></span><br><span class="line"><span class="keyword">select</span> rpad(<span class="string">&#x27;殷素素&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#9. replace 替换</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">replace</span>(<span class="string">&#x27;周芷若周芷若爱上了张无忌爱上周芷若&#x27;</span>,<span class="string">&#x27;周芷若&#x27;</span>,<span class="string">&#x27;赵敏&#x27;</span>);</span><br></pre></td></tr></table></figure>





<h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. round 四舍五入,保留位数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">-1.55</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">1.567</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. ceil 向上取整数，返回&gt;=参数的最小整数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">ceil</span>(<span class="number">1.01</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. floor 向下取整，返回&lt;=参数的最大整数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">floor</span>(<span class="number">-1.22</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. truncate 截断小数点后几位</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">truncate</span>(<span class="number">1.444</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#5. mod 取余,被模数正负决定结果正负</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">mod</span>(<span class="number">-10</span>,<span class="number">3</span>);</span><br><span class="line">         </span><br></pre></td></tr></table></figure>





<h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210331202841973.png" alt="image-20210331202841973"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># now 返回当前系统日期+时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment"># curdate 返回当前系统时间，不包含时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment"># curtime 返回当前时间，不包含日期</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">curtime</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以获取指定的部分，年、月、日、小时、分钟、秒</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(<span class="keyword">now</span>()) 年;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(<span class="string">&#x27;1999-9-9&#x27;</span>) 年;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(hiredate) 年 <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">month</span>(<span class="keyword">now</span>()) 月;</span><br><span class="line"><span class="keyword">select</span> monthname(<span class="keyword">now</span>()) 月;</span><br><span class="line"></span><br><span class="line"><span class="comment"># str_to_date 将字符通过指定的格式转换为日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">STR_TO_DATE</span>(<span class="string">&#x27;1998-3-2&#x27;</span>, <span class="string">&#x27;%Y-%c-%d&#x27;</span>) <span class="keyword">AS</span> out_put;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询入职日期为1992-4-3的员工信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> hiredate = <span class="keyword">str_to_date</span>(<span class="string">&#x27;4-3 1992&#x27;</span>, <span class="string">&#x27;%c-%d %Y&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># date_format 将日期转换为字符</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name,</span><br><span class="line">    <span class="keyword">DATE_FORMAT</span>(hiredate, <span class="string">&#x27;%m月/%d日 %y年&#x27;</span>) 入职日期</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>



<h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>();</span><br><span class="line"><span class="keyword">SELECT</span> DATEBASE();</span><br><span class="line"><span class="keyword">SELECT</span> UESR();</span><br></pre></td></tr></table></figure>





<h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. if函数 ：if else的效果</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="number">10</span> &lt; <span class="number">5</span>, <span class="string">&#x27;大&#x27;</span>, <span class="string">&#x27;小&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. case</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    salary 原始工资,</span><br><span class="line">    department_id,</span><br><span class="line">    <span class="keyword">CASE</span> department_id</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="number">30</span> <span class="keyword">THEN</span> salary * <span class="number">1.1</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="number">40</span> <span class="keyword">THEN</span> salary * <span class="number">1.2</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="number">50</span> <span class="keyword">THEN</span> salary * <span class="number">1.3</span></span><br><span class="line">        <span class="keyword">ELSE</span> salary</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> 新工资</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    salary,</span><br><span class="line">    <span class="keyword">CASE</span></span><br><span class="line">        <span class="keyword">WHEN</span> salary &gt; <span class="number">20000</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> salary &gt; <span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> salary &gt; <span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> 工资级别</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees;</span><br></pre></td></tr></table></figure>





<h2 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h2><ul>
<li><p>功能：</p>
<ul>
<li>用作统计使用</li>
<li>又称为聚合函数或统计函数或组函数</li>
</ul>
</li>
<li><p>分类：</p>
<ul>
<li>sum 求和</li>
<li>avg 平均值</li>
<li>max 最大值</li>
<li>min 最小值</li>
<li>count 计算个数</li>
</ul>
</li>
<li><p>特点：</p>
<ul>
<li>sum、avg一般处理数值型</li>
<li>max、min可以处理任何类型</li>
<li>以上分组函数都忽略null值</li>
<li>可以搭配distinct实现去重</li>
<li>一般用count(*)统计行数</li>
<li>和分组函数一同查询的字段要求是group by后的字段</li>
</ul>
</li>
<li><p>语法：</p>
<p>select 分组函数，列（要求出现在group by 的后面）</p>
<p>from 表</p>
<p>『where 筛选条件』</p>
<p>group by 分组的列表</p>
<p>『order by 子句』</p>
<p>：注意查询列表必须特殊，要求是分组函数和group by后出现的字段  </p>
</li>
<li><p>分类筛选：</p>
<ul>
<li>分组前筛选<ul>
<li>数据源：原始表</li>
<li>位置：group by之前</li>
<li>关键字：where</li>
</ul>
</li>
<li>分组后筛选<ul>
<li>数据源：分组后的结果集</li>
<li>位置：group by之后</li>
<li>关键字：having</li>
</ul>
</li>
<li>分组函数作条件肯定是放在having子句中</li>
<li>能用分组前筛选的优先使用分组前筛选</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">SUM</span>(salary),</span><br><span class="line">    <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(salary), <span class="number">2</span>),</span><br><span class="line">    <span class="keyword">MAX</span>(salary),</span><br><span class="line">    <span class="keyword">MIN</span>(salary),</span><br><span class="line">    <span class="keyword">COUNT</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> salary)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATEDIFF</span>(<span class="keyword">NOW</span>(), <span class="string">&#x27;2000-08-06&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例1：查询每个工种的最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">MAX</span>(salary), job_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例2：查询每个位置上的部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">COUNT</span>(*), location_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    departments</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> location_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例3：查询邮箱中包含a字符的，每个部门的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">AVG</span>(salary), department_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例4：查询有奖金的每个领导手下员工的最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">MAX</span>(salary), manager_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">#分组后筛选用having</span></span><br><span class="line"><span class="comment">#案例5：查询哪个部门的员工&gt;2</span></span><br><span class="line"><span class="comment">#①查询每个部门的员工人数</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>), department_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">#②根据①的结果进行筛选，查询哪个部门的员工大于2</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>), department_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) &gt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例6：查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">MAX</span>(salary), job_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">MAX</span>(salary) &gt; <span class="number">12000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例7：按员工姓名的长度分组，查询˙每一组的员工个数，筛选员工个数&gt;5的有哪些</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>) c, <span class="keyword">LENGTH</span>(last_name) <span class="keyword">len</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">len</span></span><br><span class="line"><span class="keyword">HAVING</span> c &gt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#按多个字段分组</span></span><br><span class="line"><span class="comment">#案例8：查询每个部门每个工种的员工的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">AVG</span>(salary), department_id, job_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id , job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">AVG</span>(salary) &gt; <span class="number">10000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">AVG</span>(salary) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>java枚举类与注解</title>
    <url>/posts/2b247dfd/</url>
    <content><![CDATA[<h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><h2 id="枚举类的使用"><a href="#枚举类的使用" class="headerlink" title="枚举类的使用"></a>枚举类的使用</h2><p><strong>1. 枚举类的理解：类的对象只有有限个、确定的。</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215185948689.png" alt="image-20210215185948689"></p>
<ol start="2">
<li><p><strong>当需要定义一组常量时，强烈建议使用枚举类</strong></p>
</li>
<li><p>若枚举类只有一个对象，则可以作为一种单例模式的实现方式。</p>
</li>
</ol>
<h2 id="如何自定义枚举类"><a href="#如何自定义枚举类" class="headerlink" title="如何自定义枚举类"></a>如何自定义枚举类</h2><p>方式一：jdk5.0之前，自定义枚举类</p>
<p>方式二：jdk5.0，可以使用enum关键字定义枚举类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season spring = Season.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Season</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 声明色season对象的属性：private final 修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 私有化类的构造器，并给对象赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String seasonName, String seasonDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 提供当前枚举类的多个对象: public static final</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SPRING = <span class="keyword">new</span> Season(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;春暖花开&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SUMMER = <span class="keyword">new</span> Season(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;夏日炎炎&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season AUTUMN = <span class="keyword">new</span> Season(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;秋高气爽&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season WINTER = <span class="keyword">new</span> Season(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;大雪纷飞&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 其他诉求1：获取枚举类对象的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 其他诉求2：提供toString（）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season1 spring = Season1.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 提供当前枚举类的对象，多个对象之间用 【，】 隔开，每位对象【；】结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;春暖花开&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;夏日炎炎&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;秋高气爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;大雪纷飞&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 声明色season对象的属性：private final 修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 私有化类的构造器，并给对象赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName, String seasonDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 其他诉求2：提供toString（）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season1&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="enum的主要方法"><a href="#enum的主要方法" class="headerlink" title="enum的主要方法"></a>enum的主要方法</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215194658811.png" alt="image-20210215194658811"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215194739223.png" alt="image-20210215194739223"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AAA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//values（）</span></span><br><span class="line">        Season1 [] values = Season1.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            System.out.println(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      System.out.println(<span class="string">&quot;+++++++++&quot;</span>);</span><br><span class="line">        <span class="comment">//valueOf(String objName):返回枚举类中对象名是objName的对象。字符转化为枚举类</span></span><br><span class="line">        Season1 winter = Season1.valueOf(<span class="string">&quot;WINTER&quot;</span>);</span><br><span class="line">        System.out.println(winter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215195858173.png" alt="image-20210215195858173"></p>
<h2 id="使用enum关键字定义的枚举类实现接口的情况"><a href="#使用enum关键字定义的枚举类实现接口的情况" class="headerlink" title="使用enum关键字定义的枚举类实现接口的情况"></a>使用enum关键字定义的枚举类实现接口的情况</h2><p>情况一：实现接口，在enum类中实现接口方法</p>
<p>情况二：让枚举类的对象分别实现接口中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season1 spring = Season1.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span> <span class="keyword">implements</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//1. 提供当前枚举类的对象，多个对象之间用 【，】 隔开，每位对象【；】结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;春暖花开&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;夏日炎炎&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;秋高气爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;大雪纷飞&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 声明色season对象的属性：private final 修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 私有化类的构造器，并给对象赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName, String seasonDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重写接口方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system.out,println(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season1 spring = Season1.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span> <span class="keyword">implements</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="comment">//1. 提供当前枚举类的对象，多个对象之间用 【，】 隔开，每位对象【；】结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;春暖花开&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;夏日炎炎&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;pp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;秋高气爽&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ss&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;大雪纷飞&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;LL&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 声明色season对象的属性：private final 修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 私有化类的构造器，并给对象赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName, String seasonDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215212516225.png" alt="image-20210215212516225"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215212526606.png" alt="image-20210215212526606"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215212825335.png" alt="image-20210215212825335"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215212849679.png" alt="image-20210215212849679"></p>
<ol>
<li><h2 id="理解Annotation"><a href="#理解Annotation" class="headerlink" title="理解Annotation"></a>理解Annotation</h2></li>
</ol>
<p>Annotation其实就是代码里的<strong>特殊标记</strong>，这些标记可以编译，类加载，运行时被读取，并执行相应的处理。可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息。</p>
<ol start="2">
<li><h2 id="Annotation的使用用例"><a href="#Annotation的使用用例" class="headerlink" title="Annotation的使用用例"></a>Annotation的使用用例</h2><p>示例一：生成文档相关的注解</p>
<p>示例二：在编译时进行格式检查</p>
<p>​    @override</p>
<p>​    @Deprecated</p>
<p>​    @SuppressWarnings：抑制编译器警告</p>
<p>实例三：跟踪代码依赖性，实现替代配置文件功能</p>
</li>
</ol>
<ol start="3">
<li><h2 id="如何自定义注解：参照suppressWarnings"><a href="#如何自定义注解：参照suppressWarnings" class="headerlink" title="如何自定义注解：参照suppressWarnings"></a>如何自定义注解：参照suppressWarnings</h2><p>①注解声明为：@interface</p>
<p>②内部定义成员，通常用value（）表示</p>
<p>③可以指定成员的默认值，使用default定义</p>
<p>Ⅳ如果自定义注解没有成员，标明是一个标识作用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation(value = &quot;hi&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果注解有成员，在使用注解时，需要指明成员的值。</p>
</li>
<li><p>自定义注解必须配上注解的信息处理流程（使用反射）才有意义</p>
</li>
<li><p>自定义注解通常都会指明两个元注解：Retention、Target</p>
</li>
</ul>
</li>
</ol>
<ol start="4">
<li><h2 id="jdk提供的4种元注解"><a href="#jdk提供的4种元注解" class="headerlink" title="jdk提供的4种元注解"></a>jdk提供的4种元注解</h2><blockquote>
<p>元注解：对现有的注解修饰的注解</p>
</blockquote>
<p>​    Retention：生命周期source、class、runtime</p>
<p>​        只有声明为runtime的注解才能通过反射获取</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215215948913.png" alt="image-20210215215948913"></p>
<p>Target：用于指定被修饰的Annotation能用于修饰哪些程序元素</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215220322269.png" alt="image-20210215220322269"></p>
<p>Documented：表示所修饰的注解在被javadoc解析时，保留下来。</p>
<p>Inherited：被它修饰的ANnotation将具有继承性</p>
</li>
</ol>
<ol start="5">
<li><h2 id="通过反射获取注解信息"><a href="#通过反射获取注解信息" class="headerlink" title="通过反射获取注解信息"></a>通过反射获取注解信息</h2></li>
<li><h2 id="jdk-8中注解的新特性"><a href="#jdk-8中注解的新特性" class="headerlink" title="jdk 8中注解的新特性"></a>jdk 8中注解的新特性</h2><ul>
<li><p>可重复注解</p>
<blockquote>
<p>①在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class</p>
<p>②MyAnnotation的Target和Retention要与MyAnnotation相同</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215222137909.png" alt="image-20210215222137909"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215222234606.png" alt="image-20210215222234606"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215222307209.png" alt="image-20210215222307209"></p>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>类型注解</p>
<blockquote>
<p>ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明）</p>
<p>ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215222847623.png" alt="image-20210215222847623"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210215222902202.png" alt="image-20210215222902202"></p>
</li>
</ul>
<h1 id="每天一考"><a href="#每天一考" class="headerlink" title="每天一考"></a>每天一考</h1><ol>
<li><p>什么是枚举类？枚举类的对象声明的修饰符都有哪些？</p>
<p>枚举类：类中的对象的个数是确定的，有限个</p>
<p>public static final</p>
</li>
<li><p>什么是元注解？说说Retention和Target元注解的作用</p>
<p>元注解：对现有的注解进行解释说明的注解</p>
<p>Retention：指明所修饰的注解的生命周期</p>
<ul>
<li>SOURCE</li>
<li>CLASS</li>
<li>RUNTIME</li>
</ul>
</li>
<li><p>说说你所理解的集合框架都有哪些接口，存储结构的特点？</p>
</li>
<li><p>比较throw和throws的异同</p>
<p>throw：手动生成一个异常对象，并抛出。在方法内部使用 &lt;-&gt; 自动抛出异常对象</p>
<p>throws：处理异常的方式。使用在方法声明处的末尾 &lt;-&gt; try-catch-finally</p>
<p>“上游排污，下游治污”</p>
</li>
<li><p>谈谈你对同步代码块中同步监视器和共享数据的理解及各自要求</p>
<p>同步监视器：俗称锁。</p>
<ul>
<li>任何一个类的对象都可以充当锁</li>
<li>多个线程共用同一把锁</li>
</ul>
<p>共享数据：多个线程共同操作的数据，即为共享数据</p>
<ul>
<li>需要使用同步机制将操作共享数据的代码包起来。不能包多了，也不能包少了</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库第二章——数据库系统结构</title>
    <url>/posts/95a84140/</url>
    <content><![CDATA[<h1 id="数据库系统结构概述"><a href="#数据库系统结构概述" class="headerlink" title="数据库系统结构概述"></a>数据库系统结构概述</h1><ul>
<li><p>数据库管理系统内部的系统结构</p>
<ul>
<li>三级模式结构</li>
<li>两级映射功能</li>
</ul>
</li>
<li><p>数据库系统外部的体系结构</p>
<ul>
<li><p>集中式体系结构</p>
</li>
<li><p>“客户/服务器”架构</p>
</li>
<li><p>“客户/应用服务器/数据库服务器”架构</p>
</li>
</ul>
</li>
</ul>
<h1 id="数据库模式和实例的概念"><a href="#数据库模式和实例的概念" class="headerlink" title="数据库模式和实例的概念"></a>数据库模式和实例的概念</h1><ul>
<li><p>模式(Schema)与实例(Instance)</p>
<ul>
<li><p><strong>模式</strong>：</p>
<ul>
<li>数据库的描述。包括数据库的数据结构、数据类型和约束</li>
</ul>
</li>
<li><p>**实例(状态)**：某一时刻实际存储在数据库中的数据集合</p>
</li>
<li><p>实例是模式在某一时刻的具体化、实例化(类似于面向对象理论中Class与Object的关系)</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108205629791.png" alt="image-20210108205629791"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108205644673.png" alt="image-20210108205644673"></p>
<ul>
<li>数据库模式很少发生改变 <ul>
<li>模式也被叫做内涵</li>
</ul>
</li>
<li>每次进行数据库更新操作时数据库实例都会发生变化<ul>
<li>实例(状态)也被称为外延</li>
</ul>
</li>
</ul>
<h1 id="数据库系统的三级模式结构"><a href="#数据库系统的三级模式结构" class="headerlink" title="数据库系统的三级模式结构"></a>数据库系统的三级模式结构</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108205831449.png" alt="image-20210108205831449"></p>
<ul>
<li><p><strong>内模式</strong>,也称存储模式 (Internal schema)：</p>
<blockquote>
<p>数据物理结构和存储方式的描述，是数据在数据库内部的表示方式 </p>
</blockquote>
<ul>
<li>通常使用<strong>物理数据模型</strong>描述</li>
</ul>
</li>
<li><p><strong>概念模式</strong>,也称全局模式，有时简称“模式” (Conceptual schema)：</p>
<blockquote>
<p>数据库中全体数据的逻辑结构和特征的描述</p>
</blockquote>
<ul>
<li>通常使用<strong>概念或逻辑数据模型</strong>描述</li>
</ul>
</li>
<li><p><strong>外模式</strong>,也称子模式或用户模式 (External schemas)：</p>
<blockquote>
<p>数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述 </p>
<p>使不同的用户能看到的界面不同。</p>
</blockquote>
<ul>
<li><p>通常使用与<strong>概念模式相同的数据模型</strong>描述</p>
</li>
<li><p>模型(Model)与模式(Schema)的区别</p>
<ul>
<li>数据模型是描述数据的一种通用形式，模式则是用给定的数据模型描述具体数据。注意：真正的数据内容保存在数据库状态(State)中。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="用E-R概念模型表示的概念模型"><a href="#用E-R概念模型表示的概念模型" class="headerlink" title="用E-R概念模型表示的概念模型"></a>用E-R概念模型表示的概念模型</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108210400522.png" alt="image-20210108210400522"></p>
<h2 id="用关系逻辑模型表示的概念模型"><a href="#用关系逻辑模型表示的概念模型" class="headerlink" title="用关系逻辑模型表示的概念模型"></a>用关系逻辑模型表示的概念模型</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108210441911.png" alt="image-20210108210441911"></p>
<h2 id="用关系逻辑模型表示的外模式及其实例"><a href="#用关系逻辑模型表示的外模式及其实例" class="headerlink" title="用关系逻辑模型表示的外模式及其实例"></a>用关系逻辑模型表示的外模式及其实例</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108210546764.png" alt="image-20210108210546764"></p>
<ul>
<li>外模式用于使不同用户级别看到的界面不同</li>
</ul>
<h1 id="数据库系统的两级映射功能"><a href="#数据库系统的两级映射功能" class="headerlink" title="数据库系统的两级映射功能"></a>数据库系统的两级映射功能</h1><ul>
<li><p><strong>两级映射</strong>(Mapping)</p>
<ul>
<li>概念模式/内模式映射</li>
<li>外模式/概念模式映射</li>
</ul>
</li>
<li><p><strong>数据独立性</strong></p>
<ul>
<li>物理独立性(Physical Data Independence)</li>
<li>逻辑独立性(Logical Data Independence)</li>
</ul>
</li>
</ul>
<h2 id="数据库的工作流程"><a href="#数据库的工作流程" class="headerlink" title="数据库的工作流程"></a>数据库的工作流程</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108205831449.png" alt="image-20210108205831449"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108210927057.png" alt="image-20210108210927057"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108210952255.png" alt="image-20210108210952255"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108211003467.png" alt="image-20210108211003467"></p>
<h2 id="数据独立性"><a href="#数据独立性" class="headerlink" title="数据独立性"></a>数据独立性</h2><h3 id="数据的物理独立性"><a href="#数据的物理独立性" class="headerlink" title="数据的物理独立性"></a>数据的物理独立性</h3><blockquote>
<p>内模式与概念模式之间的映射提供了数据的物理独立性。当数据的物理结构发生变化时，如对数据增加索引、改变数据的存储位置、改变存储设备等，不影响数据的逻辑结构。当DBA根据应用程序对数据的存取要求，对数据的物理组织进行优化后，并不需要对概念模式和外模式进行重新定义，也不需要修改应用程序，只需要修改内模式与概念模式之间的映射。</p>
</blockquote>
<h3 id="数据的逻辑独立性"><a href="#数据的逻辑独立性" class="headerlink" title="数据的逻辑独立性"></a>数据的逻辑独立性</h3><blockquote>
<p>概念模式与外模式之间的映射提供了数据的逻辑独立性。当数据的整体逻辑结构发生变化时，如增加新的关系、新的属性、改变属性的数据类型等，可以通过修改各个外模式与概念模式之间的映射，从而使外模式和依据外模式编写的应用程序不受影响。</p>
</blockquote>
<h1 id="数据库系统外部的体系结构"><a href="#数据库系统外部的体系结构" class="headerlink" title="数据库系统外部的体系结构"></a>数据库系统外部的体系结构</h1><h2 id="集中式架构"><a href="#集中式架构" class="headerlink" title="集中式架构"></a>集中式架构</h2><ul>
<li>将所有软硬件集中到一起：包括DBMS,硬件，应用程序，人机交互软件等</li>
<li>用户仍然可以通过远程终端连接。然而，所有运算都集中在一个位置</li>
</ul>
<p><strong>一个物理集中式的架构体系</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108211551077.png" alt="image-20210108211551077"></p>
<h2 id="客户-服务器架构"><a href="#客户-服务器架构" class="headerlink" title="客户-服务器架构"></a>客户-服务器架构</h2><ul>
<li><strong>网络数据库系统</strong>：<ul>
<li>数据库系统软件安装在服务器上，通过网络向外界提供数据服务</li>
</ul>
</li>
<li><strong>Client/Server：</strong><ul>
<li>需要安装专门的客户端软件</li>
</ul>
</li>
<li><strong>Browser/Server：</strong><ul>
<li>不需要安装专门的客户端软件</li>
</ul>
</li>
</ul>
<h3 id="Client-Server架构"><a href="#Client-Server架构" class="headerlink" title="Client/Server架构"></a>Client/Server架构</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108211826865.png" alt="image-20210108211826865"></p>
<h4 id="Client-Server架构组件"><a href="#Client-Server架构组件" class="headerlink" title="Client/Server架构组件"></a>Client/Server架构组件</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108211904397.png" alt="image-20210108211904397"></p>
<h4 id="Client-Server架构通信过程"><a href="#Client-Server架构通信过程" class="headerlink" title="Client/Server架构通信过程"></a>Client/Server架构通信过程</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108211945073.png" alt="image-20210108211945073"></p>
<h3 id="Browser-Server架构"><a href="#Browser-Server架构" class="headerlink" title="Browser/Server架构"></a>Browser/Server架构</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108212102096.png" alt="image-20210108212102096"></p>
<h4 id="Browser-Server架构通信过程"><a href="#Browser-Server架构通信过程" class="headerlink" title="Browser/Server架构通信过程"></a>Browser/Server架构通信过程</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108212145147.png" alt="image-20210108212145147"></p>
<h2 id="三层客户-服务器逻辑结构"><a href="#三层客户-服务器逻辑结构" class="headerlink" title="三层客户-服务器逻辑结构"></a>三层客户-服务器逻辑结构</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108212244213.png" alt="image-20210108212244213"></p>
<ul>
<li><p><strong>表现层</strong> (Presentation layer)：</p>
<ul>
<li>负责展示用户界面，以及与用户的交互。</li>
</ul>
</li>
<li><p><strong>业务逻辑层或中间层</strong> (Business logic layer ):</p>
<ul>
<li> 负责接收来自表示层的请求，并根据它包含的业务逻辑给表示层返回一个结果。</li>
</ul>
</li>
<li><p><strong>数据库服务层</strong> (Database services layer): </p>
<ul>
<li>负责存储应用程序的数据，并在接收到请求时，把这些数据发送给业务层。</li>
</ul>
</li>
</ul>
<h3 id="例：图书管理系统"><a href="#例：图书管理系统" class="headerlink" title="例：图书管理系统"></a>例：图书管理系统</h3><h4 id="图书馆信息管理系统数据库服务层"><a href="#图书馆信息管理系统数据库服务层" class="headerlink" title="图书馆信息管理系统数据库服务层"></a>图书馆信息管理系统数据库服务层</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108212457459.png" alt="image-20210108212457459"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108212510722.png" alt="image-20210108212510722"></p>
<h4 id="图书馆信息管理系统业务层"><a href="#图书馆信息管理系统业务层" class="headerlink" title="图书馆信息管理系统业务层"></a>图书馆信息管理系统业务层</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108212528301.png" alt="image-20210108212528301"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108212536898.png" alt="image-20210108212536898"></p>
<h4 id="图书馆信息管理系统表现层"><a href="#图书馆信息管理系统表现层" class="headerlink" title="图书馆信息管理系统表现层"></a>图书馆信息管理系统表现层</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108212554829.png" alt="image-20210108212554829"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108212607770.png" alt="image-20210108212607770"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108212619538.png" alt="image-20210108212619538"></p>
]]></content>
      <categories>
        <category>数据库原理及应用</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. <a id="more"></a>Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>数据库第四章——关系数据库标准语言SQL（2）</title>
    <url>/posts/b4b005f4/</url>
    <content><![CDATA[<h1 id="SQL的功能组成"><a href="#SQL的功能组成" class="headerlink" title="SQL的功能组成"></a>SQL的功能组成</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111095419310.png" alt="image-20210111095419310"></p>
<h2 id="SQL－-gt-DML-－-gt-DQL-数据查询"><a href="#SQL－-gt-DML-－-gt-DQL-数据查询" class="headerlink" title="SQL－&gt;DML －&gt;DQL(数据查询)"></a>SQL－&gt;DML －&gt;DQL(数据查询)</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111095619074.png" alt="image-20210111095619074"></p>
<h1 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h1><p><strong>例7-1：查询所有学生所在院系信息。</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111100039169.png" alt="image-20210111100039169"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111100055583.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENTINFO</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> DEPARTMENT <span class="keyword">ON</span> (STUDENTINFO.STUDENTDEPARTMENTIN=DEPARTMENT.DEPARTMENTID)</span><br></pre></td></tr></table></figure>









<h2 id="内连接执行过程"><a href="#内连接执行过程" class="headerlink" title="内连接执行过程"></a>内连接执行过程</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111100310303.png" alt="image-20210111100310303"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111102107255.png" alt="image-20210111102107255"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111100511937.png" alt="image-20210111100511937"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.STUDENTNO, S.STUDENTNAME, D.DEPARTMENTNAME <span class="keyword">FROM</span> STUDENTINFO <span class="keyword">AS</span> S <span class="keyword">INNER</span> <span class="keyword">JOIN</span> DEPARTMENT <span class="keyword">AS</span> D <span class="keyword">ON</span> (S.STUDENTDEPARTIN = D.DEPARTMENTID)</span><br></pre></td></tr></table></figure>





<h2 id="多表查询时SELECT-表示的含义"><a href="#多表查询时SELECT-表示的含义" class="headerlink" title="多表查询时SELECT *表示的含义"></a>多表查询时SELECT *表示的含义</h2><ul>
<li>当未使用限定符指定时，星号解析为对 FROM 子句中所指定的所有表或视图中的所有列的引用</li>
<li>当使用表或视图名称进行限定时，星号解析为对表或视图中的所有列的引用</li>
</ul>
<h2 id="注意：尽量不要用以下连接方式"><a href="#注意：尽量不要用以下连接方式" class="headerlink" title="注意：尽量不要用以下连接方式"></a>注意：尽量不要用以下连接方式</h2><ul>
<li><pre><code class="sql">SELECT * FROM STUDENTINFO, DEPARTMENT WHERE STUDENTINFO.STUDENTDEPARTID=DEPARTMENT.DEPARTMENTID
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 原因：无法将连接条件和针对连接后生成的“大表”的筛选条件分开</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">**数据挖掘例7-2：考察这家公司技术部门的男女员工比例**</span><br><span class="line"></span><br><span class="line">![image-20210111100750333](https:&#x2F;&#x2F;chasing1874.oss-cn-chengdu.aliyuncs.com&#x2F;image-20210111100750333.png)</span><br><span class="line"></span><br><span class="line">![image-20210111100805120](https:&#x2F;&#x2F;chasing1874.oss-cn-chengdu.aliyuncs.com&#x2F;image-20210111100805120.png)</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;sql</span><br><span class="line">SELECT * FROM EMPLOYEE E JOIN DEPARTMENT D ON (E.DNO &#x3D; D.DNUMBER)</span><br><span class="line"></span><br><span class="line">SELECT SEX, COUNT(*) AS 人数 FROM EMPLOYEE JOIN DEPARTMENT ON (DNO &#x3D; DNUMBER) WHERE DNAME&#x3D;&#39;RESEARCH&#39; GROUP BY SEX</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ul>
<h2 id="多表内连接查询"><a href="#多表内连接查询" class="headerlink" title="多表内连接查询"></a>多表内连接查询</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111100842785.png" alt="image-20210111100842785"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111100854911.png" alt="image-20210111100854911"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111100906322.png" alt="image-20210111100906322"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EXAMRECORD E <span class="keyword">JOIN</span> STUDENTINFO S <span class="keyword">ON</span> (E.STUDENTNO = E.STUDENTNO) <span class="keyword">JOIN</span> COURSE C <span class="keyword">ON</span> (C.COURSEID = E.COURSEID)</span><br></pre></td></tr></table></figure>





<p><strong>例7-3：查询所有学生各门课程成绩</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111100932313.png" alt="image-20210111100932313"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> STUDENTNAME <span class="keyword">AS</span> 学生姓名 , COURSENAME <span class="keyword">AS</span> 课程名称, SCORE <span class="keyword">AS</span> 成绩 <span class="keyword">FROM</span> EXAMRECORD E <span class="keyword">JOIN</span> STUDENTINFO S <span class="keyword">ON</span> (E.STUDENTNO=S.STUDENTNO) <span class="keyword">JOIN</span> COUSE C <span class="keyword">ON</span> (C.COURSEID=E.COURSEID)</span><br></pre></td></tr></table></figure>





<p><strong>例7-4 ：查询各门课程任课教师信息</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111100959522.png" alt="image-20210111100959522"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111101013925.png" alt="image-20210111101013925"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COURSE <span class="keyword">ORDER</span> <span class="keyword">BY</span> TEACHERID <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> TEACHER</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COURSE C <span class="keyword">JOIN</span> TEACHER T <span class="keyword">ON</span> (C.TEACHERID=T.TEACHERID)</span><br></pre></td></tr></table></figure>







<h1 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h1><h2 id="LEFT-OUTER-JOIN"><a href="#LEFT-OUTER-JOIN" class="headerlink" title="LEFT OUTER JOIN"></a>LEFT OUTER JOIN</h2><blockquote>
<p>显示LEFT表(Course)中的全部元组，如果RIGHT表(Teacher)<br>中没有扫描到符合连接条件的元组，则用NULL代替</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111104650305.png" alt="image-20210111104650305"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COURSE C <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> TEACHER T <span class="keyword">ON</span> (C.TEACHERID = T.TEACHERID) <span class="keyword">ORDER</span> <span class="keyword">BY</span> T.TEACHERID <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>



<h2 id="RIGHT-OUTER-JOIN"><a href="#RIGHT-OUTER-JOIN" class="headerlink" title="RIGHT OUTER JOIN"></a>RIGHT OUTER JOIN</h2><blockquote>
<p>显示LEFT表(Course)中的全部元组，如果RIGHT表(Teacher)<br>中没有扫描到符合连接条件的元组，则用NULL代替</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111104745799.png" alt="image-20210111104745799"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COURSE C <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> TEACHER T <span class="keyword">ON</span> (C.TEACHERID=T.TEACHERID) <span class="keyword">ORDER</span> <span class="keyword">BY</span> C.COURSEID <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>





<h3 id="注意：进行左、右外连接时表的顺序非常重要"><a href="#注意：进行左、右外连接时表的顺序非常重要" class="headerlink" title="注意：进行左、右外连接时表的顺序非常重要"></a>注意：进行左、右外连接时表的顺序非常重要</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111104837990.png" alt="image-20210111104837990"></p>
<h2 id="FULL-OUTTER-JOIN"><a href="#FULL-OUTTER-JOIN" class="headerlink" title="FULL OUTTER JOIN"></a>FULL OUTTER JOIN</h2><blockquote>
<p>显示LEFT表(Course) 和RIGHT表(Teacher)中的全部元组，如果<br>没有扫描到符合连接条件的元组，<strong>则用NULL代替</strong></p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111104907825.png" alt="image-20210111104907825"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COURSE C <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> TEACHER T <span class="keyword">ON</span> (C.TEACHERID=T.TEACHERID) <span class="keyword">ORDER</span> <span class="keyword">BY</span> C.TEACHERID <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>





<h3 id="注意：多表外连接，表顺序很重要"><a href="#注意：多表外连接，表顺序很重要" class="headerlink" title="注意：多表外连接，表顺序很重要"></a>注意：多表外连接，表顺序很重要</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111104939651.png" alt="image-20210111104939651"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111104949775.png" alt="image-20210111104949775"></p>
<h3 id="例7-5-："><a href="#例7-5-：" class="headerlink" title="例7-5 ："></a><strong>例7-5 ：</strong></h3><p><strong>查询所有学生选修的课程(包括未选课学生以及没有学生选修的课程信息)</strong></p>
<ol>
<li>连接“StudentInfo”和“ExamRecord”</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111105100017.png" alt="image-20210111105100017"></p>
<ol start="2">
<li>把第1步生成的结果关系与“Course”连接</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111105207670.png" alt="image-20210111105207670"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111105222970.png" alt="image-20210111105222970"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111105234460.png" alt="image-20210111105234460"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111105245515.png" alt="image-20210111105245515"></p>
<ol start="3">
<li>按照题目要求进行适当的投影操作</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111105348702.png" alt="image-20210111105348702"></p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><blockquote>
<p>所有用于单表的查询技术都可以用于多表查询，多表只不过是把单表按照一定连接条件(join condition)连接成一张<strong>“大表”</strong></p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111105430685.png" alt="image-20210111105430685"></p>
<h2 id="有连接时的查询执行过程"><a href="#有连接时的查询执行过程" class="headerlink" title="有连接时的查询执行过程"></a>有连接时的查询执行过程</h2><ul>
<li>生成结果关系(“大表”)—》在“大表”上利用WHERE指定的条件筛选元组—》按照Group by指定的属性将元组分组—》将Group by的分组用Having指定的条件筛选—》按照Order By指定的属性对元组排序(排序的属性可以不在最后投影的属性列中)—》投影或用函数、表达式计算</li>
</ul>
<ul>
<li>如果没有GROUP BY和HAVING的话，上述步骤中红色的部分将不会执行</li>
</ul>
<h3 id="例7-6-："><a href="#例7-6-：" class="headerlink" title="例7-6 ："></a><strong>例7-6 ：</strong></h3><p><strong>查询部门男性员工数大于2的部门名称及男性员工人数，并按人数降序排列</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111105654992.png" alt="image-20210111105654992"></p>
<ol>
<li>生成结果关系(“大表”)</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111105731991.png" alt="image-20210111105731991"></p>
<ol start="2">
<li>在“大表”上利用WHERE指定的条件筛选元组</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111105755760.png" alt="image-20210111105755760"></p>
<ol start="3">
<li>按照Group by指定的属性将元组分组</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111105827865.png" alt="image-20210111105827865"></p>
<ol start="4">
<li>将Group by的分组用Having指定的条件筛选</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111105850431.png" alt="image-20210111105850431"></p>
<ol start="5">
<li>按照Order By指定的属性对元组排序</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111105914626.png" alt="image-20210111105914626"></p>
<ol start="6">
<li>投影或用函数、表达式计算</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111105944800.png" alt="image-20210111105944800"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DNAME , <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> EMPLOYEE E <span class="keyword">JOIN</span> DEPARTMENT D <span class="keyword">ON</span> (E.DNO=D.DNUMBER) <span class="keyword">WHERE</span> SEX=<span class="string">&#x27;M&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> DNAME <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt; <span class="number">2</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(*) <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>





<h3 id="补充：一个查询优化的例子"><a href="#补充：一个查询优化的例子" class="headerlink" title="补充：一个查询优化的例子"></a>补充：一个查询优化的例子</h3><p>在逻辑上，我们可以认为DBMS是先通过JOIN操作(关系代数)把所有的表连成一张“大表”后再来执行SELECT操作(关系代数)，但实际上DBMS在某些情况下会对查询的执行过程进行优化，比如先执行SELECT操作(从而有可能减少参与JOIN操作的关系的元组数)，再执行JOIN操作。</p>
<h4 id="DBMS处理查询的过程"><a href="#DBMS处理查询的过程" class="headerlink" title="DBMS处理查询的过程"></a>DBMS处理查询的过程</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111110027640.png" alt="image-20210111110027640"></p>
<h3 id="例7-7-："><a href="#例7-7-：" class="headerlink" title="例7-7 ："></a>例7-7 ：</h3><p><strong>查询女性员工的家属信息</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111110108326.png" alt="image-20210111110108326"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNAME, LNAME, DEPENDRNT_NAME <span class="keyword">FROM</span> EMPLOYEE <span class="keyword">JOIN</span> DEPENDENT <span class="keyword">ON</span> (SSN = ESSN) <span class="keyword">WHERE</span> (EMPLOYEE.SEX = <span class="string">&#x27;F&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111110136785.png" alt="image-20210111110136785"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111110146387.png" alt="image-20210111110146387"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111110159964.png" alt="image-20210111110159964"></p>
<h1 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h1><blockquote>
<p>交叉连接(CROSS JOIN)：实际就是关系代数中的“笛卡尔积”(Cartesian Product)</p>
</blockquote>
<h3 id="例7-8-："><a href="#例7-8-：" class="headerlink" title="例7-8 ："></a>例7-8 ：</h3><p><strong>将StudentInfo与Department表交叉连接</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111115926151.png" alt="image-20210111115926151"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111115938420.png" alt="image-20210111115938420"></p>
<p><strong>如果添加一个 WHERE 子句，则交叉连接的作用将同内连接一样</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111120001776.png" alt="image-20210111120001776"></p>
<h3 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h3><p>CROSS JOIN后面不能加ON</p>
<h3 id="CROSS-JOIN的用处"><a href="#CROSS-JOIN的用处" class="headerlink" title="CROSS JOIN的用处"></a>CROSS JOIN的用处</h3><blockquote>
<p>CROSS JOIN的一个用途是生成样本或测试数据。例如：如果你要生成1000行3列的一个表用于测试，不必建立这样一张表并进行1000次插入操作，可以建立三张表，每张表1列10行数据，然后将这三张表进行交叉连接可得10<em>10</em>10=1000行数据。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111120117583.png" alt="image-20210111120117583"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111120132062.png" alt="image-20210111120132062"></p>
<h1 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h1><h3 id="例7-9-："><a href="#例7-9-：" class="headerlink" title="例7-9 ："></a>例7-9 ：</h3><p><strong>查询每个员工上级的姓名</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111120202140.png" alt="image-20210111120202140"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111120219805.png" alt="image-20210111120219805"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111120231994.png" alt="image-20210111120231994"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMPLOYEE E1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> EMPLOYEE E2 <span class="keyword">ON</span> (E1.SUPERSSN=E2.SSN) <span class="keyword">ORDER</span> <span class="keyword">BY</span> E1.SUPERSSN <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> E1.FNAME+<span class="string">&#x27;,&#x27;</span>+E1.LNAME 员工姓名, E2.FNAME+<span class="string">&#x27;,&#x27;</span>E2.LNAME 上级姓名 <span class="keyword">FROM</span> EMPLOYEE E1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> EMPLOYEE E2 <span class="keyword">ON</span> E1.SUPERSSN=E2.SSN <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">2</span> D</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>数据库原理及应用</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库第四章——关系数据库标准语言SQL（3）</title>
    <url>/posts/c0c6291/</url>
    <content><![CDATA[<h1 id="SQL的功能组成"><a href="#SQL的功能组成" class="headerlink" title="SQL的功能组成"></a>SQL的功能组成</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111193929585.png" alt="image-20210111193929585"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111193940464.png" alt="image-20210111193940464"></p>
<h1 id="子查询（嵌套查询）"><a href="#子查询（嵌套查询）" class="headerlink" title="子查询（嵌套查询）"></a>子查询（嵌套查询）</h1><blockquote>
<p>将一个查询块(SELECT-FROM-WHERE)嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询</p>
</blockquote>
<p><strong>举例：查询“John Smith”的完成项目情况</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111194301996.png" alt="image-20210111194301996"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> WORKS_ON <span class="keyword">WHERE</span> ESSN=(<span class="keyword">SELECT</span> SSN <span class="keyword">FROM</span> EMPLOYEE <span class="keyword">WHERE</span> FNAME=<span class="string">&#x27;JOHN&#x27;</span> <span class="keyword">AND</span> LNAME=<span class="string">&#x27;Smith&#x27;</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> PNO <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>



<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>SQL语言允许多层嵌套查询(建议：不要编写太复杂的嵌套查询，可以利用中间变量简化SQL语句)</li>
<li>子查询的SELECT语句不能使用ORDER BY子句，ORDER BY子句只能对最终查询结果排序</li>
<li>嵌套查询一般的求解方法是由里向外处理</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111194414808.png" alt="image-20210111194414808"></li>
</ul>
<h2 id="带有IN谓词的子查询"><a href="#带有IN谓词的子查询" class="headerlink" title="带有IN谓词的子查询"></a>带有IN谓词的子查询</h2><h3 id="例8-1："><a href="#例8-1：" class="headerlink" title="例8-1："></a>例8-1：</h3><p><strong>查询参与了任何一个SSN为‘123456789’的员工参与过项目的员工SSN</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111194706997.png" alt="image-20210111194706997"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> ESSN <span class="keyword">FROM</span> WORKS_ON <span class="keyword">WHERE</span> PNO <span class="keyword">IN</span> (<span class="keyword">SELECT</span> PNO <span class="keyword">FROM</span> WORKS_ON <span class="keyword">WHERE</span> ESSN=<span class="string">&#x27;123456789&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="例8-2："><a href="#例8-2：" class="headerlink" title="例8-2："></a>例8-2：</h3><p><strong>查询参与了任何一个SSN为‘123456789’的员工参与过项目的员工姓名</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111194734490.png" alt="image-20210111194734490"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNAME, LNAME <span class="keyword">FROM</span> EMPLOYEE <span class="keyword">WHERE</span> SSN <span class="keyword">IN</span> (<span class="keyword">SELECT</span> ESSN <span class="keyword">FROM</span> WORKS_ON <span class="keyword">WHERE</span> PRO <span class="keyword">IN</span> (<span class="keyword">SELECT</span> PNO <span class="keyword">FROM</span> WORKS_ON <span class="keyword">WHERE</span> ESSN=<span class="string">&#x27;123456789&#x27;</span>))</span><br></pre></td></tr></table></figure>





<h3 id="例8-3："><a href="#例8-3：" class="headerlink" title="例8-3："></a>例8-3：</h3><p><strong>查询参与了任何一个‘John Smith’ 参与过项目的员工姓名</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111194808213.png" alt="image-20210111194808213"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNAME, LNAME <span class="keyword">FROM</span> EMPLOYEE <span class="keyword">WHERE</span> SSN <span class="keyword">IN</span> (<span class="keyword">SELECT</span> ESSN <span class="keyword">FROM</span> WORKS_ON <span class="keyword">WHERE</span> PNO <span class="keyword">IN</span> (<span class="keyword">SELECT</span> PNO <span class="keyword">FROM</span> WORKS_ON W <span class="keyword">JOIN</span> EMPLOYEE E <span class="keyword">ON</span> W.ESSN=E.SSN <span class="keyword">WHERE</span> FNAME=<span class="string">&#x27;JOHN&#x27;</span> <span class="keyword">AND</span> LNAME=<span class="string">&#x27;SMITH&#x27;</span>))</span><br></pre></td></tr></table></figure>





<h3 id="例8-4："><a href="#例8-4：" class="headerlink" title="例8-4："></a>例8-4：</h3><p><strong>查询有家属的员工的姓名</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111194836923.png" alt="image-20210111194836923"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNAME, LNAME <span class="keyword">FROM</span> EMPLOYEE <span class="keyword">WHERE</span> SSN <span class="keyword">IN</span> (<span class="keyword">SELECT</span> ESSN <span class="keyword">FROM</span> DEPENDENT)</span><br></pre></td></tr></table></figure>



<h3 id="例8-5："><a href="#例8-5：" class="headerlink" title="例8-5："></a>例8-5：</h3><p><strong>查询有家属的员工的姓名(用连接查询方式)</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111194904519.png" alt="image-20210111194904519"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> FNAME, LNAME <span class="keyword">FROM</span> EMPLOYEE E <span class="keyword">JOIN</span> DEPENDENT D <span class="keyword">ON</span> E.SSN = D.SSN;</span><br></pre></td></tr></table></figure>





<h3 id="例8-6："><a href="#例8-6：" class="headerlink" title="例8-6："></a>例8-6：</h3><p><strong>查询没有家属的员工的姓名</strong></p>
<p>![image-20210111194935540](/Users/fine/Library/Application Support/typora-user-images/image-20210111194935540.png)</p>
<h3 id="例8-7："><a href="#例8-7：" class="headerlink" title="例8-7："></a>例8-7：</h3><p><strong>查询没有家属的员工的姓名(用连接查询方式)</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195033018.png" alt="image-20210111195033018"></p>
<h2 id="带有比较运算符的子查询"><a href="#带有比较运算符的子查询" class="headerlink" title="带有比较运算符的子查询"></a>带有比较运算符的子查询</h2><h3 id="例8-8："><a href="#例8-8：" class="headerlink" title="例8-8："></a>例8-8：</h3><p><strong>查询在Research部门工作的所有员工的姓名和住址</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195110994.png" alt="image-20210111195110994"></p>
<h3 id="使用局部变量"><a href="#使用局部变量" class="headerlink" title="使用局部变量"></a>使用局部变量</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195143756.png" alt="image-20210111195143756"></p>
<h3 id="例8-9："><a href="#例8-9：" class="headerlink" title="例8-9："></a>例8-9：</h3><p><strong>查询所有工资大于或等于全公司平均工资的员工信息</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195212839.png" alt="image-20210111195212839"></p>
<h3 id="使用局部变量简化程序"><a href="#使用局部变量简化程序" class="headerlink" title="使用局部变量简化程序"></a>使用局部变量简化程序</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195233039.png" alt="image-20210111195233039"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> @AVERAGESALARY <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">SET</span> @AVERAGESALARY = (<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(SALARY) <span class="keyword">FROM</span> EMPLOYEE) <span class="keyword">WHERE</span> SALARY &gt;= @AVERAGESALARY</span><br></pre></td></tr></table></figure>





<h3 id="例8-10："><a href="#例8-10：" class="headerlink" title="例8-10："></a>例8-10：</h3><p><strong>查询FNAME以JO开头员工的工作记录</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195302188.png" alt="image-20210111195302188"></p>
<h3 id="例8-11："><a href="#例8-11：" class="headerlink" title="例8-11："></a>例8-11：</h3><p><strong>查询FNAME以JOH开头员工的工作记录</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195336814.png" alt="image-20210111195336814"></p>
<h2 id="带有ANY或ALL谓词的子查询"><a href="#带有ANY或ALL谓词的子查询" class="headerlink" title="带有ANY或ALL谓词的子查询"></a>带有ANY或ALL谓词的子查询</h2><h3 id="例8-12："><a href="#例8-12：" class="headerlink" title="例8-12："></a>例8-12：</h3><p><strong>查询FNAME以JO开头员工的工作记录</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195409670.png" alt="image-20210111195409670"></p>
<ul>
<li>上例查询等价于带有IN谓词的子查询</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195428757.png" alt="image-20210111195428757"></li>
</ul>
<h3 id="ANY与ALL的区别"><a href="#ANY与ALL的区别" class="headerlink" title="ANY与ALL的区别"></a>ANY与ALL的区别</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195444770.png" alt="image-20210111195444770"></p>
<h4 id="例8-13："><a href="#例8-13：" class="headerlink" title="例8-13："></a>例8-13：</h4><p><strong>查询工资大于或等于任意一个女性员工工资的男性员工信息</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195535918.png" alt="image-20210111195535918"></p>
<ul>
<li>上例查询等价于使用汇总函数的子查询</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195600279.png" alt="image-20210111195600279"></li>
</ul>
<h4 id="例8-14："><a href="#例8-14：" class="headerlink" title="例8-14："></a>例8-14：</h4><p><strong>查询工资大于或等于全部女性员工工资的男性员工信息</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195642862.png" alt="image-20210111195642862"></p>
<ul>
<li>上例查询等价于使用汇总函数的子查询</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195704013.png" alt="image-20210111195704013"></li>
</ul>
<h3 id="与汇总函数的等价性"><a href="#与汇总函数的等价性" class="headerlink" title="与汇总函数的等价性"></a>与汇总函数的等价性</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195804138.png" alt="image-20210111195804138"></p>
<h2 id="带有EXISTS谓词的子查询"><a href="#带有EXISTS谓词的子查询" class="headerlink" title="带有EXISTS谓词的子查询"></a>带有EXISTS谓词的子查询</h2><h3 id="“不相关子查询”与“相关子查询”"><a href="#“不相关子查询”与“相关子查询”" class="headerlink" title="“不相关子查询”与“相关子查询”"></a>“不相关子查询”与“相关子查询”</h3><ul>
<li>不相关子查询(non-correlated subquery)<ul>
<li>子查询只执行一次，其结果用于父查询。子查询的查询条件不依赖于父查询</li>
</ul>
</li>
<li>相关子查询(correlated subquery)<ul>
<li>子查询的查询条件依赖于外层父查询的某个属性值</li>
<li>主要是指“带有EXISTS谓词的子查询</li>
</ul>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195930709.png" alt="image-20210111195930709"></p>
<h3 id="例8-15："><a href="#例8-15：" class="headerlink" title="例8-15："></a>例8-15：</h3><p><strong>查询参与了项目的员工姓名</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111195956155.png" alt="image-20210111195956155"></p>
<h4 id="相关子查询的执行过程"><a href="#相关子查询的执行过程" class="headerlink" title="相关子查询的执行过程"></a>相关子查询的执行过程</h4><ul>
<li>首先取外层查询中表的第1个元组，根据它与内层查询相关的属性值处理内层查询，若WHERE子句返回值为真，则取此元组放入结果表；然后再取外层查询中表的下一个元组，重复这一过程，直至外层表全部检查完毕为止。</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200047125.png" alt="image-20210111200047125"></p>
<h1 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h1><ul>
<li><p>SELECT语句查询的结果是元组的集合，所以多个SELECT语句的查询结果可进行集合操作</p>
</li>
<li><p>集合操作符</p>
<ul>
<li><p>并 Union</p>
</li>
<li><p>交 Intersect(SQL SERVER 2005以上支持)</p>
</li>
<li><p>差 Except(SQL SERVER 2005以上支持)</p>
<ul>
<li><p>Oracle：MINUS</p>
</li>
<li><p>DB2：EXCEPT</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="并Union"><a href="#并Union" class="headerlink" title="并Union"></a>并Union</h2><h3 id="例8-16："><a href="#例8-16：" class="headerlink" title="例8-16："></a>例8-16：</h3><p><strong>查询在部门5工作员工或直接管理部门5员工的SSN</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200226714.png" alt="image-20210111200226714"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200243112.png" alt="image-20210111200243112"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200252714.png" alt="image-20210111200252714"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200302506.png" alt="image-20210111200302506"></p>
<h2 id="交-Intersect-SQL-SERVER-2005以上支持"><a href="#交-Intersect-SQL-SERVER-2005以上支持" class="headerlink" title="交 Intersect(SQL SERVER 2005以上支持)"></a>交 Intersect(SQL SERVER 2005以上支持)</h2><h3 id="例8-17："><a href="#例8-17：" class="headerlink" title="例8-17："></a>例8-17：</h3><p><strong>查询“男性员工”与“工资大于30000员工”的交集</strong></p>
<ul>
<li>等价于：查询既是男性同时工资大于30000的员工</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200403560.png" alt="image-20210111200403560"></p>
<h2 id="差-Difference-SQL-SERVER-2005以上支持"><a href="#差-Difference-SQL-SERVER-2005以上支持" class="headerlink" title="差 Difference (SQL SERVER 2005以上支持)"></a>差 Difference (SQL SERVER 2005以上支持)</h2><h3 id="例8-18："><a href="#例8-18：" class="headerlink" title="例8-18："></a>例8-18：</h3><p><strong>查询“男性员工”与“工资大于30000员工”的差集</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200448169.png" alt="image-20210111200448169"></p>
<ul>
<li>等价于：查询工资不大于30000的男性员工</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200519554.png" alt="image-20210111200519554"></p>
<h3 id="例8-19："><a href="#例8-19：" class="headerlink" title="例8-19："></a>例8-19：</h3><p><strong>查询“工资大于30000员工”与“男性员工”的差集</strong></p>
<ul>
<li>等价于：查询工资大于30000的女性员工</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200556740.png" alt="image-20210111200556740"></p>
<h1 id="数据的增加、删除和修改"><a href="#数据的增加、删除和修改" class="headerlink" title="数据的增加、删除和修改"></a>数据的增加、删除和修改</h1><ul>
<li>插入数据<ul>
<li>插入单个元组</li>
<li>插入子查询结果</li>
</ul>
</li>
<li>修改数据<ul>
<li>修改符合一定条件元组的值</li>
<li>修改所有元组的值</li>
<li>带子查询的修改语句</li>
</ul>
</li>
<li>删除数据<ul>
<li>删除符合一定条件元组</li>
<li>删除所有元组</li>
<li>带子查询的删除语句</li>
</ul>
</li>
</ul>
<h2 id="SQL语言的动词"><a href="#SQL语言的动词" class="headerlink" title="SQL语言的动词"></a>SQL语言的动词</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200735693.png" alt="image-20210111200735693"></p>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="插入单个元组"><a href="#插入单个元组" class="headerlink" title="插入单个元组"></a>插入单个元组</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200810358.png" alt="image-20210111200810358"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200826632.png" alt="image-20210111200826632"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPARTMENT <span class="keyword">VALUES</span>(<span class="string">&#x27;IT&#x27;</span>,<span class="number">7</span>,NULL.<span class="string">&#x27;2004-3-2&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200837297.png" alt="image-20210111200837297"></p>
<h4 id="插入子查询结果"><a href="#插入子查询结果" class="headerlink" title="插入子查询结果"></a>插入子查询结果</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200901877.png" alt="image-20210111200901877"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EXAMRECORDAVG(STUDENTNAME, AVERAGESCORE) <span class="keyword">SELECT</span> S.STUDENTNAME, <span class="keyword">AVG</span>(E.SCORE) <span class="keyword">FROM</span> EXAMRECORD E <span class="keyword">INNER</span> <span class="keyword">JOIN</span> STUDENTINFO S <span class="keyword">ON</span> E.STUDENTNO=S.STUDENTNO <span class="keyword">GROUP</span> <span class="keyword">BY</span> S.STUDENTNAME</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200951443.png" alt="image-20210111200951443"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111200959673.png" alt="image-20210111200959673"></p>
<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><h4 id="修改符合一定条件元组的值"><a href="#修改符合一定条件元组的值" class="headerlink" title="修改符合一定条件元组的值"></a>修改符合一定条件元组的值</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111201028765.png" alt="image-20210111201028765"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111201039450.png" alt="image-20210111201039450"></p>
<h4 id="修改所有元组的值"><a href="#修改所有元组的值" class="headerlink" title="修改所有元组的值"></a>修改所有元组的值</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111201108420.png" alt="image-20210111201108420"></p>
<h3 id="带子查询的修改语句"><a href="#带子查询的修改语句" class="headerlink" title="带子查询的修改语句"></a>带子查询的修改语句</h3><h5 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h5><p><strong>将‘Research’部门员工的工资提高10%</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111201125362.png" alt="image-20210111201125362"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111201135051.png" alt="image-20210111201135051"></p>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><h4 id="删除符合一定条件元组"><a href="#删除符合一定条件元组" class="headerlink" title="删除符合一定条件元组"></a>删除符合一定条件元组</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111201241477.png" alt="image-20210111201241477"></p>
<h4 id="删除所有元组"><a href="#删除所有元组" class="headerlink" title="删除所有元组"></a>删除所有元组</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111201300717.png" alt="image-20210111201300717"></p>
<h4 id="带子查询的删除语句"><a href="#带子查询的删除语句" class="headerlink" title="带子查询的删除语句"></a>带子查询的删除语句</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111201319814.png" alt="image-20210111201319814"></p>
]]></content>
      <categories>
        <category>数据库原理及应用</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库第一章——数据库系统概论</title>
    <url>/posts/4efd1fa7/</url>
    <content><![CDATA[<h1 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h1><ul>
<li><p>数据库：</p>
<ul>
<li>存放和提供数据的“库房”</li>
</ul>
</li>
<li><p>数据(Data)：</p>
<ul>
<li>数据库中存储的基本对象，是记录客观事实的符号。除了同学们熟知的“数字”以外，还包括文字、图形、图像、声音、录象等等</li>
</ul>
</li>
<li><p>数据库管理系统(DBMS:Database Management System)：</p>
<ul>
<li>位于用户与操作系统之间的一层数据管理软件</li>
</ul>
</li>
<li><p>数据库系统(Database System)：</p>
<ul>
<li>数据库、</li>
<li>DBMS、</li>
<li>软硬件支持环境、</li>
<li>应用系统、</li>
<li>数据库管理员(DBA:Database Administrator)、</li>
<li>用户</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108195921317.png" alt="image-20210108195921317"></li>
</ul>
</li>
</ul>
<h2 id="简化的数据库系统环境"><a href="#简化的数据库系统环境" class="headerlink" title="简化的数据库系统环境"></a>简化的数据库系统环境</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108200058519.png" alt="image-20210108200058519"></p>
<h2 id="什么是元数据"><a href="#什么是元数据" class="headerlink" title="什么是元数据"></a>什么是元数据</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108200137506.png" alt="image-20210108200137506"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108200206879.png" alt="image-20210108200206879"></p>
<h2 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108200240700.png" alt="image-20210108200240700"></p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108200326202.png" alt="image-20210108200326202"></p>
<h3 id="应用程序展示查询结果"><a href="#应用程序展示查询结果" class="headerlink" title="应用程序展示查询结果"></a>应用程序展示查询结果</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108200355873.png" alt="image-20210108200355873"></p>
<h1 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li><p><strong>数据定义</strong>：</p>
<p>帮助数据库管理员创建、删除、修改数据库里的对象</p>
</li>
<li><p><strong>数据的组织、存储和管理</strong></p>
</li>
<li><p><strong>数据操纵</strong>：实现对数据库数据的查询、增加、删除和修改</p>
</li>
<li><p><strong>数据库的事务管理和运行控制</strong>：</p>
<ul>
<li>保证数据的安全性、完整性、</li>
<li>多用户对数据的并发使用及发生故障后的系统恢复（选修课程：大型数据库技术）</li>
</ul>
</li>
<li><p><strong>数据库维护</strong></p>
</li>
<li><p><strong>向应用软件(数据消-费者)提供数据</strong></p>
</li>
</ul>
<h2 id="主流关系型数据库管理系统"><a href="#主流关系型数据库管理系统" class="headerlink" title="主流关系型数据库管理系统"></a>主流<strong>关系型</strong>数据库管理系统</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108200818142.png" alt="image-20210108200818142"></p>
<h1 id="数据库管理技术的发展阶段"><a href="#数据库管理技术的发展阶段" class="headerlink" title="数据库管理技术的发展阶段"></a>数据库管理技术的发展阶段</h1><h2 id="人工管理阶段"><a href="#人工管理阶段" class="headerlink" title="人工管理阶段"></a>人工管理阶段</h2><ul>
<li><p>数据不保存</p>
</li>
<li><p>应用程序管理数据</p>
</li>
<li><p>数据不共享，冗余度极大</p>
</li>
<li><p>数据不具有独立性</p>
</li>
</ul>
<h2 id="文件系统阶段"><a href="#文件系统阶段" class="headerlink" title="文件系统阶段"></a>文件系统阶段</h2><ul>
<li>数据可以长期保存</li>
<li>由专门的软件—文件系统管理数据文件</li>
<li>数据共享性差，冗余度大</li>
<li>数据独立性差</li>
</ul>
<h2 id="数据库系统阶段"><a href="#数据库系统阶段" class="headerlink" title="数据库系统阶段"></a>数据库系统阶段</h2><ul>
<li>数据结构化</li>
<li>数据共享性高、冗余度低、易扩充</li>
<li>数据独立性高</li>
<li>数据由DBMS统一管理和控制</li>
</ul>
<h1 id="数据库用户"><a href="#数据库用户" class="headerlink" title="数据库用户"></a>数据库用户</h1><h2 id="幕前角色"><a href="#幕前角色" class="headerlink" title="幕前角色"></a>幕前角色</h2><ul>
<li><p>数据库管理员：</p>
<p>负责对数据库用户授权, 监控和协调数据库使用等</p>
</li>
<li><p>数据库设计者：</p>
<p>识别要存储在数据库中的数据，并选择适当的结构来表示和存储这些数据</p>
</li>
<li><p>最终用户: 那些为了查询、更新和报表而访问数据库的用户</p>
<ul>
<li>偶尔访问的用户：使用复杂的数据库查询语言</li>
<li>简单参与的用户：使用编写好的数据库应用软件</li>
<li>资深的最终用户</li>
<li>独立用户：个人数据库</li>
</ul>
</li>
<li><p>系统分析员</p>
</li>
<li><p>软件工程师</p>
</li>
</ul>
<h2 id="幕后工作者"><a href="#幕后工作者" class="headerlink" title="幕后工作者"></a>幕后工作者</h2><ul>
<li>DBMS系统设计者</li>
<li>数据库工具开发者</li>
<li>操作员和维护人员</li>
</ul>
<h1 id="数据库的一般应用"><a href="#数据库的一般应用" class="headerlink" title="数据库的一般应用"></a>数据库的一般应用</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108201642076.png" alt="image-20210108201642076"></p>
<h1 id="数据库的高级应用"><a href="#数据库的高级应用" class="headerlink" title="数据库的高级应用"></a>数据库的高级应用</h1><h2 id="数据仓库（Data-Warehousing）"><a href="#数据仓库（Data-Warehousing）" class="headerlink" title="数据仓库（Data Warehousing）"></a>数据仓库（Data Warehousing）</h2><ul>
<li>什么是数据仓库<ul>
<li>数据仓库是一种数据的长期存储(历史数据)，这些数据来自多数据源，是经过组织的，以便支持管理决策。</li>
</ul>
</li>
<li>数据挖掘的基础</li>
<li>BI (Business Intelligence：商务智能)</li>
</ul>
<h2 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h2><ul>
<li><p>从海量的数据中获得有价值的信息</p>
<ul>
<li><p>主要是用于发现规律(知识)</p>
</li>
<li><p>银行利用ATM交易数据可以发现：哪个ATM机取款最繁忙，于是银行领导就此挖掘出来的信息可以做出在哪些地段增设ATM机的决定，这就叫“决策支持(Decision Support)”。</p>
</li>
<li><p>超市利用每天的营业数据可以发现：哪些商品销售量比较大，于是超市采购员可以利用这个信息(结合库存数据)决定下次的采购商品清单</p>
</li>
</ul>
</li>
</ul>
<h2 id="决策支持系统（DSS：Decision-Support-System）"><a href="#决策支持系统（DSS：Decision-Support-System）" class="headerlink" title="决策支持系统（DSS：Decision Support System）"></a>决策支持系统（DSS：Decision Support System）</h2><ul>
<li><p>利用“统计分析”、“数据挖掘”等手段得出一些推论，供领导决策参考</p>
</li>
<li><p>以前的决策过程</p>
<ul>
<li>靠领导的经验、个人智慧</li>
</ul>
</li>
<li><p>现在的决策过程</p>
<ul>
<li>靠数据库中的数据提供决策依据</li>
</ul>
</li>
</ul>
<h2 id="数据、信息（通过SQL查询）、知识（通过数据挖掘）三者之间的关系"><a href="#数据、信息（通过SQL查询）、知识（通过数据挖掘）三者之间的关系" class="headerlink" title="数据、信息（通过SQL查询）、知识（通过数据挖掘）三者之间的关系"></a>数据、信息（通过SQL查询）、知识（通过数据挖掘）三者之间的关系</h2><ul>
<li><p>数据：</p>
<ul>
<li>记录客观事实的符号</li>
</ul>
</li>
<li><p>信息：</p>
<ul>
<li>是经过加工后的数据，它会对接受者的行为和决策产生影响，具有现实的或潜在的价值</li>
</ul>
</li>
<li><p>信息与数据的关系：</p>
<ul>
<li>信息=数据+数据处理</li>
</ul>
</li>
</ul>
<h1 id="补充：『互联网-』战略带来的『大数据』的挑战"><a href="#补充：『互联网-』战略带来的『大数据』的挑战" class="headerlink" title="补充：『互联网+』战略带来的『大数据』的挑战"></a>补充：『互联网+』战略带来的『大数据』的挑战</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108202337590.png" alt="image-20210108202337590"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108202350569.png" alt="image-20210108202350569"></p>
<h2 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h2><ul>
<li><p>大数据：</p>
<ul>
<li>是指无法在可承受的时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，至少要达到PB级别以上(1PB=1024TB，1TB=1024GB)</li>
</ul>
</li>
</ul>
<ul>
<li><p>云计算：</p>
<ul>
<li>通过互联网来提供动态易扩展且经常是虚拟化的资源</li>
</ul>
</li>
</ul>
<ul>
<li><p>物联网：</p>
<ul>
<li>通过射频识别（RFID）、红外感应器、全球定位系统、激光扫描器等信息传感设备，按约定的协议，把任何物品与互联网相连接，进行信息交换和通信，以实现智能化识别、定位、跟踪、监控和管理的一种网络概念</li>
</ul>
</li>
</ul>
<blockquote>
<p>物联网提供了海量数据源<br>大数据无法用单台的计算机进行处理，必须采用分布式架构。它的特色在于对海量数据进行分布式数据挖掘与处理，它必须依托云计算的分布式处理、分布式数据库和云存储、虚拟化技术</p>
</blockquote>
<h1 id="数据模型的基本概念"><a href="#数据模型的基本概念" class="headerlink" title="数据模型的基本概念"></a>数据模型的基本概念</h1><ul>
<li>数据模型(Data Model)：<ul>
<li>现实世界数据特征的抽象，用来定义数据如何组织，数据之间的关系怎样</li>
</ul>
</li>
<li>数据模型的层次：<ul>
<li>概念模型(Conceptual) ：<ul>
<li>按用户的观点来对数据和信息建模</li>
</ul>
</li>
<li>逻辑/实现模型 (Logical/Implementation)<ul>
<li>层次模型</li>
<li>网状模型</li>
<li>关系模型<br>…</li>
</ul>
</li>
<li>物理模型 (Physical)：<ul>
<li>数据在具体DBMS产品(IBM、Microsoft、Oracle)中的物理存储方式</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="数据建模概述"><a href="#数据建模概述" class="headerlink" title="数据建模概述"></a>数据建模概述</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108203305250.png" alt="image-20210108203305250"></p>
<h1 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h1><ul>
<li><p>数据结构：</p>
<blockquote>
<p>对系统静态特征的描述</p>
</blockquote>
</li>
<li><p>数据操作：</p>
<blockquote>
<p>对系统动态特征的描述</p>
</blockquote>
<ul>
<li>检索(查询)</li>
<li>更新(插入、删除、修改：增删改)</li>
</ul>
</li>
<li><p>数据的约束条件：</p>
<blockquote>
<p>完整性约束规则</p>
</blockquote>
</li>
</ul>
<h1 id="概念数据模型"><a href="#概念数据模型" class="headerlink" title="概念数据模型"></a>概念数据模型</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108203455619.png" alt="image-20210108203455619"></p>
<h1 id="逻辑（实现）数据模型"><a href="#逻辑（实现）数据模型" class="headerlink" title="逻辑（实现）数据模型"></a>逻辑（实现）数据模型</h1><ul>
<li><p>层次模型</p>
</li>
<li><p>网状模型</p>
</li>
<li><p><strong>关系模型</strong>(Relational Data Model)</p>
<ul>
<li>以严格的数学理论为基础：<ul>
<li>谓词逻辑(predicate logic)、</li>
<li>集合论(set theory)</li>
</ul>
</li>
<li>目前主流的数据库系统都是基于“关系模型”的</li>
</ul>
</li>
<li><p>面向对象模型</p>
</li>
<li><p>对象关系模型</p>
</li>
</ul>
<h1 id="物理数据模型"><a href="#物理数据模型" class="headerlink" title="物理数据模型"></a>物理数据模型</h1><blockquote>
<p>描述数据库在计算机中的存储细节</p>
</blockquote>
<h1 id="补充：NoSQL和NewSQL数据库"><a href="#补充：NoSQL和NewSQL数据库" class="headerlink" title="补充：NoSQL和NewSQL数据库"></a>补充：NoSQL和NewSQL数据库</h1><h2 id="NoSQL数据库"><a href="#NoSQL数据库" class="headerlink" title="NoSQL数据库"></a>NoSQL数据库</h2><ul>
<li><p>“大数据”带来的挑战导致传统的关系型数据库难以存储、单机数据分析统计工具无法处理，需要将这些数据存放在拥有数千万台机器的大规模并行系统上。</p>
</li>
<li><p>NoSQL(Not Only SQL)是对关系型SQL数据系统的补充，主要优势：</p>
<ul>
<li><p>高吞吐量</p>
</li>
<li><p>高水平扩展能力和低端硬件集群</p>
</li>
</ul>
</li>
</ul>
<h2 id="NewSQL数据库"><a href="#NewSQL数据库" class="headerlink" title="NewSQL数据库"></a>NewSQL数据库</h2><ul>
<li><p>可扩展的、高性能的SQL数据库</p>
<ul>
<li><p>拥有关系型数据库产品和服务，并将关系模型的好处带到分布式架构上</p>
</li>
<li><p>提高关系数据库的性能，使之达到不用考虑水平扩展问题的程度</p>
</li>
</ul>
</li>
</ul>
<h2 id="数据库系统的分类"><a href="#数据库系统的分类" class="headerlink" title="数据库系统的分类"></a>数据库系统的分类</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210108204401263.png" alt="image-20210108204401263"></p>
]]></content>
      <categories>
        <category>数据库原理及应用</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库第四章——关系数据库标准语言SQL（1）</title>
    <url>/posts/a605aa1a/</url>
    <content><![CDATA[<h1 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109154021659.png" alt="image-20210109154021659"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109154033612.png" alt="image-20210109154033612"></p>
<h3 id="SQL语言的提出和发展"><a href="#SQL语言的提出和发展" class="headerlink" title="SQL语言的提出和发展"></a>SQL语言的提出和发展</h3><ul>
<li><p>1974年，由Boyce和Chamber提出</p>
</li>
<li><p>1975-1979年，在System R上首次实现，由IBM的San Jose研究室研制，称为SEQUEL(Structured English QUEry Language)</p>
</li>
<li><p>1986年推出了SQL标准：SQL-86，“数据库语言SQL: Structured Query Language”</p>
</li>
<li><p>1989年ANSI / ISO推出了SQL标准: SQL-89, 数据库语言SQL的标准集合</p>
</li>
<li><p>1992年进一步推出了SQL标准：SQL-92，也称为SQL2</p>
<ul>
<li>是SQL-89的超集</li>
<li>增加了许多新特性，如新数据类型，更丰富数据操作，更强完整性支持等</li>
<li>原SQL-89被称为entry-SQL, 扩展的被称为Int ermediate级和Full级</li>
</ul>
</li>
<li><p>1999年进一步推出了SQL标准： SQL-99，也称为SQL3</p>
<ul>
<li>对面向对象的一些特征予以支持，支持抽象数据类型，支持行对象和列对象等</li>
<li>有些特征，现有数据库厂商尚不能做到完全支持</li>
</ul>
</li>
</ul>
<h3 id="标准SQL语言的“方言”"><a href="#标准SQL语言的“方言”" class="headerlink" title="标准SQL语言的“方言”"></a>标准SQL语言的“方言”</h3><ul>
<li>各数据库厂商的产品对SQL语言的支持大部分是相似的(至少要实现SQL-92的entry-SQL)，但它们之间也存在着一定的差异<ul>
<li>Oracle: PL/SQL language</li>
<li>SQL Server: Transact-SQL language(本课程的教学演示语言)</li>
</ul>
</li>
<li>但我们在介绍SQL时主要介绍标准的SQL语言</li>
</ul>
<h3 id="SQL语言的功能组成"><a href="#SQL语言的功能组成" class="headerlink" title="SQL语言的功能组成"></a>SQL语言的功能组成</h3><h4 id="Data-Manipulation-Language-DML-重点"><a href="#Data-Manipulation-Language-DML-重点" class="headerlink" title="Data Manipulation Language (DML)(重点)"></a>Data Manipulation Language (DML)(重点)</h4><ul>
<li><p>数据查询(Data Query Language (DQL))(核心)</p>
<blockquote>
<p>数据查询功能用于实现对数据库中数据的查询、检索 </p>
</blockquote>
</li>
<li><p>数据操纵(Data Manipulation)</p>
<blockquote>
<p>数据操纵功能用于实现对数据库数据的增加、删除和修改</p>
</blockquote>
</li>
</ul>
<h4 id="Data-Definition-Language-DDL"><a href="#Data-Definition-Language-DDL" class="headerlink" title="Data Definition Language (DDL)"></a>Data Definition Language (DDL)</h4><ul>
<li><p>数据定义(Data Definition)</p>
<blockquote>
<p>数据定义功能用于定义、删除和修改数据库中的对象 </p>
</blockquote>
</li>
</ul>
<h4 id="Data-Control-Language-DCL"><a href="#Data-Control-Language-DCL" class="headerlink" title="Data Control Language (DCL)"></a>Data Control Language (DCL)</h4><ul>
<li><p>数据控制(Data Control)</p>
<blockquote>
<p>数据控制功能用于控制用户对数据库的操作权限 </p>
</blockquote>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109154659361.png" alt="image-20210109154659361"></p>
<h3 id="SQL语言的特点"><a href="#SQL语言的特点" class="headerlink" title="SQL语言的特点"></a>SQL语言的特点</h3><ul>
<li><p>综合统一</p>
</li>
<li><p>高度非过程化</p>
</li>
<li><p>面向集合的操作方式</p>
</li>
<li><p>语言简捷，易学易用</p>
</li>
<li><p>以同一种语法结构提供两种使用方式</p>
<ul>
<li>独立</li>
<li>嵌入</li>
</ul>
</li>
</ul>
<h4 id="独立使用方式-又称“交互式”"><a href="#独立使用方式-又称“交互式”" class="headerlink" title="独立使用方式(又称“交互式”)"></a>独立使用方式(又称“交互式”)</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109154924831.png" alt="image-20210109154924831"></p>
<h4 id="嵌入使用方式"><a href="#嵌入使用方式" class="headerlink" title="嵌入使用方式"></a>嵌入使用方式</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109154947922.png" alt="image-20210109154947922"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109155005186.png" alt="image-20210109155005186"></p>
<h1 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109155121542.png" alt="image-20210109155121542"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109155138661.png" alt="image-20210109155138661"></p>
<h2 id="没有WHERE-子句和使用-的简单查询"><a href="#没有WHERE-子句和使用-的简单查询" class="headerlink" title="没有WHERE 子句和使用*的简单查询"></a>没有WHERE 子句和使用*的简单查询</h2><blockquote>
<p>不带元组筛选条件的单表查询</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109155215882.png" alt="image-20210109155215882"></p>
<p></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Employee</span><br></pre></td></tr></table></figure>



<h3 id="关于“-”"><a href="#关于“-”" class="headerlink" title="关于“*”"></a>关于“*”</h3><ul>
<li>当使用 * 时，结果集中的列的顺序与 CREATE TABLE、ALTER TABLE 或 CREATE VIEW(视图)语句中所指定的顺序相同</li>
<li>在应用程序中使用 SELECT时，最好显式地指定需要查询的列而不是指定一个星号<br>Why?</li>
</ul>
<p><strong>如果表名或列名是SQL关键字或者中间有空格，用[]</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [Oeder Detail]</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109155341974.png" alt="image-20210109155341974"></p>
<p><strong>“显式地指定需要查询的列”的另一个好处：可以控制结果集中列显示的顺序</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNME,LNAME,SEX,SNN <span class="keyword">FROM</span> Employee</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109155608438.png" alt="image-20210109155608438"></p>
<h2 id="属性重命名"><a href="#属性重命名" class="headerlink" title="属性重命名"></a>属性重命名</h2><blockquote>
<p>重命名查询结果关系列名（但数据库存储文件的列名未改变）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNAME <span class="keyword">AS</span> 名,LNAME <span class="keyword">AS</span> 姓 <span class="keyword">FROM</span> Employee</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109155901741.png" alt="image-20210109155901741"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNAME 名,LNAME 姓 <span class="keyword">FROM</span> EMPLOYEE</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109155950784.png" alt="image-20210109155950784"></p>
<ul>
<li>AS可省略</li>
</ul>
<h2 id="选择元组（WHERE）"><a href="#选择元组（WHERE）" class="headerlink" title="选择元组（WHERE）"></a>选择元组（WHERE）</h2><blockquote>
<p>筛选元组</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNAME,LNEME,SNN <span class="keyword">FROM</span> EMPLOYEE <span class="keyword">WHERE</span> SEX = <span class="string">&#x27;F&#x27;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109160103216.png" alt="image-20210109160103216"></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>在SQL程序中添加注释<ul>
<li><strong>–</strong> 单行注释(类似于C++语言的 // ) </li>
<li>C-style <strong>/* comment block */</strong> (多行注释)</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNAME,LNAME,SEX,SNSN,BDATA,SALARY <span class="keyword">FROM</span> EMPLOYEE <span class="keyword">WHERE</span> (<span class="keyword">NOT</span> SEX = <span class="string">&#x27;F)   WRONG</span></span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109160308965.png" alt="image-20210109160308965"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNAME,LNAME,SEX,SNSN,BDATA,SALARY <span class="keyword">FROM</span> EMPLOYEE <span class="keyword">WHERE</span> SEX&lt;&gt;<span class="string">&#x27;F&#x27;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109160650239.png" alt="image-20210109160650239"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> BDATA,ADDRESS <span class="keyword">FROM</span> EMPLOYEE <span class="keyword">WHERE</span> FNAME = <span class="string">&#x27;JOHN&#x27;</span> <span class="keyword">AND</span> MINIT = <span class="string">&#x27;B&#x27;</span> <span class="keyword">AND</span> LNAME=<span class="string">&#x27;SMITH&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109160757125.png" alt="image-20210109160757125"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FNAME,LNAME,SEX,SSN,SALARY <span class="keyword">FROM</span> EMPOYEE <span class="keyword">WHERE</span> (SALARY&gt;<span class="number">3000</span> <span class="keyword">AND</span> SEX=<span class="string">&#x27;M&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109160815086.png" alt="image-20210109160815086"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMPLOYEE <span class="keyword">WHERE</span> (BDATA&gt;=<span class="string">&#x27;1960-1-1&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109160833716.png" alt="image-20210109160833716"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMPLOYEE <span class="keyword">WHERE</span> (SALARY&gt;=<span class="number">30000</span> <span class="keyword">AND</span> SALARY&lt;=<span class="number">55000</span>)</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109160854559.png" alt="image-20210109160854559"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> E <span class="keyword">WHERE</span> <span class="keyword">NOT</span> (S&gt;=<span class="number">30000</span> <span class="keyword">AND</span> S&lt;=<span class="number">55000</span>)</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109160905916.png" alt="image-20210109160905916"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> E <span class="keyword">WHERE</span> (S&lt;<span class="number">30000</span> <span class="keyword">OR</span> S&gt;<span class="number">55000</span>)</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109160930083.png" alt="image-20210109160930083"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> E <span class="keyword">WHERE</span> (S <span class="keyword">BETWEEN</span> <span class="number">30000</span> <span class="keyword">AND</span> <span class="number">55000</span>)</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109161022843.png" alt="image-20210109161022843"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> E <span class="keyword">WHERE</span> <span class="keyword">NOT</span> (S <span class="keyword">BETWEEN</span> <span class="number">30000</span> <span class="keyword">AND</span> <span class="number">55000</span>)</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109161034618.png" alt="image-20210109161034618"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> E <span class="keyword">WHERE</span> S <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">30000</span> <span class="keyword">AND</span> <span class="number">55000</span></span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109161046337.png" alt="image-20210109161046337"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109161202119.png" alt="image-20210109161202119"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> E <span class="keyword">WHERE</span> P <span class="keyword">BETWEEN</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;F&#x27;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109161323921.png" alt="image-20210109161323921"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> E <span class="keyword">WHERE</span> (C=<span class="string">&#x27;H&#x27;</span> <span class="keyword">OR</span> C=<span class="string">&#x27;H&#x27;</span> <span class="keyword">OR</span> C=<span class="string">&#x27;S&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109161355942.png" alt="image-20210109161355942"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> E <span class="keyword">WHERE</span> C <span class="keyword">IN</span> (<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;S&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109161428550.png" alt="image-20210109161428550"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> E <span class="keyword">WHERE</span> <span class="keyword">NOT</span> (C <span class="keyword">IN</span> (<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;S&#x27;</span>))</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109161440997.png" alt="image-20210109161440997"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> E <span class="keyword">WHERE</span> C <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;S&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109161454178.png" alt="image-20210109161454178"></p>
<h2 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109160725739.png" alt="image-20210109160725739"></p>
<h2 id="SQL中作为集合的表"><a href="#SQL中作为集合的表" class="headerlink" title="SQL中作为集合的表"></a>SQL中作为集合的表</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109161531535.png" alt="image-20210109161531535"></p>
<h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ul>
<li>SQL 允许一个表有相同的多行数据。因此，SQL表不是一组元组的集合, 而是一个多集</li>
<li>然而, 一些SQL表被限制为一组元组的集合<ul>
<li>通过在基本表上申明主键约束</li>
<li>查询时使用distinct关键字使得查询结果表消除重复</li>
</ul>
</li>
</ul>
<p><strong>例6-20：查询不重复的员工性别和工资组合</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">distinct</span> sex,salary <span class="keyword">from</span> Employee</span><br></pre></td></tr></table></figure>



<h3 id="为什么-SQL不自动消除重复元组"><a href="#为什么-SQL不自动消除重复元组" class="headerlink" title="为什么 SQL不自动消除重复元组?"></a>为什么 SQL不自动消除重复元组?</h3><ul>
<li>消除重复是代价很高的操作</li>
<li>用户可能希望在查询结果中看到重复元组</li>
</ul>
<h2 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h2><h3 id="ALL-关键字-默认值"><a href="#ALL-关键字-默认值" class="headerlink" title="ALL 关键字 (默认值)"></a>ALL 关键字 (默认值)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ALL</span> SEX,SALARY <span class="keyword">FROM</span> E</span><br></pre></td></tr></table></figure>



<h3 id="使用-LIKE-比较运算符进行字符串匹配"><a href="#使用-LIKE-比较运算符进行字符串匹配" class="headerlink" title="使用 LIKE 比较运算符进行字符串匹配"></a>使用 LIKE 比较运算符进行字符串匹配</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109164607103.png" alt="image-20210109164607103"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109164713470.png" alt="image-20210109164713470"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109164851385.png" alt="image-20210109164851385"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109164919386.png" alt="image-20210109164919386"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109164947732.png" alt="image-20210109164947732"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109165000161.png" alt="image-20210109165000161"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109165105958.png" alt="image-20210109165105958"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109165118073.png" alt="image-20210109165118073"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109165132162.png" alt="image-20210109165132162"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109165143407.png" alt="image-20210109165143407"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109165233641.png" alt="image-20210109165233641"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109165244004.png" alt="image-20210109165244004"></p>
<h2 id="包含-NULL和三值逻辑的比较"><a href="#包含-NULL和三值逻辑的比较" class="headerlink" title="包含 NULL和三值逻辑的比较"></a>包含 NULL和三值逻辑的比较</h2><ul>
<li><p>逻辑表达式的运算结果为: TRUE, FALSE, <strong>Unknown</strong></p>
</li>
<li><p>Unknown：当NULL出现在比较运算中，结果将是“<strong>Unknown</strong>”</p>
</li>
<li><p>在选择运算时，只有选择条件结果为 <strong>TRUE</strong>的元组被选出</p>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109165917244.png" alt="image-20210109165917244"></p>
<ul>
<li>NOT TURE IS FALSE AND NOT INCLUDE UNKNOWN</li>
</ul>
<h3 id="包含NULL的比较"><a href="#包含NULL的比较" class="headerlink" title="包含NULL的比较"></a>包含NULL的比较</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170207855.png" alt="image-20210109170207855"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170230644.png" alt="image-20210109170230644"></p>
<h3 id="求“补集”的正确SQL表达式"><a href="#求“补集”的正确SQL表达式" class="headerlink" title="求“补集”的正确SQL表达式"></a>求“补集”的正确SQL表达式</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170304432.png" alt="image-20210109170304432"></p>
<ul>
<li>在关键字段尽量加上非空约束，比如“姓名”、“性别”、<br>“院系编号”等</li>
</ul>
<h2 id="对查询结果排序"><a href="#对查询结果排序" class="headerlink" title="对查询结果排序"></a>对查询结果排序</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170410621.png" alt="image-20210109170410621"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170425397.png" alt="image-20210109170425397"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170440753.png" alt="image-20210109170440753"></p>
<h2 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170515394.png" alt="image-20210109170515394"></p>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170710661.png" alt="image-20210109170710661"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170723725.png" alt="image-20210109170723725"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170738153.png" alt="image-20210109170738153"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170747477.png" alt="image-20210109170747477"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170759153.png" alt="image-20210109170759153"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170824882.png" alt="image-20210109170824882"></p>
<h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170903032.png" alt="image-20210109170903032"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170923144.png" alt="image-20210109170923144"></p>
<h3 id="MAX、MIN"><a href="#MAX、MIN" class="headerlink" title="MAX、MIN"></a>MAX、MIN</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170931394.png" alt="image-20210109170931394"></p>
<h3 id="AVG"><a href="#AVG" class="headerlink" title="AVG"></a>AVG</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170950824.png" alt="image-20210109170950824"></p>
<ul>
<li>AVG运算其实是由SUM和COUNT运算导出的</li>
</ul>
<h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109171035722.png" alt="image-20210109171035722"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109171057069.png" alt="image-20210109171057069"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109171106084.png" alt="image-20210109171106084"></p>
<ul>
<li>统计每一分组的行数最好用COUNT(*)，不用COUNT(某一属性)，为什么呢？<ul>
<li>某一属性可能会有空值，而元组不会</li>
</ul>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109171145095.png" alt="image-20210109171145095"></p>
<h2 id="WHERE与HAVING的区别"><a href="#WHERE与HAVING的区别" class="headerlink" title="WHERE与HAVING的区别"></a>WHERE与HAVING的区别</h2><ul>
<li>WHERE 对原始数据进行筛选（分组前） </li>
<li>HAVING 对聚合后的数据进行筛选（分组后） </li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109171233912.png" alt="image-20210109171233912"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109171244451.png" alt="image-20210109171244451"></p>
<h2 id="补充-注入式攻击"><a href="#补充-注入式攻击" class="headerlink" title="补充: 注入式攻击"></a>补充: 注入式攻击</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109170553897.png" alt="image-20210109170553897"></p>
]]></content>
      <categories>
        <category>数据库原理及应用</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>算法__入门模拟</title>
    <url>/posts/514df455/</url>
    <content><![CDATA[<h1 id="入门模拟"><a href="#入门模拟" class="headerlink" title="入门模拟"></a>入门模拟</h1><h2 id="简单模拟"><a href="#简单模拟" class="headerlink" title="简单模拟"></a>简单模拟</h2><h3 id="1016-部分A-B（枚举每一位）"><a href="#1016-部分A-B（枚举每一位）" class="headerlink" title="1016 部分A+B（枚举每一位）"></a>1016 部分A+B（枚举每一位）</h3><blockquote>
<p>正整数 <em>A</em> 的“<em>D**A</em>（为 1 位整数）部分”定义为由 <em>A</em> 中所有 <em>D**A</em> 组成的新整数 <em>P**A</em>。例如：给定 <em>A</em>=3862767，<em>D**A</em>=6，则 <em>A</em> 的“6 部分”<em>P**A</em> 是 66，因为 <em>A</em> 中有 2 个 6。</p>
<p>现给定 <em>A</em>、<em>D**A</em>、<em>B</em>、<em>D**B</em>，请编写程序计算 <em>P**A</em>+<em>P**B</em>。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> da, db;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%d%lld%d&quot;</span>, &amp;a, &amp;da, &amp;b, &amp;db);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> pa = <span class="number">0</span>, pb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(a) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a%<span class="number">10</span> == da) pa = pa*<span class="number">10</span> + da;</span><br><span class="line">        a = a/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b%<span class="number">10</span> == db) pb = pb*<span class="number">10</span> + db;</span><br><span class="line">        b = b/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, pa+pb);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1026-程序运行时间（四舍五入，秒时间处理）"><a href="#1026-程序运行时间（四舍五入，秒时间处理）" class="headerlink" title="1026 程序运行时间（四舍五入，秒时间处理）"></a>1026 程序运行时间（四舍五入，秒时间处理）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c1, c2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;c1, &amp;c2);</span><br><span class="line">    <span class="keyword">int</span> ans = c2 - c1;</span><br><span class="line">    <span class="keyword">if</span>(ans % <span class="number">100</span> &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">        ans = ans / <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ans = ans / <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d\n&quot;</span>, ans / <span class="number">3600</span>, ans % <span class="number">3600</span> / <span class="number">60</span>, ans % <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>1008 <strong>数组元素循环右移问题</strong>（跳过限制，直接结果）</p>
<blockquote>
<p>一个数组<em>A</em>中存有<em>N</em>（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移<em>M</em>（≥0）个位置，即将<em>A</em>中的数据由（<em>A</em>0<em>A</em>1⋯<em>A**N</em>−1）变换为（<em>A**N</em>−<em>M</em>⋯<em>A**N</em>−1<em>A</em>0<em>A</em>1⋯<em>A**N</em>−<em>M</em>−1）（最后<em>M</em>个数循环移至最前面的<em>M</em>个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>每个输入包含一个测试用例，第1行输入<em>N</em>（1≤<em>N</em>≤100）和<em>M</em>（≥0）；第2行输入<em>N</em>个整数，之间用空格分隔。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出循环右移<em>M</em>位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 2</span><br><span class="line">1 2 3 4 5 6</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 6 1 2 3 4</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//并没有对原有数组进行修改</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> n, m;</span><br><span class="line">     <span class="keyword">int</span> a[<span class="number">110</span>];</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">     &#125;</span><br><span class="line">     m = m%n;</span><br><span class="line">     <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = n-m; i &lt; n; i++) &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line">         <span class="keyword">if</span>(cnt &lt; n<span class="number">-1</span>) &#123;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">             cnt++;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n-m; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line">         <span class="keyword">if</span>(cnt &lt; n<span class="number">-1</span>) &#123;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">             cnt++;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>





<h3 id="1018-锤子剪刀布（元素转换为数值简化操作）"><a href="#1018-锤子剪刀布（元素转换为数值简化操作）" class="headerlink" title="1018 锤子剪刀布（元素转换为数值简化操作）"></a>1018 锤子剪刀布（元素转换为数值简化操作）</h3><blockquote>
<p>大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示：</p>
<p><img src="https://images.ptausercontent.com/724da598-b37f-4f1f-99b4-71459654ce3a.jpg" alt="FigCJB.jpg"></p>
<p>现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</p>
<h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第 1 行给出正整数 <em>N</em>（≤105），即双方交锋的次数。随后 <em>N</em> 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。<code>C</code> 代表“锤子”、<code>J</code> 代表“剪刀”、<code>B</code> 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。</p>
<h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">C J</span><br><span class="line">J B</span><br><span class="line">C B</span><br><span class="line">B B</span><br><span class="line">B C</span><br><span class="line">C C</span><br><span class="line">C B</span><br><span class="line">J B</span><br><span class="line">B C</span><br><span class="line">J J</span><br></pre></td></tr></table></figure>

<h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 3 2</span><br><span class="line">2 3 5</span><br><span class="line">B B</span><br></pre></td></tr></table></figure>


</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span> a)</span> </span>&#123; <span class="comment">//循环相克，字典增序</span></span><br><span class="line">    <span class="keyword">if</span>(a == <span class="string">&#x27;B&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="string">&#x27;C&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="string">&#x27;J&#x27;</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> mp[<span class="number">3</span>] = &#123;<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;J&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> aa, bb;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;,  b[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> ha[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;,  hb[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> k1, k2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c %c&quot;</span>, &amp;aa, &amp;bb);</span><br><span class="line">        k1 = change(aa);</span><br><span class="line">        k2 = change(bb);</span><br><span class="line">        <span class="keyword">if</span>((k1 + <span class="number">1</span>) % <span class="number">3</span> == k2) &#123;</span><br><span class="line">            a[<span class="number">0</span>]++;</span><br><span class="line">            b[<span class="number">2</span>]++;</span><br><span class="line">            ha[k1]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(k1 == k2) &#123;</span><br><span class="line">            a[<span class="number">1</span>]++;</span><br><span class="line">            b[<span class="number">1</span>]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a[<span class="number">2</span>]++;</span><br><span class="line">            b[<span class="number">0</span>]++;</span><br><span class="line">            hb[k2]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, b[<span class="number">0</span>], b[<span class="number">1</span>], b[<span class="number">2</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> m1 = <span class="number">0</span>, m2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ha[i] &gt; ha[m1]) m1 = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(hb[i] &gt; hb[m2]) m2 = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c %c\n&quot;</span>, mp[m1], mp[m2]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1010-一元多项式求导（while…EOF）"><a href="#1010-一元多项式求导（while…EOF）" class="headerlink" title="1010 一元多项式求导（while…EOF）"></a>1010 一元多项式求导（while…EOF）</h3><blockquote>
<p>设计函数求一元多项式的导数。（注：<em>x**n</em>（<em>n</em>为整数）的一阶导数为<em>n<strong>x</strong>n</em>−1。）</p>
<h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p>
<h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 <code>0 0</code>。</p>
<h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 4 -5 2 6 1 -2 0</span><br></pre></td></tr></table></figure>

<h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12 3 -10 1 6 0</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, e, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1010</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;k, &amp;e) != EOF) &#123;</span><br><span class="line">        a[e] = k;</span><br><span class="line">    &#125;</span><br><span class="line">  	a[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//对0次项求导直接判断为0</span></span><br><span class="line">		<span class="comment">//从低位求导，只用开一个数组，操作原有数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        a[i<span class="number">-1</span>] = i * a[i];</span><br><span class="line">        a[i] = <span class="number">0</span>;<span class="comment">//必须清空系数，不然数据不会覆盖</span></span><br><span class="line">        <span class="keyword">if</span>(a[i<span class="number">-1</span>] != <span class="number">0</span>) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;0 0&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1000</span>; i &gt;= <span class="number">0</span>; i--) &#123;<span class="comment">//高位输出</span></span><br><span class="line">            <span class="keyword">if</span>(a[i] != <span class="number">0</span>) &#123;<span class="comment">//前面呼应</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, a[i], i);</span><br><span class="line">                cnt--;</span><br><span class="line">                <span class="keyword">if</span>(cnt != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><h3 id="1010-人口普查（结构体的运用）"><a href="#1010-人口普查（结构体的运用）" class="headerlink" title="1010 人口普查（结构体的运用）"></a>1010 人口普查（结构体的运用）</h3><blockquote>
<p> 某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。</p>
<p>这里确保每个输入的日期都是合法的，但不一定是合理的——假设已知镇上没有超过 200 岁的老人，而今天是 2014 年 9 月 6 日，所以超过 200 岁的生日和未出生的生日都是不合理的，应该被过滤掉。</p>
<h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出正整数 <em>N</em>，取值在(0,105]；随后 <em>N</em> 行，每行给出 1 个人的姓名（由不超过 5 个英文字母组成的字符串）、以及按 <code>yyyy/mm/dd</code>（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。</p>
<h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。</p>
<h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">John 2001&#x2F;05&#x2F;12</span><br><span class="line">Tom 1814&#x2F;09&#x2F;06</span><br><span class="line">Ann 2121&#x2F;01&#x2F;30</span><br><span class="line">James 1814&#x2F;09&#x2F;05</span><br><span class="line">Steve 1967&#x2F;11&#x2F;20</span><br></pre></td></tr></table></figure>

<h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 Tom John</span><br></pre></td></tr></table></figure>


</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> yy, mm, dd;</span><br><span class="line">&#125;oldest, youngest, left, right, temp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    youngest.yy = left.yy = <span class="number">1814</span>;</span><br><span class="line">    oldest.yy = right.yy = <span class="number">2014</span>;</span><br><span class="line">    youngest.mm = left.mm = <span class="number">9</span>;</span><br><span class="line">    oldest.mm = right.mm = <span class="number">9</span>;</span><br><span class="line">    youngest.dd = left.dd = <span class="number">6</span>;</span><br><span class="line">    right.dd = right.dd = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">lessEqu</span><span class="params">(struct student a,struct student b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.yy != b.yy) <span class="keyword">return</span> a.yy &lt;= b.yy;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.mm != b.mm) <span class="keyword">return</span> a.mm &lt;= b.mm;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.dd &lt;= b.dd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MoreEqu</span><span class="params">(struct student a,struct student b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.yy != b.yy) <span class="keyword">return</span> a.yy &gt;= b.yy;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.mm != b.mm) <span class="keyword">return</span> a.mm &gt;= b.mm;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.dd &gt;= b.dd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, cnt = <span class="number">0</span>;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d/%d/%d&quot;</span>, temp.name, &amp;temp.yy, &amp;temp.mm, &amp;temp.dd);</span><br><span class="line">        <span class="keyword">if</span>(MoreEqu(temp, left) &amp;&amp; lessEqu(temp, right)) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(lessEqu(temp, oldest)) oldest = temp; <span class="comment">//越小越老</span></span><br><span class="line">            <span class="keyword">if</span>(MoreEqu(temp, youngest)) youngest = temp;<span class="comment">//越大越年轻</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d %s %s\n&quot;</span>, cnt, oldest.name, youngest.name);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="图形输出"><a href="#图形输出" class="headerlink" title="图形输出"></a>图形输出</h2><ol>
<li>通过规律，直接进行输出</li>
<li>定义一个二维字符数组，通过规律填充之，然后输出整个二维数组。</li>
</ol>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库第四章——关系数据库标准语言SQL（5）</title>
    <url>/posts/29673d4d/</url>
    <content><![CDATA[<h1 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h1><h2 id="本讲示例数据库COMPANY"><a href="#本讲示例数据库COMPANY" class="headerlink" title="本讲示例数据库COMPANY"></a>本讲示例数据库COMPANY</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114093802527.png" alt="image-20210114093802527"></p>
<h2 id="本讲示例数据库EDUCATION"><a href="#本讲示例数据库EDUCATION" class="headerlink" title="本讲示例数据库EDUCATION"></a>本讲示例数据库EDUCATION</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114093839006.png" alt="image-20210114093839006"></p>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><ul>
<li><p>使用SQL语句</p>
</li>
<li><p>使用Management Studio</p>
</li>
</ul>
<p>基本上所有的数据库操作都可用SQL语言(包括数据库<br>备份与还原等操作)完成，优点是：</p>
<ol>
<li>简便、快捷</li>
<li>可保存SQL语句，供以后重用</li>
<li>可嵌入应用程序中调用</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114094034029.png" alt="image-20210114094034029"></p>
<h3 id="使用SQL语句-复杂版，精确控制"><a href="#使用SQL语句-复杂版，精确控制" class="headerlink" title="使用SQL语句(复杂版，精确控制)"></a>使用SQL语句(复杂版，精确控制)</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114094103313.png" alt="image-20210114094103313"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114094326878.png" alt="image-20210114094326878"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114094348279.png" alt="image-20210114094348279"></p>
<h3 id="查看数据库详细信息"><a href="#查看数据库详细信息" class="headerlink" title="查看数据库详细信息"></a>查看数据库详细信息</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114094419417.png" alt="image-20210114094419417"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114094500307.png" alt="image-20210114094500307"></p>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114094531627.png" alt="image-20210114094531627"></p>
<h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114094600325.png" alt="image-20210114094600325"></p>
<h3 id="自增字段"><a href="#自增字段" class="headerlink" title="自增字段"></a>自增字段</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114094738807.png" alt="image-20210114094738807"></p>
<ul>
<li>每个表只能有一自增字段，且只能用于数值类型字段</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114095100738.png" alt="image-20210114095100738"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114095215920.png" alt="image-20210114095215920"></p>
<h2 id="修改数据库表"><a href="#修改数据库表" class="headerlink" title="修改数据库表"></a>修改数据库表</h2><p><strong>EMPLOYEE_NEW目前的数据</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114095323523.png" alt="image-20210114095323523"></p>
<h3 id="增加列"><a href="#增加列" class="headerlink" title="增加列"></a>增加列</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114095413280.png" alt="image-20210114095413280"></p>
<ul>
<li>非空的话修改了数据，会影响先前的数据</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114095424954.png" alt="image-20210114095424954"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114095436446.png" alt="image-20210114095436446"></p>
<h3 id="修改列的属性"><a href="#修改列的属性" class="headerlink" title="修改列的属性"></a>修改列的属性</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114095543289.png" alt="image-20210114095543289"></p>
<h3 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114095601458.png" alt="image-20210114095601458"></p>
<h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114095615461.png" alt="image-20210114095615461"></p>
<h2 id="删除数据库表"><a href="#删除数据库表" class="headerlink" title="删除数据库表"></a>删除数据库表</h2><ul>
<li>被外键参照的表不能直接删除，必须先删除外键约束才能删除表</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114095646595.png" alt="image-20210114095646595"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114095658251.png" alt="image-20210114095658251"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114095710054.png" alt="image-20210114095710054"></p>
<p><strong>解决方法1</strong></p>
<p>可以先删除引用表(注意：不是被引用表)</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114095750419.png" alt="image-20210114095750419"></p>
<p><strong>解决方法2</strong></p>
<p>可以先单独删除外键约束(见后)</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114095820963.png" alt="image-20210114095820963"></p>
<h1 id="完整性约束条件"><a href="#完整性约束条件" class="headerlink" title="完整性约束条件"></a>完整性约束条件</h1><p>作用对象</p>
<ul>
<li><p>列</p>
</li>
<li><p>元组</p>
</li>
<li><p>关系</p>
</li>
</ul>
<p>状态</p>
<ul>
<li>静态：数据库每一确定状态时的数据对象所应满足的约束条件(重点)</li>
<li>动态：数据库从一种状态转变为另一种状态时，新、旧值之间所应满足的约束条件</li>
</ul>
<h2 id="静态约束条件"><a href="#静态约束条件" class="headerlink" title="静态约束条件"></a>静态约束条件</h2><p>列级</p>
<ul>
<li><p>对数据类型的约束(在表定义时附加)</p>
</li>
<li><p>对空值的约束(在表定义时附加)</p>
</li>
<li><p>标识列约束(在表定义时附加)</p>
</li>
<li><p>默认值约束(一般在表定义后附加)</p>
</li>
<li><p>对数据格式的约束(一般在表定义后附加)</p>
</li>
<li><p>对取值范围或取值集合的约束(一般在表定义后附加)</p>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114191813529.png" alt="image-20210114191813529"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114191824077.png" alt="image-20210114191824077"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114191842399.png" alt="image-20210114191842399"></p>
<h2 id="默认值约束"><a href="#默认值约束" class="headerlink" title="默认值约束"></a>默认值约束</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114191908824.png" alt="image-20210114191908824"></p>
<h2 id="对取值范围-集合的约束"><a href="#对取值范围-集合的约束" class="headerlink" title="对取值范围/集合的约束"></a>对取值范围/集合的约束</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114191933391.png" alt="image-20210114191933391"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114191951107.png" alt="image-20210114191951107"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192000862.png" alt="image-20210114192000862"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192011621.png" alt="image-20210114192011621"></p>
<h2 id="对数据格式的约束"><a href="#对数据格式的约束" class="headerlink" title="对数据格式的约束"></a>对数据格式的约束</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192023210.png" alt="image-20210114192023210"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192040347.png" alt="image-20210114192040347"></p>
<h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192051120.png" alt="image-20210114192051120"></p>
<h2 id="唯一键（次要键）约束"><a href="#唯一键（次要键）约束" class="headerlink" title="唯一键（次要键）约束"></a>唯一键（次要键）约束</h2><p>![image-20210114192102644](/Users/fine/Library/Application Support/typora-user-images/image-20210114192102644.png)</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192115750.png" alt="image-20210114192115750"></p>
<h2 id="参照完整性约束"><a href="#参照完整性约束" class="headerlink" title="参照完整性约束"></a>参照完整性约束</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192146833.png" alt="image-20210114192146833"></p>
<h2 id="管理约束"><a href="#管理约束" class="headerlink" title="管理约束"></a>管理约束</h2><h3 id="查看约束信息"><a href="#查看约束信息" class="headerlink" title="查看约束信息"></a>查看约束信息</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192158951.png" alt="image-20210114192158951"></p>
<h3 id="禁用某个约束"><a href="#禁用某个约束" class="headerlink" title="禁用某个约束"></a>禁用某个约束</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192206995.png" alt="image-20210114192206995"></p>
<h3 id="启用某个约束"><a href="#启用某个约束" class="headerlink" title="启用某个约束"></a>启用某个约束</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192216307.png" alt="image-20210114192216307"></p>
<h3 id="禁用某个表的所有约束"><a href="#禁用某个表的所有约束" class="headerlink" title="禁用某个表的所有约束"></a>禁用某个表的所有约束</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192224961.png" alt="image-20210114192224961"></p>
<h3 id="启用某个表的所有约束"><a href="#启用某个表的所有约束" class="headerlink" title="启用某个表的所有约束"></a>启用某个表的所有约束</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192235242.png" alt="image-20210114192235242"></p>
<h3 id="级联删除"><a href="#级联删除" class="headerlink" title="级联删除"></a>级联删除</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192242463.png" alt="image-20210114192242463"></p>
<h1 id="完整性控制"><a href="#完整性控制" class="headerlink" title="完整性控制"></a>完整性控制</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192255409.png" alt="image-20210114192255409"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192303352.png" alt="image-20210114192303352"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192309737.png" alt="image-20210114192309737"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192317187.png" alt="image-20210114192317187"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192323808.png" alt="image-20210114192323808"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192331189.png" alt="image-20210114192331189"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114192340021.png" alt="image-20210114192340021"></p>
<h1 id="索引的机理、规划和管理"><a href="#索引的机理、规划和管理" class="headerlink" title="索引的机理、规划和管理"></a>索引的机理、规划和管理</h1><h2 id="索引的作用与结构"><a href="#索引的作用与结构" class="headerlink" title="索引的作用与结构"></a>索引的作用与结构</h2><p>什么叫索引</p>
<ul>
<li>数据库中的索引与书籍中的索引类似，在一本书中，利用索引可以快速查找所需信息，无须阅读整本书。在数据库中，索引使数据库程序无须对整个表进行扫描，就可以在其中找到所需数据。书中的索引是一个词语列表，其中注明了包含各个词的页码。而数据库中的索引是某个表中一列或者若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193034065.png" alt="image-20210114193034065"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193054109.png" alt="image-20210114193054109"></p>
<p>索引的作用</p>
<ul>
<li><p>通过创建唯一索引，可以保证数据记录的唯一性。</p>
</li>
<li><p>可以大大加快数据检索速度。</p>
</li>
<li><p>可以加速表与表之间的连接，这一点在实现数据的参照完整性方面有特别的意义。</p>
</li>
<li><p>在使用ORDER BY和GROUP BY子句进行数据检索时，可以显著减少查询中分组和排序的时间。</p>
</li>
<li><p>使用索引可以在检索数据的过程中使用查询优化器，提高系统性能。 </p>
</li>
</ul>
<h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><ul>
<li>聚集索引和非聚集索引</li>
<li>唯一索引和非唯一索引</li>
<li>单列索引和复合索引</li>
<li>主键索引和非主键索引</li>
<li></li>
</ul>
<h3 id="聚集索引和非聚集索引"><a href="#聚集索引和非聚集索引" class="headerlink" title="聚集索引和非聚集索引"></a>聚集索引和非聚集索引</h3><p>聚集索引：</p>
<ul>
<li>行的物理存储顺序与索引顺序完全相同，每个表只允许建立一个聚集索引。默认情况下，SQL Server为主键约束建立的索引为聚集索引。</li>
</ul>
<p>非聚集索引：</p>
<ul>
<li>不改变表中数据行的物理存储顺序。默认情况下， SQL Server为UNIQUE约束所建立的索引为非聚集索引。</li>
</ul>
<ul>
<li>建立聚集索引随时要改变表中数据行的物理顺序，所以应在其他非聚集索引建立之前建立聚集索引，以免引起SQL Server重新构造非聚集索引。</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193414726.png" alt="image-20210114193414726"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193442283.png" alt="image-20210114193442283"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193454334.png" alt="image-20210114193454334"></p>
<h3 id="主键索引和非主键索引"><a href="#主键索引和非主键索引" class="headerlink" title="主键索引和非主键索引"></a>主键索引和非主键索引</h3><p>主键索引：</p>
<ul>
<li>主键创建会自动创建聚集索引。频繁更改的属性列上不适宜创建主键聚集索引，因为SQL Server要求必须按照这些属性列的值重新安排记录的物理顺序，这将导致记录的物理移动。</li>
</ul>
<p>非主键索引：</p>
<ul>
<li>在非主键的属性列上创建的索引，这些索引一般都是非聚集索引。</li>
</ul>
<h4 id="唯一索引和非唯一索引"><a href="#唯一索引和非唯一索引" class="headerlink" title="唯一索引和非唯一索引"></a>唯一索引和非唯一索引</h4><p>唯一索引：</p>
<ul>
<li>索引列中不包含重复值。只有当唯一性是数据本身特征时，指定唯一索引才有意义。使用唯一索引不能完全等同于使用主键（唯一索引允许一个空值）。如果某列包含多行NULL值，则不能在该列上创建唯一索引。数据表创建唯一索引后，SQL Server将禁止INSERT语句和UPDATE语句向表中添加重复的键值行。</li>
</ul>
<p>非唯一索引：</p>
<ul>
<li>允许索引列有重复值的索引。</li>
</ul>
<h3 id="单列索引和复合索引"><a href="#单列索引和复合索引" class="headerlink" title="单列索引和复合索引"></a>单列索引和复合索引</h3><p>单列索引：</p>
<ul>
<li>指对表中单个列建立索引。多数情况下，单列索引是创建索引首选考虑的索引，因为单列索引代价相对较小，而对数据库查询效能提高很大。</li>
</ul>
<p>复合索引：</p>
<ul>
<li>一个索引中包含了一个以上的列的索引。复合索引最多可以有16个列复合到一个索引中，并且这些列必须位于同一个表中，在使用复合索引检索时，把被索引的列作为一个单位。</li>
</ul>
<h2 id="规划设计索引的一般原则"><a href="#规划设计索引的一般原则" class="headerlink" title="规划设计索引的一般原则"></a>规划设计索引的一般原则</h2><h2 id="索引的创建和删除"><a href="#索引的创建和删除" class="headerlink" title="索引的创建和删除"></a>索引的创建和删除</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193742449.png" alt="image-20210114193742449"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193757706.png" alt="image-20210114193757706"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193808113.png" alt="image-20210114193808113"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193821863.png" alt="image-20210114193821863"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193839772.png" alt="image-20210114193839772"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193849045.png" alt="image-20210114193849045"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193856956.png" alt="image-20210114193856956"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193903881.png" alt="image-20210114193903881"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193918124.png" alt="image-20210114193918124"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210114193936086.png" alt="image-20210114193936086"></p>
]]></content>
      <categories>
        <category>数据库原理及应用</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库第四章——关系数据库标准语言SQL（4）</title>
    <url>/posts/91db5a28/</url>
    <content><![CDATA[<h1 id="视图的基本概念"><a href="#视图的基本概念" class="headerlink" title="视图的基本概念"></a>视图的基本概念</h1><h2 id="SQL支持关系数据库三级模式结构"><a href="#SQL支持关系数据库三级模式结构" class="headerlink" title="SQL支持关系数据库三级模式结构"></a>SQL支持关系数据库三级模式结构</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111211444397.png" alt="image-20210111211444397"></p>
<h2 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111211521246.png" alt="image-20210111211521246"></p>
<h2 id="视图VIEW-外模式"><a href="#视图VIEW-外模式" class="headerlink" title="视图VIEW(外模式)"></a>视图VIEW(外模式)</h2><ul>
<li>视图是虚拟的表(a virtual table)，保存在视图中的数据并不是物理存储的数据，而是由基本表或其他视图派生的</li>
<li>视图是一个被命名的SELECT语句，它能动态地产生一个可进行进一步操作的查询结果</li>
</ul>
<h1 id="视图的优点"><a href="#视图的优点" class="headerlink" title="视图的优点"></a>视图的优点</h1><ul>
<li>提供了一定程度的逻辑独立性</li>
<li>为用户集中数据，保证数据安全性<ul>
<li>视图为用户提供一个受限的环境，用户只能访问允许的数据，一些不必要的、不合适的数据则不在视图中显示</li>
</ul>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111211713619.png" alt="image-20210111211713619"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111211731808.png" alt="image-20210111211731808"></p>
<ul>
<li>简化数据库查询</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111211808112.png" alt="image-20210111211808112"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111211818721.png" alt="image-20210111211818721"></p>
<h1 id="创建和管理视图"><a href="#创建和管理视图" class="headerlink" title="创建和管理视图"></a>创建和管理视图</h1><h2 id="创建-定义-视图"><a href="#创建-定义-视图" class="headerlink" title="创建(定义)视图"></a>创建(定义)视图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111212143960.png" alt="image-20210111212143960"></p>
<h2 id="WITH-CHECK-OPTION"><a href="#WITH-CHECK-OPTION" class="headerlink" title="[WITH CHECK OPTION]"></a>[WITH CHECK OPTION]</h2><p>对视图进行UPDATE，INSERT和DELETE操作时要保证更新、插入或删除的行满足视图定义中的谓词条件(即子查询中的条件表达式)</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111212611947.png" alt="image-20210111212611947"></p>
<h2 id="定义视图时指定列名"><a href="#定义视图时指定列名" class="headerlink" title="定义视图时指定列名"></a>定义视图时指定列名</h2><ul>
<li><p>某个目标列不是单纯的属性名，而是聚集函数或计算列</p>
</li>
<li><p>多表连接时选出了几个同名列作为视图的字段</p>
</li>
<li><p>需要在视图中为某个列启用新的更合适的名字</p>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111213851092.png" alt="image-20210111213851092"></p>
<h2 id="修改视图定义"><a href="#修改视图定义" class="headerlink" title="修改视图定义"></a>修改视图定义</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111213927327.png" alt="image-20210111213927327"></p>
<h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111214546250.png" alt="image-20210111214546250"></p>
<h1 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h1><ul>
<li>步骤<ul>
<li>有效性检查</li>
<li>安全性检查</li>
<li>视图消解<ul>
<li>从数据字典中取出视图的定义，把定义中的子查询和用户针对视图的查询结合起来，转换成等价的对基本表的查询，然后再执行修正的等价查询</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="视图消解"><a href="#视图消解" class="headerlink" title="视图消解"></a>视图消解</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111214719729.png" alt="image-20210111214719729"></p>
<h1 id="更新视图中的数据"><a href="#更新视图中的数据" class="headerlink" title="更新视图中的数据"></a>更新视图中的数据</h1><ul>
<li>可以通过更新视图的方式实现对表中数据的更新。视图的更新操作包括插入、修改和删除数据</li>
<li>视图是一张虚表，所以对视图的更新，最终实际上是转换成对视图的底层表的更新</li>
<li>更新视图中的数据：不是所有视图中的数据都是可更新的</li>
</ul>
<h2 id="基本判断原则"><a href="#基本判断原则" class="headerlink" title="基本判断原则"></a>基本判断原则</h2><ul>
<li><p>视图中的每一列都必须和一个基本表中的一个源列对应</p>
</li>
<li><p>视图中的每一行都必须和一个基本表中的一个源行对应</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215029333.png" alt="image-20210111215029333"></p>
</li>
</ul>
<p>如果修改仅仅影响到视图参照的基表之一，则可以通过视图修改数据 (UPDATE, DELETE, INSERT)</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215100523.png" alt="image-20210111215100523"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215134862.png" alt="image-20210111215134862"></p>
<h2 id="可更新视图的具体判断标准"><a href="#可更新视图的具体判断标准" class="headerlink" title="可更新视图的具体判断标准"></a>可更新视图的具体判断标准</h2><ul>
<li><p>查询语句中没有聚合函数 (AVG, COUNT, SUM, MIN, MAX, GROUPING, STDEV, STDEVP, VAR, and VARP) 或 GROUP BY, UNION, DISTINCT,或 TOP 子句 </p>
</li>
<li><p>查询语句中没有导出列或者计算列</p>
</li>
</ul>
<h2 id="通过视图更新数据的注意事项"><a href="#通过视图更新数据的注意事项" class="headerlink" title="通过视图更新数据的注意事项"></a>通过视图更新数据的注意事项</h2><p>所有的数据修改都必须遵守在待更新基本表（甚至包括相关表）上设置的完整性约束条件</p>
<h2 id="通过视图添加数据"><a href="#通过视图添加数据" class="headerlink" title="通过视图添加数据"></a>通过视图添加数据</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215306306.png" alt="image-20210111215306306"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215325842.png" alt="image-20210111215325842"></p>
<h2 id="通过视图修改数据"><a href="#通过视图修改数据" class="headerlink" title="通过视图修改数据"></a>通过视图修改数据</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215350208.png" alt="image-20210111215350208"></p>
<h2 id="通过视图删除数据"><a href="#通过视图删除数据" class="headerlink" title="通过视图删除数据"></a>通过视图删除数据</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215418754.png" alt="image-20210111215418754"></p>
<h2 id="WITH-CHECK-OPTION的应用"><a href="#WITH-CHECK-OPTION的应用" class="headerlink" title="WITH CHECK OPTION的应用"></a>WITH CHECK OPTION的应用</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215445855.png" alt="image-20210111215445855"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215454990.png" alt="image-20210111215454990"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215503425.png" alt="image-20210111215503425"></p>
<h2 id="为什么要通过视图更新数据"><a href="#为什么要通过视图更新数据" class="headerlink" title="为什么要通过视图更新数据"></a>为什么要通过视图更新数据</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215526975.png" alt="image-20210111215526975"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215539132.png" alt="image-20210111215539132"></p>
<h1 id="加密视图"><a href="#加密视图" class="headerlink" title="加密视图"></a>加密视图</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215558785.png" alt="image-20210111215558785"></p>
<h1 id="派生表"><a href="#派生表" class="headerlink" title="派生表"></a>派生表</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215611633.png" alt="image-20210111215611633"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215623354.png" alt="image-20210111215623354"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210111215632300.png" alt="image-20210111215632300"></p>
<ul>
<li><p>派生表为一个命名的查询结果，用于另一个查询的FROM子句。因为查询的结果为一张表，而FROM子句正好也需要一张表。视图也可看成派生表。但视图是命名的, 定义被持久的存储、可重用；而派生表是动态的、临时的 </p>
</li>
<li><p>可以通过视图进行 insert, update和 delete 操作，但派生表不能</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库原理及应用</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数1-6</title>
    <url>/posts/35e2da0b/</url>
    <content><![CDATA[<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112093612798.png" alt="image-20210112093612798"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112093633526.png" alt="image-20210112093633526"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112094357035.png" alt="image-20210112094357035"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112094516847.png" alt="image-20210112094516847"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112094557538.png" alt="image-20210112094557538"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112094649005.png" alt="image-20210112094649005"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112094811016.png" alt="image-20210112094811016"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112094918127.png" alt="image-20210112094918127"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112094956546.png" alt="image-20210112094956546"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112095124505.png" alt="image-20210112095124505"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112095204655.png" alt="image-20210112095204655"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112095451340.png" alt="image-20210112095451340"></p>
<h1 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h1><h2 id="矩阵加减"><a href="#矩阵加减" class="headerlink" title="矩阵加减"></a>矩阵加减</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112100343431.png" alt="image-20210112100343431"></p>
<h2 id="矩阵相乘"><a href="#矩阵相乘" class="headerlink" title="矩阵相乘"></a>矩阵相乘</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112100433294.png" alt="image-20210112100433294"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112100503692.png" alt="image-20210112100503692"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112100638342.png" alt="image-20210112100638342"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112100655404.png" alt="image-20210112100655404"></p>
<h2 id="矩阵取绝对值"><a href="#矩阵取绝对值" class="headerlink" title="矩阵取绝对值"></a>矩阵取绝对值</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112100740306.png" alt="image-20210112100740306"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112100751141.png" alt="image-20210112100751141"></p>
<h2 id="涉及到转置的题目"><a href="#涉及到转置的题目" class="headerlink" title="涉及到转置的题目"></a>涉及到转置的题目</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112100942987.png" alt="image-20210112100942987"></p>
<h2 id="证明举证可逆"><a href="#证明举证可逆" class="headerlink" title="证明举证可逆"></a>证明举证可逆</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112101046994.png" alt="image-20210112101046994"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112101135541.png" alt="image-20210112101135541"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112101212256.png" alt="image-20210112101212256"></p>
<h2 id="利用可逆公式计算"><a href="#利用可逆公式计算" class="headerlink" title="利用可逆公式计算"></a>利用可逆公式计算</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112101344891.png" alt="image-20210112101344891"></p>
<h2 id="利用伴随矩阵计算"><a href="#利用伴随矩阵计算" class="headerlink" title="利用伴随矩阵计算"></a>利用伴随矩阵计算</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112101428449.png" alt="image-20210112101428449"></p>
<h2 id="求矩阵的秩"><a href="#求矩阵的秩" class="headerlink" title="求矩阵的秩"></a>求矩阵的秩</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112101454243.png" alt="image-20210112101454243"></p>
<h2 id="已知矩阵的秩，求矩阵里未知数"><a href="#已知矩阵的秩，求矩阵里未知数" class="headerlink" title="已知矩阵的秩，求矩阵里未知数"></a>已知矩阵的秩，求矩阵里未知数</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112101614180.png" alt="image-20210112101614180"></p>
<h1 id="向量组与线性空间"><a href="#向量组与线性空间" class="headerlink" title="向量组与线性空间"></a>向量组与线性空间</h1><h2 id="判断某向量是否可由某向量组线性表示"><a href="#判断某向量是否可由某向量组线性表示" class="headerlink" title="判断某向量是否可由某向量组线性表示"></a>判断某向量是否可由某向量组线性表示</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112101803606.png" alt="image-20210112101803606"></p>
<h2 id="判断某个向量组是否线性相关"><a href="#判断某个向量组是否线性相关" class="headerlink" title="判断某个向量组是否线性相关"></a>判断某个向量组是否线性相关</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112101923360.png" alt="image-20210112101923360"></p>
<h2 id="已知三维向量空间的一组基底，求某一向量在此基底下的坐标"><a href="#已知三维向量空间的一组基底，求某一向量在此基底下的坐标" class="headerlink" title="已知三维向量空间的一组基底，求某一向量在此基底下的坐标"></a>已知三维向量空间的一组基底，求某一向量在此基底下的坐标</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112102022634.png" alt="image-20210112102022634"></p>
<h2 id="求几个行向量的极大无关组"><a href="#求几个行向量的极大无关组" class="headerlink" title="求几个行向量的极大无关组"></a>求几个行向量的极大无关组</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112102202508.png" alt="image-20210112102202508"></p>
<h1 id="解方程组"><a href="#解方程组" class="headerlink" title="解方程组"></a>解方程组</h1><h2 id="判断方程组解的情况"><a href="#判断方程组解的情况" class="headerlink" title="判断方程组解的情况"></a>判断方程组解的情况</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112102413514.png" alt="image-20210112102413514"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112102503478.png" alt="image-20210112102503478"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112102534501.png" alt="image-20210112102534501"></p>
<h2 id="解方程组-1"><a href="#解方程组-1" class="headerlink" title="解方程组"></a>解方程组</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112102813936.png" alt="image-20210112102813936"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112102936273.png" alt="image-20210112102936273"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112103013857.png" alt="image-20210112103013857"></p>
<h2 id="求方程组的通解、特解、基础解系"><a href="#求方程组的通解、特解、基础解系" class="headerlink" title="求方程组的通解、特解、基础解系"></a>求方程组的通解、特解、基础解系</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112103059772.png" alt="image-20210112103059772"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112103113636.png" alt="image-20210112103113636"></p>
<h2 id="已知某方程组的多个特解，求某齐次方程组的通解"><a href="#已知某方程组的多个特解，求某齐次方程组的通解" class="headerlink" title="已知某方程组的多个特解，求某齐次方程组的通解"></a>已知某方程组的多个特解，求某齐次方程组的通解</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112103403195.png" alt="image-20210112103403195"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112103425138.png" alt="image-20210112103425138"></p>
<h2 id="已知某方程组的多个特解，求某非齐次方程组的通解"><a href="#已知某方程组的多个特解，求某非齐次方程组的通解" class="headerlink" title="已知某方程组的多个特解，求某非齐次方程组的通解"></a>已知某方程组的多个特解，求某非齐次方程组的通解</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112103619542.png" alt="image-20210112103619542"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112103635122.png" alt="image-20210112103635122"></p>
<h2 id="判断解集合中线性无关的解向量个数"><a href="#判断解集合中线性无关的解向量个数" class="headerlink" title="判断解集合中线性无关的解向量个数"></a>判断解集合中线性无关的解向量个数</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112103748763.png" alt="image-20210112103748763"></p>
<h1 id="解题记录"><a href="#解题记录" class="headerlink" title="解题记录"></a>解题记录</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112175337261.png" alt="image-20210112175337261"></p>
<p>只有方阵才能拆开！</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210112175627582.png" alt="image-20210112175627582"></p>
<p>a1特征值=1，a2特征值=2，所以相互正交，入=0；</p>
<p>满秩  行列式 ！=0   可逆  行列式 ！= 0   </p>
<p>0是相关，1无关</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210113111846665.png" alt="image-20210113111846665"></p>
<p>向量空间，极大无关组数=秩，取无关向量组（非0）</p>
<p>解线性方程方程，自由变量数=未知数个数-秩，取相关向量组</p>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数第八章——二次型</title>
    <url>/posts/d4c1f1bf/</url>
    <content><![CDATA[<h1 id="求二次型对应的系数矩阵"><a href="#求二次型对应的系数矩阵" class="headerlink" title="求二次型对应的系数矩阵"></a>求二次型对应的系数矩阵</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109204019812.png" alt="image-20210109204019812"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109204051005.png" alt="image-20210109204051005"></p>
<h1 id="把二次型化成标准型"><a href="#把二次型化成标准型" class="headerlink" title="把二次型化成标准型"></a>把二次型化成标准型</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109204153146.png" alt="image-20210109204153146"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109204411980.png" alt="image-20210109204411980"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109204312144.png" alt="image-20210109204312144"></p>
<h1 id="把二次型化成规范性"><a href="#把二次型化成规范性" class="headerlink" title="把二次型化成规范性"></a>把二次型化成规范性</h1><p>![image-20210109205518223](/Users/fine/Library/Application Support/typora-user-images/image-20210109205518223.png)</p>
<h1 id="用配方法把二次型化成标准型"><a href="#用配方法把二次型化成标准型" class="headerlink" title="用配方法把二次型化成标准型"></a>用配方法把二次型化成标准型</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109205846550.png" alt="image-20210109205846550"></p>
<h1 id="判断二次型的正定性"><a href="#判断二次型的正定性" class="headerlink" title="判断二次型的正定性"></a>判断二次型的正定性</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109210241326.png" alt="image-20210109210241326"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109210334211.png" alt="image-20210109210334211"></p>
<h1 id="二次型为正定的等价条件"><a href="#二次型为正定的等价条件" class="headerlink" title="二次型为正定的等价条件"></a>二次型为正定的等价条件</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109210428995.png" alt="image-20210109210428995"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109210507451.png" alt="image-20210109210507451"></p>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>计网应用题</title>
    <url>/posts/9648dc07/</url>
    <content><![CDATA[<h1 id="冗余码计算"><a href="#冗余码计算" class="headerlink" title="冗余码计算"></a>冗余码计算</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107171634481.png" alt="image-20210107171634481"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107171648084.png" alt="image-20210107171648084"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107171721030.png" alt="image-20210107171721030"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107171740599.png" alt="image-20210107171740599"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107171749408.png" alt="image-20210107171749408"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107171800007.png" alt="image-20210107171800007"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107171827008.png" alt="image-20210107171827008"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107171852899.png" alt="image-20210107171852899"></p>
<ul>
<li>运算时候用异或，同0异1</li>
</ul>
<h1 id="数据报分片"><a href="#数据报分片" class="headerlink" title="数据报分片"></a>数据报分片</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107171905980.png" alt="image-20210107171905980"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107171924869.png" alt="image-20210107171924869"></p>
<ul>
<li>数据报长度 = 数据部分长度+首部长度</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107172025702.png" alt="image-20210107172025702"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107172151402.png" alt="image-20210107172151402"></p>
<ul>
<li>MTU为1500字节</li>
</ul>
<h1 id="码分多址通信"><a href="#码分多址通信" class="headerlink" title="码分多址通信"></a>码分多址通信</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107172232286.png" alt="image-20210107172232286"></p>
<h1 id="地址聚合"><a href="#地址聚合" class="headerlink" title="地址聚合"></a>地址聚合</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107163635796.png" alt="image-20210107163635796"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107163701071.png" alt="image-20210107163701071"></p>
<h1 id="路由表更新"><a href="#路由表更新" class="headerlink" title="路由表更新"></a>路由表更新</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107163748580.png" alt="image-20210107163748580"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107163856330.png" alt="image-20210107163856330"></p>
<p>![image-20210107164031175](/Users/fine/Library/Application Support/typora-user-images/image-20210107164031175.png)</p>
<p>![image-20210107164043213](/Users/fine/Library/Application Support/typora-user-images/image-20210107164043213.png)</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107164148511.png" alt="image-20210107164148511"></p>
<h1 id="路由表下一跳"><a href="#路由表下一跳" class="headerlink" title="路由表下一跳"></a>路由表下一跳</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107164521306.png" alt="image-20210107164521306"></p>
<ul>
<li>子网掩码，逐位相与</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107164836786.png" alt="image-20210107164836786"></p>
<h1 id="网桥转发表"><a href="#网桥转发表" class="headerlink" title="网桥转发表"></a>网桥转发表</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107164853878.png" alt="image-20210107164853878"></p>
<p> <img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107165539095.png" alt="image-20210107165539095"></p>
<h1 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107165606990.png" alt="image-20210107165606990"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107165617908.png" alt="image-20210107165617908"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107170011105.png" alt="image-20210107170011105"></p>
<ul>
<li>主机位要留5位，子网号3位</li>
<li>子网掩码即每位都令为1</li>
<li>网络地址即令主机位排列组合，除去全0全1情况</li>
<li>广播地址即令主机位全为1</li>
<li>主机地址范围即为主机号范围</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107170500451.png" alt="image-20210107170500451"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107170510635.png" alt="image-20210107170510635"></p>
<ul>
<li>各个子网划分不能重叠</li>
</ul>
<h1 id="拥塞控制算法"><a href="#拥塞控制算法" class="headerlink" title="拥塞控制算法"></a>拥塞控制算法</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107170603812.png" alt="image-20210107170603812"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107170612183.png" alt="image-20210107170612183"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107170913389.png" alt="image-20210107170913389"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107171123968.png" alt="image-20210107171123968"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210107171202459.png" alt="image-20210107171202459"></p>
<ul>
<li>开始 慢开始，指数增加cwnd，第一轮为2，第0轮为1</li>
<li>然后达到阈值，拥塞避免，加法增加cwnd</li>
<li>遇到超时，直接重开，且阈值改变为 超时/2</li>
<li>遇到重复ACK，报文段丢失，启动快重传，快恢复，从新阈值重新开始</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>计网第二章——物理层</title>
    <url>/posts/2d4e58b9/</url>
    <content><![CDATA[<p>物理层基本概念、两个定理、三种通信方式、传输介质、物理层设备…</p>
<a id="more"></a>

<h1 id="物理层基本概念"><a href="#物理层基本概念" class="headerlink" title="物理层基本概念"></a>物理层基本概念</h1><h2 id="物理层基本概念-1"><a href="#物理层基本概念-1" class="headerlink" title="物理层基本概念"></a>物理层基本概念</h2><blockquote>
<p>物理层解决如何在连接各种计算机的传输媒体上<strong>传输数据比特流</strong>，而不是指具体的传输媒体。</p>
</blockquote>
<p>主要任务：确定与传输媒体接口有关的一些特性 —— 定义标准</p>
<ol>
<li><strong>机械特性</strong>：定义物理连接的特性，规定物理连接时所采用的规格、接口形状、引线数目、引脚数量和排列情况</li>
<li><strong>电气特性</strong>：规定传输二进制位时，线路上信号的电压范围、阻抗匹配、传输速率和距离限制等</li>
<li><strong>功能特性</strong>：指明某条线上出现的某一电平表示何种意义，接口部件信号线的用途</li>
<li><strong>规程特性</strong>：（过程特性）定义各条物理线路的工作规程和时序关系</li>
</ol>
<h1 id="数据通信基础知识"><a href="#数据通信基础知识" class="headerlink" title="数据通信基础知识"></a>数据通信基础知识</h1><h2 id="典型的数据通信模型"><a href="#典型的数据通信模型" class="headerlink" title="典型的数据通信模型"></a>典型的数据通信模型</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102162601996.png" alt="image-20210102162601996"></p>
<h2 id="数据通信相关术语"><a href="#数据通信相关术语" class="headerlink" title="数据通信相关术语"></a>数据通信相关术语</h2><blockquote>
<p>通信的目的是传送消息</p>
</blockquote>
<ul>
<li><p><strong>数据</strong>：传送信息的实体，有意义的符号序列</p>
</li>
<li><p><strong>信号</strong>：数据的电气、电磁表现，数据在传输过程中的<em>传输形式</em></p>
<ul>
<li>数字信号：代表消息参数取值是离散的</li>
<li>模拟信号：代表消息的参数取值是连续的</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102162934176.png" alt="image-20210102162934176"></li>
</ul>
</li>
<li><p><strong>信源</strong>：产生和发送数据的源头</p>
</li>
<li><p><strong>信宿</strong>：接受数据的终点</p>
</li>
<li><p><strong>信道</strong>：信号的传输媒介。有方向，发送信道，接受信道</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102163150670.png" alt="image-20210102163150670"></p>
</li>
</ul>
<h2 id="三种通信方式"><a href="#三种通信方式" class="headerlink" title="三种通信方式"></a>三种通信方式</h2><ol>
<li><strong>单工通信</strong>：只有一个方向的通信而没有反方向的交互，仅需要一条信道</li>
<li><strong>半双工通信</strong>：通信的双方都可以发送或接受信息，但是任何一方不能同时发送或接受，需要两条信道</li>
<li><strong>全双工通信</strong>：通信双方可以<em>同时</em>发送和接受，需要两条信道</li>
</ol>
<h2 id="两种数据传输方式"><a href="#两种数据传输方式" class="headerlink" title="两种数据传输方式"></a>两种数据传输方式</h2><ol>
<li><h5 id="串行传输"><a href="#串行传输" class="headerlink" title="串行传输"></a>串行传输</h5><p>速度慢，费用低，适合远距离</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102163725926.png" alt="image-20210102163725926"></p>
</li>
<li><h5 id="并行传输"><a href="#并行传输" class="headerlink" title="并行传输"></a>并行传输</h5><p>速度快，费用高，适合近距离</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102173831791.png" alt="image-20210102173831791"></p>
</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102163819903.png" alt="image-20210102163819903"></p>
<h1 id="码元、波特、速率、带宽"><a href="#码元、波特、速率、带宽" class="headerlink" title="码元、波特、速率、带宽"></a>码元、波特、速率、带宽</h1><h2 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h2><blockquote>
<p>指用一个<strong>固定时长</strong>的信号波形（数字脉冲），代表不同离散值的基本波形，是数值通信中数字信号的计量单位，这个时长内的信号成为<strong>k进制码元</strong>，该时长成为码元宽度。当码元的离散状态有m个时（m&gt;2），码元称为m进制码元</p>
</blockquote>
<p>1码元可以携带多个比特的信号量。例如，在使用二进制编码时，只有两个不同的码元，一种代表0状态，另一种代表1状态，一个比特。</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102164446098.png" alt="image-20210102164446098"></p>
<h2 id="速率、波特、带宽"><a href="#速率、波特、带宽" class="headerlink" title="速率、波特、带宽"></a>速率、波特、带宽</h2><blockquote>
<p>速率也叫数据率，是指数据的<strong>传输速率</strong>，表示单位时间内传输的数据量。可以用<strong>码元传输速率</strong>和<strong>信息传输速率</strong>表示。</p>
</blockquote>
<ol>
<li><h3 id="码元传输速率："><a href="#码元传输速率：" class="headerlink" title="码元传输速率："></a>码元传输速率：</h3><p>单位波特</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102164808122.png" alt="image-20210102164808122"></p>
</li>
<li><h3 id="信息传输速率："><a href="#信息传输速率：" class="headerlink" title="信息传输速率："></a>信息传输速率：</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102173741936.png" alt="image-20210102173741936"></p>
</li>
</ol>
<h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102165458617.png" alt="image-20210102165458617"></p>
<p>十六进制能表示多少状态，用以2为底的对数</p>
<h1 id="奈氏准则和香农定理"><a href="#奈氏准则和香农定理" class="headerlink" title="奈氏准则和香农定理"></a>奈氏准则和香农定理</h1><h2 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h2><h3 id="失真类别"><a href="#失真类别" class="headerlink" title="失真类别"></a>失真类别</h3><ul>
<li><p>有失真但可识别</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102165859791.png" alt="image-20210102165859791"></p>
</li>
<li><p>失真大无法识别</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102165942300.png" alt="image-20210102165942300"></p>
</li>
</ul>
<h3 id="影响失真程度的因素"><a href="#影响失真程度的因素" class="headerlink" title="影响失真程度的因素"></a>影响失真程度的因素</h3><ol>
<li>码元传输速率</li>
<li>信号传输距离</li>
<li>噪声干扰</li>
<li><em>传输媒体质量</em></li>
</ol>
<h3 id="失真的一种现象-——-码间串扰"><a href="#失真的一种现象-——-码间串扰" class="headerlink" title="失真的一种现象 —— 码间串扰"></a>失真的一种现象 —— 码间串扰</h3><blockquote>
<p><strong>信道带宽</strong>是信道能通过的最高频率和最低频率之差</p>
</blockquote>
<blockquote>
<p>码间串扰：接收端收到的信号波形失去了码元之间清晰界限的现象</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102170535032.png" alt="image-20210102170535032"></p>
<h2 id="奈氏准则（奈奎斯特定理）"><a href="#奈氏准则（奈奎斯特定理）" class="headerlink" title="奈氏准则（奈奎斯特定理）"></a>奈氏准则（奈奎斯特定理）</h2><blockquote>
<p>在理想低通（无噪声、带宽受限），为了避免码间串扰，极限码元传输速率为2w Baud，w是信道带宽，单位Hz</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102170908532.png" alt="image-20210102170908532"></p>
<h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><ol>
<li>任何信道中，<strong>码元传输速率是有上限的</strong>。超过则会出现码间串扰。</li>
<li>信道的<strong>频带越宽</strong>（即能通过的信号高频分量越多），就可以用更高的速率进行码元的有效传输</li>
<li>奈氏准则给出了码元传输速率的限制，并没有对信息传输速率给出限制</li>
<li>要提卡数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量，这就需要采用多元制的调制方法。</li>
</ol>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102171508491.png" alt="image-20210102171508491"></p>
<h2 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h2><blockquote>
<p>香农定理：在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。</p>
</blockquote>
<blockquote>
<p><strong>噪声</strong>存在于所有的电子设备和通信信道中。由于噪声随机产生，有时瞬时值很大，因此噪声会使接收端对码元的判决产生错误。但是噪声影响是相对的，信号较强，则影响较小。因此，<strong>信噪比</strong>很重要。</p>
</blockquote>
<h3 id="信噪比"><a href="#信噪比" class="headerlink" title="信噪比"></a>信噪比</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102171951739.png" alt="image-20210102171951739"></p>
<h3 id="香农定理-1"><a href="#香农定理-1" class="headerlink" title="香农定理"></a>香农定理</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102172036161.png" alt="image-20210102172036161"></p>
<h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><ol>
<li>信道的<strong>带宽</strong>或<strong>信噪比</strong>越大，则信息的极限传输速率就越高</li>
<li>对一定的传输带宽和一定的信噪比，信息传输速率的上限就确定了</li>
<li>只要信息的传输速率低于信道的极限传输速率，就一定能找到某种方法来实现<strong>无差错的传输</strong></li>
<li>香农定理得出的是极限信息传输速率，实际信道能达到的传输速率要小很多</li>
<li>若W和信噪比没有上限（不可能），信道极限速率也无上限</li>
</ol>
<h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102173658842.png" alt="image-20210102173658842"></p>
<h2 id="『Nice』和『香浓』"><a href="#『Nice』和『香浓』" class="headerlink" title="『Nice』和『香浓』"></a>『Nice』和『香浓』</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102172903591.png" alt="image-20210102172903591"></p>
<h5 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102172957796.png" alt="image-20210102172957796"></p>
<h1 id="编码和调制"><a href="#编码和调制" class="headerlink" title="编码和调制"></a>编码和调制</h1><h2 id="基带信号与宽带信号"><a href="#基带信号与宽带信号" class="headerlink" title="基带信号与宽带信号"></a>基带信号与宽带信号</h2><ul>
<li><p>基带信号：</p>
<p>ex：数字信号</p>
<p>传输距离较近时使用，近距离衰减小，信号内容不易发生改变</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102173612458.png" alt="image-20210102173612458"></p>
</li>
<li><p>宽带信号：</p>
<p>ex：模拟信号</p>
<p>传输距离较远时使用</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102173633932.png" alt="image-20210102173633932"></p>
</li>
</ul>
<h2 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h2><ul>
<li><p>编码：</p>
<p>数据 –&gt; 数字信号 </p>
</li>
<li><p>调制</p>
<p>数据 –&gt; 模拟信号</p>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102174052211.png" alt="image-20210102174052211"></p>
<h2 id="数字数据编码为数字信号"><a href="#数字数据编码为数字信号" class="headerlink" title="数字数据编码为数字信号"></a>数字数据编码为数字信号</h2><ol>
<li><p><strong>非归零编码『NRZ』</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102174812087.png" alt="image-20210102174812087"></p>
</li>
<li><p><strong>曼切斯特编码</strong></p>
<p>一个时间内，两次脉冲</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102175251365.png" alt="image-20210102175251365"></p>
</li>
<li><p><strong>差分曼切斯特编码</strong></p>
<p>作用于下一个码元</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102175417107.png" alt="image-20210102175417107"></p>
</li>
<li><p>归零编码『RZ』</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102174910678.png" alt="image-20210102174910678"></p>
</li>
<li><p>反向不归零编码『NRZI』</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102175020725.png" alt="image-20210102175020725"></p>
</li>
<li><p>4B/5B编码</p>
</li>
</ol>
<h3 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h3><p>   <img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102175940142.png" alt="image-20210102175940142"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102175802275.png" alt="image-20210102175802275"></p>
<h2 id="数字数据调制为模拟信号"><a href="#数字数据调制为模拟信号" class="headerlink" title="数字数据调制为模拟信号"></a>数字数据调制为模拟信号</h2><ul>
<li>调幅（2ASK）</li>
<li>调频（2FSK）</li>
<li>调相（2PSK）</li>
<li>调幅+调相（QAM）</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102180441242.png" alt="image-20210102180441242"></p>
<h2 id="模拟数据编码为数字信号"><a href="#模拟数据编码为数字信号" class="headerlink" title="模拟数据编码为数字信号"></a>模拟数据编码为数字信号</h2><blockquote>
<p>计算机内部处理的是二进制数据，处理的都是<strong>数字音频</strong>，所以需要将模拟音频通过采样、量化转换成有限个数字表示的离散序列，实现音频数字化。</p>
</blockquote>
<h3 id="PCM："><a href="#PCM：" class="headerlink" title="PCM："></a>PCM：</h3><ol>
<li><p>抽样</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102194024113.png" alt="image-20210102194024113"></p>
</li>
<li><p>量化</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102200345153.png" alt="image-20210102200345153"></p>
</li>
<li><p>编码</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102200228856.png" alt="image-20210102200228856"></p>
</li>
</ol>
<h2 id="模拟信号调制为模拟信号"><a href="#模拟信号调制为模拟信号" class="headerlink" title="模拟信号调制为模拟信号"></a>模拟信号调制为模拟信号</h2><blockquote>
<p>为了实现传输的有效性，可能需要较高的频率。这种调试方式还可以使用频分复用技术，充分利用带宽资源。在电话机和本地交换机所传输的信号是采用模拟信号传输模拟数据的方式；模拟的声音数据是加载到模拟的载波信号中传输的。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102200640257.png" alt="image-20210102200640257"></p>
<h2 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102200702495.png" alt="image-20210102200702495"></p>
<h1 id="物理层传输介质"><a href="#物理层传输介质" class="headerlink" title="物理层传输介质"></a>物理层传输介质</h1><h2 id="传输介质及分类"><a href="#传输介质及分类" class="headerlink" title="传输介质及分类"></a>传输介质及分类</h2><blockquote>
<p>传输介质也称传输媒体、传输媒介，它就是数据传输系统中在发送设备和接受设备之间的物理通路。 </p>
<p>传输媒介并不是物理层。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102201154671.png" alt="image-20210102201154671"></p>
<ul>
<li><p><strong>导向性传输介质</strong>：电磁波被导向沿着固体媒介（铜线、光纤）传播</p>
</li>
<li><p><strong>非导向性传输介质</strong>：自由空间，介质可以是空气、真空、海水等</p>
</li>
</ul>
<ol>
<li><h3 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h3><blockquote>
<p>古老又最常用的传输介质，由两根采用一定规则并排绞合、相互绝缘的铜导线组成。</p>
<p>绞合可以减少对相邻导线的电磁干扰。</p>
</blockquote>
</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102201536574.png"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102201609625.png" alt="image-20210102201609625"></p>
<ol start="2">
<li><h3 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h3><ul>
<li>基带同轴电缆</li>
<li>宽带同轴电缆</li>
</ul>
</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102201809384.png" alt="image-20210102201809384"></p>
<ol start="3">
<li><h3 id="光纤"><a href="#光纤" class="headerlink" title="光纤"></a>光纤</h3><blockquote>
<p>传递光脉冲来进行通信。</p>
<p>光纤通信系统的带宽远远大于目前其他各种传输媒体的带宽。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102202018829.png" alt="image-20210102202018829"></p>
</li>
</ol>
<ul>
<li>多模光纤  —— 适合近距离</li>
<li>单模光纤  —— 适合远距离</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102202208077.png" alt="image-20210102202208077"></p>
<p>特点：</p>
<ul>
<li>损耗小</li>
<li>抗雷电和电磁干扰性能好</li>
<li>不易被窃听或截取数据</li>
<li>体积小重量轻</li>
</ul>
<h2 id="非导向性传输介质"><a href="#非导向性传输介质" class="headerlink" title="非导向性传输介质"></a>非导向性传输介质</h2><ol>
<li><h3 id="无线电波"><a href="#无线电波" class="headerlink" title="无线电波"></a>无线电波</h3><ul>
<li>信号向所有方向传播</li>
<li>穿透能力较强，可传远距离，广泛用于通信</li>
</ul>
</li>
<li><h3 id="微波"><a href="#微波" class="headerlink" title="微波"></a>微波</h3><ul>
<li>信号固定方向传播</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102202740831.png" alt="image-20210102202740831"></li>
</ul>
</li>
<li><h3 id="红外线、激光"><a href="#红外线、激光" class="headerlink" title="红外线、激光"></a>红外线、激光</h3><ul>
<li>信号固定方向传播</li>
<li>要把传输信号分别转换为各自的信号格式，即红外光信号和激光信号，再传播</li>
</ul>
</li>
</ol>
<h2 id="脑图-1"><a href="#脑图-1" class="headerlink" title="脑图"></a>脑图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102203108707.png" alt="image-20210102203108707"></p>
<h1 id="物理层设备"><a href="#物理层设备" class="headerlink" title="物理层设备"></a>物理层设备</h1><h2 id="中继器"><a href="#中继器" class="headerlink" title="中继器"></a>中继器</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102203530197.png" alt="image-20210102203530197"></p>
<h2 id="集线器（多口中继器）"><a href="#集线器（多口中继器）" class="headerlink" title="集线器（多口中继器）"></a>集线器（多口中继器）</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102205012908.png" alt="image-20210102205012908"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210102204904877.png"></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>计网第一章——概述</title>
    <url>/posts/997666ff/</url>
    <content><![CDATA[<p>计算机网络的概念、组成、功能和分类…</p>
<a id="more"></a>

<h1 id="1-1-1-概念、组成、功能和分类"><a href="#1-1-1-概念、组成、功能和分类" class="headerlink" title="1.1.1 概念、组成、功能和分类"></a>1.1.1 概念、组成、功能和分类</h1><h2 id="计算机网络的概念"><a href="#计算机网络的概念" class="headerlink" title="计算机网络的概念"></a>计算机网络的概念</h2><blockquote>
<p>是一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现 资源共享和信息传递的系统</p>
</blockquote>
<p>计算机网络是互联的、自治的计算机集合</p>
<ul>
<li><p>互联 – 互联互通  通信链路</p>
</li>
<li><p>自治 – 无主从关系</p>
</li>
</ul>
<h2 id="计算机网络的功能"><a href="#计算机网络的功能" class="headerlink" title="计算机网络的功能"></a>计算机网络的功能</h2><ol>
<li><p>数据通信（连通性）</p>
</li>
<li><p>资源共享：硬件、软件、数据</p>
</li>
<li><p>分布式处理：多台计算机共同承担同一任务不同步分（Hadoop平台）</p>
</li>
<li><p>提高可靠性（替代机）</p>
</li>
<li><p>负载均衡（各计算机之间更亲密）</p>
</li>
</ol>
<h2 id="计算机网络的组成"><a href="#计算机网络的组成" class="headerlink" title="计算机网络的组成"></a>计算机网络的组成</h2><h3 id="1、组成部分"><a href="#1、组成部分" class="headerlink" title="1、组成部分"></a>1、组成部分</h3><p>硬件、软件、协议</p>
<h3 id="2、工作方式"><a href="#2、工作方式" class="headerlink" title="2、工作方式"></a>2、工作方式</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101194117425.png" alt="image-20210101194117425"></p>
<h3 id="3、功能组成"><a href="#3、功能组成" class="headerlink" title="3、功能组成"></a>3、功能组成</h3><ul>
<li><p>通信子网：实现数据通信</p>
</li>
<li><p>资源子网：实现资源共享、数据处理</p>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101195109924.png" alt="image-20210101195109924"></p>
<h2 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h2><h3 id="1-按分布范围分"><a href="#1-按分布范围分" class="headerlink" title="1.按分布范围分"></a>1.按分布范围分</h3><p>广域网WAN、城域网MAN、局域网WAN、个人区域网PAN</p>
<h3 id="2、按使用者分"><a href="#2、按使用者分" class="headerlink" title="2、按使用者分"></a>2、按使用者分</h3><p>公用网、专用网</p>
<h3 id="3、按交换技术分"><a href="#3、按交换技术分" class="headerlink" title="3、按交换技术分"></a>3、按交换技术分</h3><p>电路交换 、报文交换、分组交换</p>
<h3 id="4、按拓扑类型分"><a href="#4、按拓扑类型分" class="headerlink" title="4、按拓扑类型分"></a>4、按拓扑类型分</h3><p>总线型、星型、环型、网状型</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101195439213.png" alt="image-20210101195439213"></p>
<h2 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101195516966.png" alt="image-20210101195516966"></p>
<h1 id="1-1-2-标准化工作及相关组织"><a href="#1-1-2-标准化工作及相关组织" class="headerlink" title="1.1.2 标准化工作及相关组织"></a>1.1.2 标准化工作及相关组织</h1><h2 id="标准化工作"><a href="#标准化工作" class="headerlink" title="标准化工作"></a>标准化工作</h2><blockquote>
<p>为实现不同厂商硬件软件的相互联通</p>
</blockquote>
<h3 id="标准的分类"><a href="#标准的分类" class="headerlink" title="标准的分类"></a>标准的分类</h3><ul>
<li><p>法定标准：由权威机构制定的正式的、合法的标准  OSI</p>
</li>
<li><p>事实标准：某些公式产品占据了主流  TCP/IP</p>
</li>
</ul>
<h3 id="RFC-Request-For-Comments-–-因特网标准的形式"><a href="#RFC-Request-For-Comments-–-因特网标准的形式" class="headerlink" title="RFC(Request For Comments)  – 因特网标准的形式"></a>RFC(Request For Comments)  – 因特网标准的形式</h3><p>RFC上升为因特网正式标准：</p>
<ol>
<li><p>因特网草案：非RFC</p>
</li>
<li><p>建议标准：成为RFC</p>
</li>
<li><p>草案标准</p>
</li>
<li><p>因特网标准</p>
</li>
</ol>
<h3 id="标准化工作的相关组织"><a href="#标准化工作的相关组织" class="headerlink" title="标准化工作的相关组织"></a>标准化工作的相关组织</h3><ul>
<li>国际标准化组织ISO  （OSI参考模型、HDLC协议）</li>
<li>国际电信联盟    （制定通信规则）</li>
<li>国际电气电子工程师协会IEEE  （学术机构、5G、IEEE802系列标准）</li>
<li>Internet工程任务组IETF （负责因特网相关标准的制定，RFCxxxx）</li>
</ul>
<h2 id="脑图-1"><a href="#脑图-1" class="headerlink" title="脑图"></a>脑图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101200543997.png" alt="image-20210101200543997"></p>
<h1 id="1-1-3-速率相关的性能指标"><a href="#1-1-3-速率相关的性能指标" class="headerlink" title="1.1.3 速率相关的性能指标"></a>1.1.3 速率相关的性能指标</h1><h2 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h2><blockquote>
<p>速率即==数据率==或者称==数据传输率==或==比特率==</p>
</blockquote>
<p>连接再计算机网络上的主机在数字信道上传输数据位数的速率</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101200906350.png" alt="image-20210101200906350"></p>
<h2 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h2><ol>
<li><p>原本指某个信号具有的频带宽度，即最高频率与最低频率之差，单位赫兹</p>
</li>
<li><p>计算机网络中，带宽用来表示网络的通信线路传送数据的能力，单位时间从网络某一点到另一个点能通过的==最高数据率==。</p>
</li>
</ol>
<p>==网络所支持的最高速度==</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101201354323.png" alt="image-20210101201354323"></p>
<h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><blockquote>
<p>==单位时间==通过==某个网络（信道、接口）==数据量。</p>
</blockquote>
<p>吞吐量受网络带宽或网络的额定速率的限制。</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101201707066.png" alt="image-20210101201707066"></p>
<h1 id="1-1-4-时延、时延带宽积、RTT和利用率"><a href="#1-1-4-时延、时延带宽积、RTT和利用率" class="headerlink" title="1.1.4 时延、时延带宽积、RTT和利用率"></a>1.1.4 时延、时延带宽积、RTT和利用率</h1><h2 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h2><blockquote>
<p>数据（报文、分组、比特流）从网络（或链路）的一端传送到另一端所需的时间。==延迟==或==迟延==。单位s。</p>
</blockquote>
<p>发送时延（传输时延）、传播时延、排队时延、处理时延</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101202304640.png" alt="image-20210101202304640"></p>
<h2 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h2><blockquote>
<p>时延带宽积又称为以==比特为单位的链路长度==，某段链路有多少比特（容量）</p>
</blockquote>
<p>时延带宽积 = 传播时延 x 带宽</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101202849818.png" alt="image-20210101202849818"></p>
<h2 id="往返时延RTT"><a href="#往返时延RTT" class="headerlink" title="往返时延RTT"></a>往返时延RTT</h2><blockquote>
<p>从发送方发送数据开始，到发送方收到的接收方的确认（接收方收到数据后立即发送确认）总共经历的时延。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101203049556.png" alt="image-20210101203049556"></p>
<h2 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h2><ol>
<li><p>信道利用率</p>
</li>
<li><p>网络利用率</p>
</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101203146929.png" alt="image-20210101203146929"></p>
<h2 id="脑图-2"><a href="#脑图-2" class="headerlink" title="脑图"></a>脑图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101203242040.png" alt="image-20210101203242040"></p>
<h1 id="1-2-1-分层结构、协议、接口、服务"><a href="#1-2-1-分层结构、协议、接口、服务" class="headerlink" title="1.2.1 分层结构、协议、接口、服务"></a>1.2.1 分层结构、协议、接口、服务</h1><h2 id="为什么要分层"><a href="#为什么要分层" class="headerlink" title="为什么要分层"></a>为什么要分层</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101203457764.png" alt="image-20210101203457764"></p>
<h2 id="怎么分层"><a href="#怎么分层" class="headerlink" title="怎么分层"></a>怎么分层</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101203743153.png" alt="image-20210101203743153"></p>
<h2 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h2><ol>
<li><p>实体：n层实体。对等实体</p>
</li>
<li><p>协议：为==对等实体==数据交换建立的标准</p>
</li>
</ol>
<ul>
<li>语法：格式</li>
<li>语义：功能</li>
<li>同步：顺序</li>
</ul>
<ol start="3">
<li><p>接口（访问服务点SAP）：上层使用下层服务的入口</p>
</li>
<li><p>服务：下为相邻上提供功能调用</p>
</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101204321769.png" alt="image-20210101204321769"></p>
<h2 id="概念总结"><a href="#概念总结" class="headerlink" title="概念总结"></a>概念总结</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101213808016.png" alt="image-20210101213808016"></p>
<h2 id="脑图-3"><a href="#脑图-3" class="headerlink" title="脑图"></a>脑图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101204558820.png" alt="image-20210101204558820"></p>
<h1 id="1-2-2-OSI参考模型"><a href="#1-2-2-OSI参考模型" class="headerlink" title="1.2.2 OSI参考模型"></a>1.2.2 OSI参考模型</h1><h2 id="计算机网络分层结构"><a href="#计算机网络分层结构" class="headerlink" title="计算机网络分层结构"></a>计算机网络分层结构</h2><ol>
<li>7层OSI参考模型（法定标准）</li>
<li>4层TCP/IP参考模型（事实标准）</li>
<li>5层的体系结构</li>
</ol>
<h2 id="ISO-OSI参考模型"><a href="#ISO-OSI参考模型" class="headerlink" title="ISO/OSI参考模型"></a>ISO/OSI参考模型</h2><h3 id="七层结构"><a href="#七层结构" class="headerlink" title="七层结构"></a>七层结构</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101205417032.png" alt="image-20210101205417032"></p>
<h3 id="解释通信过程"><a href="#解释通信过程" class="headerlink" title="解释通信过程"></a>解释通信过程</h3><p>A给B写信，经过邮局</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101205747080.png" alt="image-20210101205747080"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101205937471.png" alt="image-20210101205937471"></p>
<h2 id="OSI各层"><a href="#OSI各层" class="headerlink" title="OSI各层"></a>OSI各层</h2><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><blockquote>
<p>所有能和用户交互产生网络流量的程序</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101210111104.png" alt="image-20210101210111104"></p>
<h3 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h3><blockquote>
<p>用于处理在两个通信系统中交换信息的表示方式（语义和语法）</p>
</blockquote>
<ol>
<li>数据格式变换（二进制转换）</li>
<li>数据加密解密（聊天记录）</li>
<li>数据压缩和恢复（视频）</li>
</ol>
<h3 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h3><blockquote>
<p>向表示层实体/用户进程提供==建立连接==并在连接上==有序==地传输数据。这是会话，也是==建立同步==。</p>
</blockquote>
<ol>
<li>建立、管理、终止会话</li>
<li>使用校验点可使会话在通信失效时从==校验点/同步点==继续恢复通信，实现数据同步。（文件传输中断）</li>
</ol>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><blockquote>
<p>负责主机中==两个进程==的通信，即==端到端==的通信。传输单位：报文段、数据报。</p>
</blockquote>
<ol>
<li>可靠传输、不可靠传输</li>
<li>差错传输</li>
<li>流量控制</li>
<li>复用分用<ul>
<li>复用：多个应用层可同时使用下面运输层的服务（QQ、微信同时发消息）</li>
<li>分用：运输层把收到的信息分别交付给上面应用层的进程（收消息）</li>
</ul>
</li>
</ol>
<p>==可差留用==</p>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><blockquote>
<p>把==分组==从源端传到目的端，为分组交换网上的不同主机提供通信服务。传输单位：数据报（分组的集合）</p>
</blockquote>
<ol>
<li><p>路由选择（最佳路径）</p>
</li>
<li><p>流量控制</p>
</li>
<li><p>差错控制</p>
</li>
<li><p>拥塞控制</p>
<p>若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于==拥塞==状态。因此要采取一定措施，缓解这种拥塞。</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101211403455.png" alt="image-20210101211403455"></p>
</li>
</ol>
<h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><blockquote>
<p>把网络层传下来的数据报==组装成帧==。传输单位：帧</p>
</blockquote>
<ol>
<li><p>成帧(定义帧的开始和结束)</p>
</li>
<li><p>差错控制（帧错+位错）</p>
</li>
<li><p>流量控制</p>
</li>
<li><p>访问（介入）控制 （控制对信道的访问）</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101213733835.png" alt="image-20210101213733835"></p>
</li>
</ol>
<h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><blockquote>
<p>在==物理媒体==上实现比特流的==透明传输==。传输单位：比特</p>
</blockquote>
<p>透明传输：不管所传数据是什么样的的比特组合，都可在链路上传送</p>
<ol>
<li>定义接口特性</li>
<li>定义传输模式<ul>
<li>单工</li>
<li>半双工（对讲机）</li>
<li>双工</li>
</ul>
</li>
<li>定义传输速率</li>
<li>比特同步</li>
<li>比特编码</li>
</ol>
<h2 id="脑图-4"><a href="#脑图-4" class="headerlink" title="脑图"></a>脑图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101212032611.png" alt="image-20210101212032611"></p>
<h1 id="1-2-4-TCP-IP-参考模型和5层参考模型"><a href="#1-2-4-TCP-IP-参考模型和5层参考模型" class="headerlink" title="1.2.4 TCP/IP 参考模型和5层参考模型"></a>1.2.4 TCP/IP 参考模型和5层参考模型</h1><h2 id="OSI参考模型和TCP-IP参考模型"><a href="#OSI参考模型和TCP-IP参考模型" class="headerlink" title="OSI参考模型和TCP/IP参考模型"></a>OSI参考模型和TCP/IP参考模型</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101212350890.png" alt="image-20210101212350890"></p>
<h2 id="OSI参考模型和TCP-IP参考模型异同"><a href="#OSI参考模型和TCP-IP参考模型异同" class="headerlink" title="OSI参考模型和TCP/IP参考模型异同"></a>OSI参考模型和TCP/IP参考模型异同</h2><h3 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h3><ol>
<li>都分层</li>
<li>基于独立的协议栈的概念</li>
<li>可以实现异构网络互联（不同厂商）</li>
</ol>
<h3 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h3><ol>
<li>OSI定义三点：<ul>
<li>服务</li>
<li>协议</li>
<li>接口</li>
</ul>
</li>
<li>OSI先出现，参考模型先于协议发明，不偏向特定协议</li>
<li>TCP/IP设计之初就考虑到异构网互联问题，将IP作为重要层次</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101213648823.png" alt="image-20210101213648823"></li>
</ol>
<h2 id="5层参考模型"><a href="#5层参考模型" class="headerlink" title="5层参考模型"></a>5层参考模型</h2><h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101213028676.png" alt="image-20210101213028676"></p>
<h3 id="数据封装与解封装"><a href="#数据封装与解封装" class="headerlink" title="数据封装与解封装"></a>数据封装与解封装</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101213225550.png" alt="image-20210101213225550"></p>
<h1 id="1-3-第一章知识总结"><a href="#1-3-第一章知识总结" class="headerlink" title="1.3 第一章知识总结"></a>1.3 第一章知识总结</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210101213405540.png" alt="image-20210101213405540"></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数第七章——方阵对角化及其应用</title>
    <url>/posts/b60ddbe5/</url>
    <content><![CDATA[<h1 id="规范正交化"><a href="#规范正交化" class="headerlink" title="规范正交化"></a>规范正交化</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109201509010.png" alt="image-20210109201509010"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109201809185.png" alt="image-20210109201809185"></p>
<h1 id="求矩阵的特征值"><a href="#求矩阵的特征值" class="headerlink" title="求矩阵的特征值"></a>求矩阵的特征值</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109201906847.png" alt="image-20210109201906847"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109201934012.png" alt="image-20210109201934012"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109202023128.png" alt="image-20210109202023128"></p>
<h1 id="求矩阵的特征向量"><a href="#求矩阵的特征向量" class="headerlink" title="求矩阵的特征向量"></a>求矩阵的特征向量</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109202047908.png" alt="image-20210109202047908"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109202211400.png" alt="image-20210109202211400"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109202307519.png" alt="image-20210109202307519"></p>
<h1 id="判断方阵是否与对角线相似-是否满足-P-1AP-A’"><a href="#判断方阵是否与对角线相似-是否满足-P-1AP-A’" class="headerlink" title="判断方阵是否与对角线相似/是否满足$P^-1AP=A’$"></a>判断方阵是否与对角线相似/是否满足$P^-1AP=A’$</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109202550322.png"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109202606181.png" alt="image-20210109202606181"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109202624066.png" alt="image-20210109202624066"></p>
<h1 id="求方阵对应的对角阵A’及相应变换矩阵P"><a href="#求方阵对应的对角阵A’及相应变换矩阵P" class="headerlink" title="求方阵对应的对角阵A’及相应变换矩阵P"></a>求方阵对应的对角阵A’及相应变换矩阵P</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109202720868.png" alt="image-20210109202720868"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109202956836.png" alt="image-20210109202956836"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109203004147.png" alt="image-20210109203004147"></p>
<h1 id="已知-P-1AP-A’-，求关于A的复杂式子"><a href="#已知-P-1AP-A’-，求关于A的复杂式子" class="headerlink" title="已知$P^-1AP=A’$，求关于A的复杂式子"></a>已知$P^-1AP=A’$，求关于A的复杂式子</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109203115365.png" alt="image-20210109203115365"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109203158489.png" alt="image-20210109203158489"></p>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>计网第五章——传输层</title>
    <url>/posts/bef5de24/</url>
    <content><![CDATA[<h1 id="传输层概述"><a href="#传输层概述" class="headerlink" title="传输层概述"></a>传输层概述</h1><blockquote>
<p>只有主机才有的层次</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106203651985.png" alt="image-20210106203651985"></p>
<h2 id="传输层的功能："><a href="#传输层的功能：" class="headerlink" title="传输层的功能："></a>传输层的功能：</h2><ol>
<li>传输层提供进程和进程之间的逻辑通信<ul>
<li>网络层提供主机之间的逻辑通信</li>
</ul>
</li>
<li>复用和分用</li>
<li>传输层对收到的报文进行差错检测</li>
<li>传输层的两种协议</li>
</ol>
<h2 id="传输层的两个协议"><a href="#传输层的两个协议" class="headerlink" title="传输层的两个协议"></a>传输层的两个协议</h2><ol>
<li>TCP<ul>
<li>可靠，面向连接，时延大，适用于大文件</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106203957423.png" alt="image-20210106203957423"></li>
</ul>
</li>
<li>UDP<ul>
<li>不可靠，无连接，时延小，适用于小文件</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106204024722.png" alt="image-20210106204024722"></li>
</ul>
</li>
</ol>
<h2 id="传输层的寻址与端口"><a href="#传输层的寻址与端口" class="headerlink" title="传输层的寻址与端口"></a>传输层的寻址与端口</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106204332134.png" alt="image-20210106204332134"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106204436327.png" alt="image-20210106204436327"></p>
<h1 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h1><h2 id="用户数据报协议UDP概述"><a href="#用户数据报协议UDP概述" class="headerlink" title="用户数据报协议UDP概述"></a>用户数据报协议UDP概述</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106204939137.png" alt="image-20210106204939137"></p>
<h2 id="UDP首部格式"><a href="#UDP首部格式" class="headerlink" title="UDP首部格式"></a>UDP首部格式</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106205119624.png" alt="image-20210106205119624"></p>
<h2 id="UDP校验"><a href="#UDP校验" class="headerlink" title="UDP校验"></a>UDP校验</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106205245867.png" alt="image-20210106205245867"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106205457833.png" alt="image-20210106205457833"></p>
<h1 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h1><h2 id="TCP协议特点"><a href="#TCP协议特点" class="headerlink" title="TCP协议特点"></a>TCP协议特点</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106205855121.png" alt="image-20210106205855121"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106205913699.png" alt="image-20210106205913699"></p>
<h2 id="TCP报文段首部格式"><a href="#TCP报文段首部格式" class="headerlink" title="TCP报文段首部格式"></a>TCP报文段首部格式</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106210243437.png" alt="image-20210106210243437"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106210625372.png" alt="image-20210106210625372"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106210857046.png" alt="image-20210106210857046"></p>
<h2 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a>TCP连接管理</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106211038166.png" alt="image-20210106211038166"></p>
<h3 id="TCP连接建立"><a href="#TCP连接建立" class="headerlink" title="TCP连接建立"></a>TCP连接建立</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106211413095.png" alt="image-20210106211413095"></p>
<h3 id="SYN洪泛攻击"><a href="#SYN洪泛攻击" class="headerlink" title="SYN洪泛攻击"></a>SYN洪泛攻击</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106211503642.png" alt="image-20210106211503642"></p>
<h3 id="TCP的连接释放"><a href="#TCP的连接释放" class="headerlink" title="TCP的连接释放"></a>TCP的连接释放</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106211533122.png" alt="image-20210106211533122"></p>
<p>![image-20210106211807812](/Users/fine/Library/Application Support/typora-user-images/image-20210106211807812.png)</p>
<h2 id="TCP可靠传输"><a href="#TCP可靠传输" class="headerlink" title="TCP可靠传输"></a>TCP可靠传输</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106211922707.png" alt="image-20210106211922707"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106212223019.png" alt="image-20210106212223019"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106212411228.png" alt="image-20210106212411228"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106212517585.png" alt="image-20210106212517585"></p>
<h2 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106212811492.png" alt="image-20210106212811492"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106213238466.png" alt="image-20210106213238466"></p>
<ul>
<li>窗口为0后，AB互相等待。B可能发了一个信息给A说可以传了，但是信息丢失了，而A又不知道丢了，就一直等。</li>
<li>解决方法：持续计时器</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106213445309.png" alt="image-20210106213445309"></p>
<h2 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106213714802.png" alt="image-20210106213714802"></p>
<h3 id="拥塞控制的四种算法"><a href="#拥塞控制的四种算法" class="headerlink" title="拥塞控制的四种算法"></a>拥塞控制的四种算法</h3><ul>
<li>慢开始</li>
<li>拥塞避免</li>
</ul>
<ul>
<li>快重传</li>
<li>快恢复</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106213918554.png" alt="image-20210106213918554"></p>
<h3 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106214101985.png" alt="image-20210106214101985"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106214348119.png" alt="image-20210106214348119"></p>
<ul>
<li>新的ssthresh的初始值为原来的除以2</li>
</ul>
<h3 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h3><p>![image-20210106214652844](/Users/fine/Library/Application Support/typora-user-images/image-20210106214652844.png)</p>
<h1 id="传输层总结"><a href="#传输层总结" class="headerlink" title="传输层总结"></a>传输层总结</h1><p>xmind</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>计网第六章——应用层</title>
    <url>/posts/9c3a6023/</url>
    <content><![CDATA[<h1 id="应用层概述"><a href="#应用层概述" class="headerlink" title="应用层概述"></a>应用层概述</h1><blockquote>
<p>应用层对应用程序的通信提供服务。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106215449349.png" alt="image-20210106215449349"></p>
<h2 id="应用层协议定义"><a href="#应用层协议定义" class="headerlink" title="应用层协议定义"></a>应用层协议定义</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106215500877.png" alt="image-20210106215500877"></p>
<h2 id="应用层功能"><a href="#应用层功能" class="headerlink" title="应用层功能"></a>应用层功能</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106215516080.png" alt="image-20210106215516080"></p>
<h2 id="应用层重要协议"><a href="#应用层重要协议" class="headerlink" title="应用层重要协议"></a>应用层重要协议</h2><ul>
<li>FTP</li>
<li>SMTP、POP3</li>
<li>HTTP</li>
<li>DNS</li>
</ul>
<h2 id="网络应用模型"><a href="#网络应用模型" class="headerlink" title="网络应用模型"></a>网络应用模型</h2><ul>
<li>客户/ 服务器模型（Client/Server）</li>
<li>P2P模型（Peer-to-peer）</li>
</ul>
<h3 id="客户-服务器模型（Client-Server）"><a href="#客户-服务器模型（Client-Server）" class="headerlink" title="客户/ 服务器模型（Client/Server）"></a>客户/ 服务器模型（Client/Server）</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106215838884.png" alt="image-20210106215838884"></p>
<h3 id="P2P模型"><a href="#P2P模型" class="headerlink" title="P2P模型"></a>P2P模型</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106220023192.png" alt="image-20210106220023192"></p>
<h1 id="DNS系统"><a href="#DNS系统" class="headerlink" title="DNS系统"></a>DNS系统</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106221047582.png" alt="image-20210106221047582"></p>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106221339816.png" alt="image-20210106221339816"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106221354211.png" alt="image-20210106221354211"></p>
<h2 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106221905213.png" alt="image-20210106221905213"></p>
<h2 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106222009482.png" alt="image-20210106222009482"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106222316434.png" alt="image-20210106222316434"></p>
<h1 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a>文件传输协议FTP</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106222436541.png" alt="image-20210106222436541"></p>
<h2 id="FTP服务器和用户端"><a href="#FTP服务器和用户端" class="headerlink" title="FTP服务器和用户端"></a>FTP服务器和用户端</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106222522785.png" alt="image-20210106222522785"></p>
<h2 id="FTP工作原理"><a href="#FTP工作原理" class="headerlink" title="FTP工作原理"></a>FTP工作原理</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106222743640.png" alt="image-20210106222743640"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106223022264.png" alt="image-20210106223022264"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106223032369.png" alt="image-20210106223032369"></p>
<h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><h3 id="电子邮件的信息格式"><a href="#电子邮件的信息格式" class="headerlink" title="电子邮件的信息格式"></a>电子邮件的信息格式</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106223152420.png" alt="image-20210106223152420"></p>
<h3 id="电子邮件系统组成结构"><a href="#电子邮件系统组成结构" class="headerlink" title="电子邮件系统组成结构"></a>电子邮件系统组成结构</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106223422693.png" alt="image-20210106223422693"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106223452512.png" alt="image-20210106223452512"></p>
<h2 id="简单邮件传送协议SMTP"><a href="#简单邮件传送协议SMTP" class="headerlink" title="简单邮件传送协议SMTP"></a>简单邮件传送协议SMTP</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106223532031.png" alt="image-20210106223532031"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106223726695.png" alt="image-20210106223726695"></p>
<p>缺点：</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106223812569.png" alt="image-20210106223812569"></p>
<h2 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106223835956.png" alt="image-20210106223835956"></p>
<h2 id="邮局协议POP3"><a href="#邮局协议POP3" class="headerlink" title="邮局协议POP3"></a>邮局协议POP3</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106223938956.png" alt="image-20210106223938956"></p>
<h2 id="网际报文存取协议IMAP"><a href="#网际报文存取协议IMAP" class="headerlink" title="网际报文存取协议IMAP"></a>网际报文存取协议IMAP</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106224018876.png" alt="image-20210106224018876"></p>
<h2 id="基于万维网的电子邮件"><a href="#基于万维网的电子邮件" class="headerlink" title="基于万维网的电子邮件"></a>基于万维网的电子邮件</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106224052288.png" alt="image-20210106224052288"></p>
<h2 id="邮件脑图"><a href="#邮件脑图" class="headerlink" title="邮件脑图"></a>邮件脑图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106224108106.png" alt="image-20210106224108106"></p>
<h1 id="万维网"><a href="#万维网" class="headerlink" title="万维网"></a>万维网</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106224309444.png" alt="image-20210106224309444"></p>
<h1 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a>超文本传输协议HTTP</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106224439705.png" alt="image-20210106224439705"></p>
<h2 id="HTTP协议的特点"><a href="#HTTP协议的特点" class="headerlink" title="HTTP协议的特点"></a>HTTP协议的特点</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106224609080.png" alt="image-20210106224609080"></p>
<h2 id="HTTP协议的连接方式"><a href="#HTTP协议的连接方式" class="headerlink" title="HTTP协议的连接方式"></a>HTTP协议的连接方式</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106224644852.png" alt="image-20210106224644852"></p>
<ul>
<li>非流水线式（停等）</li>
</ul>
<h2 id="HTTP报文结构"><a href="#HTTP报文结构" class="headerlink" title="HTTP报文结构"></a>HTTP报文结构</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106224848264.png" alt="image-20210106224848264"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106225020029.png" alt="image-20210106225020029"></p>
<h1 id="应用层总结"><a href="#应用层总结" class="headerlink" title="应用层总结"></a>应用层总结</h1><p>xmid</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL——DQL</title>
    <url>/posts/43a7a3f5/</url>
    <content><![CDATA[<h1 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h1><h2 id="数据库的好处"><a href="#数据库的好处" class="headerlink" title="数据库的好处"></a>数据库的好处</h2><ol>
<li>可以持久化数据到本地</li>
<li>结构化查询</li>
</ol>
<h2 id="数据库的常见概念"><a href="#数据库的常见概念" class="headerlink" title="数据库的常见概念"></a>数据库的常见概念</h2><ol>
<li>DB：数据库，存储数据的容器</li>
<li>DBMS：数据库管理系统，又称为数据库软件或数据库产品，用于创建或管理DB</li>
<li>SQL：结构化查询语言，用于和数据库通信的语言，不是某个数据库软件特有的，而是几乎所有的主流数据库软件通用的语言</li>
</ol>
<h2 id="数据库储存数据的特点"><a href="#数据库储存数据的特点" class="headerlink" title="数据库储存数据的特点"></a>数据库储存数据的特点</h2><ol>
<li>数据存放到表中，然后表在放到库中</li>
<li>一个库中可以有多张表，每张表具有唯一的表名用来标识自己</li>
<li>表中有一个或多个列，列有称为『字段』，相当于java中的『属性』</li>
<li>表中的每一行数据，都相当于java中对象</li>
</ol>
<h2 id="常见的数据库管理系统"><a href="#常见的数据库管理系统" class="headerlink" title="常见的数据库管理系统"></a>常见的数据库管理系统</h2><ul>
<li>MySQL</li>
<li>Oracle</li>
<li>db2</li>
<li>SqlServer</li>
</ul>
<h1 id="MysQL的介绍"><a href="#MysQL的介绍" class="headerlink" title="MysQL的介绍"></a>MysQL的介绍</h1><h2 id="MySQL的背景"><a href="#MySQL的背景" class="headerlink" title="MySQL的背景"></a>MySQL的背景</h2><ul>
<li>前身属于瑞典的一家公司，MySQL AB</li>
<li>08年被sun公司收购</li>
<li>09年被oracle收购</li>
</ul>
<h2 id="MySQL的优点"><a href="#MySQL的优点" class="headerlink" title="MySQL的优点"></a>MySQL的优点</h2><ol>
<li>开源、免费、成本低</li>
<li>性能高、移植性好</li>
<li>体积小，便于安装</li>
</ol>
<h2 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h2><ul>
<li>属于c/s架构的软件，一般来讲安装服务端</li>
<li>企业版、社区版</li>
</ul>
<h2 id="MySQL服务的启动和停止"><a href="#MySQL服务的启动和停止" class="headerlink" title="MySQL服务的启动和停止"></a>MySQL服务的启动和停止</h2><ul>
<li>方式一：通过命令行<ul>
<li>net start 服务名</li>
<li>net stop 服务名</li>
</ul>
</li>
<li>方式二：计算机——服务</li>
</ul>
<h2 id="MySQL服务的登录和退出"><a href="#MySQL服务的登录和退出" class="headerlink" title="MySQL服务的登录和退出"></a>MySQL服务的登录和退出</h2><ul>
<li>登录：<ul>
<li>mysql （-h主机名 -p端口号）-u用户名 -p密码</li>
</ul>
</li>
<li>退出：<ul>
<li>exit或ctrl+c</li>
</ul>
</li>
</ul>
<h2 id="MySQL常见命令"><a href="#MySQL常见命令" class="headerlink" title="MySQL常见命令"></a>MySQL常见命令</h2><ol>
<li><p>查看当前所有的数据库</p>
<p>show databases;</p>
</li>
<li><p>打开指定的库</p>
<p>use 库名;</p>
</li>
<li><p>查看当前库的所有表</p>
<p>show tables;</p>
</li>
<li><p>查看其他库的所有表</p>
<p>show tables from 库名;</p>
</li>
<li><p>创建表</p>
<p>create table 表名(</p>
<p>​    列名 列类型,</p>
<p>​    列名 列类型,</p>
<p>。。。</p>
<p>);</p>
</li>
<li><p>查看表结构</p>
<p>desc 表名;</p>
</li>
<li><p>查看服务器的版本</p>
<p>方式一：登录到mysql服务端</p>
<p>​    select version();</p>
<p>方式二：没有登录到MySQL服务端</p>
<p>​    mysql –version</p>
<p>​    mysql –v</p>
</li>
</ol>
<h2 id="MySQL的语法规范"><a href="#MySQL的语法规范" class="headerlink" title="MySQL的语法规范"></a>MySQL的语法规范</h2><ol>
<li>不区分大小写，建议关键字大写，表名、列名小写</li>
<li>每条命令最好用分号结尾</li>
<li>每条命令根据需要，可以进行缩进或换行</li>
<li>注释<ul>
<li>单行注释：#注释文字</li>
<li>单行注释：–注释文字</li>
<li>多行注释：/<em>注释文字</em>/</li>
</ul>
</li>
</ol>
<h1 id="DQL语言"><a href="#DQL语言" class="headerlink" title="DQL语言"></a>DQL语言</h1><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进阶1：基础查询</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">select 查询列表 from 表名;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">类似于：System.out.println(打印东西);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1. 查询列表可以是：</span></span><br><span class="line"><span class="comment">			表中的字段、常量值、表达式、函数</span></span><br><span class="line"><span class="comment">2. 查询的结果是一个虚拟的表格</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> myemployees;</span><br><span class="line"><span class="comment">#1. 查询表中的单个字段</span></span><br><span class="line"><span class="keyword">select</span> last_name <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.查询表中的多个字段</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary, email <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.查询表中的所有字段</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.查询常量值</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;john&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.查询表达式</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">100</span>%<span class="number">98</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.查询函数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.起别名</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">①便于理解</span></span><br><span class="line"><span class="comment">②如果要查询的字段有重名的情况，使用别名可以区分开来</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">#方式一</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">100</span>%<span class="number">98</span> <span class="keyword">AS</span> 结果;</span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">as</span> 姓, first_name <span class="keyword">as</span> 名 <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name  姓, first_name  名 <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例：查询salary，显示结果为out put</span></span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">as</span> <span class="string">&quot;out put&quot;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#8.去重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#案例：查询员工表中涉及到的所有的部门编号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#9.+号的作用</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java中的+号：</span></span><br><span class="line"><span class="comment">①运算符，两个操作符都为数值型</span></span><br><span class="line"><span class="comment">②连接数，只要有一个操作符为字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">mysql中的+号：</span></span><br><span class="line"><span class="comment">仅仅只有一个功能：远算符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">两个都为数值型，则做加法运算</span></span><br><span class="line"><span class="comment">SELECT 100+90；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">只要其中一方为字符型，试图将字符型数值转换成数值型；转换成功则继续做加法运算，转换失败，则将字符型数值转换成0</span></span><br><span class="line"><span class="comment">SELECT &#x27;123&#x27;+90;</span></span><br><span class="line"><span class="comment">SELECT &#x27;john&#x27;+90;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">只要其中一方为null，结果为null</span></span><br><span class="line"><span class="comment">SELECT null+10;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#案例：查询员工名和姓连接成一个字段，并显示为 姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">concat</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span> , <span class="string">&#x27;c&#x27;</span> ) <span class="keyword">AS</span> 结果;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">CONCAT</span>(last_name,<span class="string">&#x27; &#x27;</span>, first_name) <span class="keyword">AS</span> 姓名</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees;</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol>
<li><p>按条件表达式筛选</p>
<ul>
<li>条件运算符：&gt;    &lt;    =    !=    &lt;&gt;    &gt;=    &lt;=</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>按逻辑表达式筛选</p>
<blockquote>
<p> 作用：用于连接条件表达式</p>
</blockquote>
<ul>
<li><p>&amp;&amp;</p>
</li>
<li><p>||</p>
</li>
<li><p>！</p>
</li>
<li><p>and</p>
</li>
<li><p>or</p>
</li>
<li><p>not</p>
</li>
</ul>
</li>
</ol>
<ol start="3">
<li><p>模糊查询</p>
<ul>
<li><p>like</p>
</li>
<li><p>between and</p>
</li>
<li><p>in</p>
</li>
<li><p>is null</p>
</li>
</ul>
</li>
</ol>
<h4 id="按条件表达式筛选"><a href="#按条件表达式筛选" class="headerlink" title="按条件表达式筛选"></a>按条件表达式筛选</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">select</span></span><br><span class="line"><span class="comment">	查询列表</span></span><br><span class="line"><span class="comment">from</span></span><br><span class="line"><span class="comment">	表名</span></span><br><span class="line"><span class="comment">where</span></span><br><span class="line"><span class="comment">	筛选条件;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">1. 按条件表达式筛选</span><br><span class="line"><span class="comment">#案例1：查询工资&gt;12000的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name, department_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    salary &gt; <span class="number">12000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例2：查询部门编号不等于90号的员工名和部门编号</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name, department_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    department_id &lt;&gt; <span class="number">90</span>;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>





<h4 id="按逻辑表达式筛选"><a href="#按逻辑表达式筛选" class="headerlink" title="按逻辑表达式筛选"></a>按逻辑表达式筛选</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#二、按逻辑表达式筛选</span></span><br><span class="line"><span class="comment">#案例1：查询工资在10000到20000之间的员工名、工资、以及奖金</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name, salary, commission_pct</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    salary &gt;= <span class="number">10000</span> <span class="keyword">AND</span> salary &lt;= <span class="number">20000</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#案例2：查询部门编号不是在90到110之间，或者工资高于15000的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="keyword">NOT</span> (department_id &gt;= <span class="number">90</span></span><br><span class="line">        <span class="keyword">AND</span> department_id &lt;= <span class="number">110</span>)</span><br><span class="line">        <span class="keyword">OR</span> salary &gt; <span class="number">15000</span>;</span><br></pre></td></tr></table></figure>



<h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><ul>
<li>like<ul>
<li>一般和通配符搭配使用</li>
<li>% 任意多个字符，包含0个字符</li>
<li>_ 任意单个字符</li>
</ul>
</li>
<li>Between and<ul>
<li>使用between and可以提高语句的简洁度</li>
<li>包含临界值</li>
<li>两个临界值不要调换顺序</li>
</ul>
</li>
<li>in<ul>
<li>使用in提高语言简洁度</li>
<li>in列表的值类型必须一致</li>
<li>不能搭配通配符使用</li>
</ul>
</li>
<li>Is null<ul>
<li>= 或 &lt;&gt; 不能用于判断null值</li>
<li>is null 或 is not null 仅仅可以判断null值</li>
</ul>
</li>
<li>Is not null</li>
<li>安全等于 &lt;=&gt;<pre><code>- 可以判断null值
- 可以判断普通的数值
- 可读性低</code></pre>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. like</span></span><br><span class="line"><span class="comment">#案例1：查询员工名中包含字符a的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例2：查询员工名第三个字符为n，第五个字符为l的员工名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name, salary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    last_name <span class="keyword">LIKE</span> <span class="string">&#x27;__n_l%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例3：查询员工名中第二个字符为_的员工名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_$_%&#x27;</span> ESCAPE <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. between and</span></span><br><span class="line"><span class="comment">#案例1：查询员工编号在100在120之间的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    employee_id <span class="keyword">BETWEEN</span> <span class="number">100</span> <span class="keyword">AND</span> <span class="number">120</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#3. in</span></span><br><span class="line"><span class="comment">#案例1：查询员工的工种编号是 IT_PROG、AD_VP、AD_PRES</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name, job_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    job_id <span class="keyword">IN</span> (<span class="string">&#x27;IT_PROG&#x27;</span> , <span class="string">&#x27;AD_VP&#x27;</span>, <span class="string">&#x27;AD_PRES&#x27;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">#4. is null</span></span><br><span class="line"><span class="comment">#案例1：查询没有奖金的员工名和奖金率</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name, commission_pct</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    commission_pct <span class="keyword">IS</span> <span class="literal">NULL</span>；</span><br><span class="line">    </span><br><span class="line"><span class="comment">#案例2：查询员工号为176的员工的姓名和部门号和年薪</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name,</span><br><span class="line">    department_id,</span><br><span class="line">    salary * <span class="number">12</span> * (<span class="number">1</span> + <span class="keyword">IFNULL</span>(commission_pct, <span class="number">0</span>)) <span class="keyword">AS</span> 年薪</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    employee_id = <span class="number">176</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210331153257265.png" alt="image-20210331153257265"></p>
<h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><p>语法：</p>
<blockquote>
<p>select 查询列表 </p>
<p>from 表</p>
<p>（where 筛选条件）</p>
<p>order by 排序列表（asc | desc）</p>
</blockquote>
<p>特点：</p>
<ol>
<li>asc代表的是升序，desc降序。默认升序</li>
<li>Order by 支持单个字段、多个字段。表达式、函数、别名</li>
<li>order by子句一般是放在查询语句的最后面，limit子句除外</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例1：按年薪的高低显示员工的信息和年薪</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    *, salary * <span class="number">12</span> * (<span class="number">1</span> + <span class="keyword">IFNULL</span>(commission_pct, <span class="number">0</span>)) 年薪</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary * <span class="number">12</span> * (<span class="number">1</span> + <span class="keyword">IFNULL</span>(commission_pct, <span class="number">0</span>)) <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#案例2：按姓名的长度显示员工的姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">LENGTH</span>(last_name) 字节长度, last_name, salary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">LENGTH</span>(last_name) <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#案例3：查询员工信息，要求先按工资升序，再按员工编号降序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span> , employee_id <span class="keyword">DESC</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>









<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><ul>
<li><p>含义：</p>
<ul>
<li>又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</li>
</ul>
</li>
<li><p>笛卡尔乘积现象：</p>
<ul>
<li>表1 有m行，表2有n行，结果=m*n行</li>
<li>发生原因：没有有效的连接条件</li>
<li>避免方法：添加有效的连接条件</li>
</ul>
</li>
<li><p>分类：</p>
<ul>
<li><p>按年代：</p>
<ul>
<li>sql92标准<ul>
<li>仅仅支持内连接</li>
</ul>
</li>
<li>sql99标准<ul>
<li>支持内连接</li>
<li>支持外连接（仅仅左右）</li>
<li>支持交叉连接</li>
</ul>
</li>
</ul>
</li>
<li><p>按功能：</p>
<ul>
<li><p>内连接</p>
<ul>
<li><p>等值连接</p>
<ol>
<li><p>多表等值连接的结果为多表的交集部分</p>
</li>
<li><p>n表连接，至少需要n-1个连接条件</p>
</li>
<li><p>多表的顺序没有要求</p>
</li>
<li><p>一般需要为表取别名</p>
</li>
<li><p>可以搭配排序分组筛选使用</p>
</li>
</ol>
</li>
<li><p>非等值连接</p>
</li>
<li><p>自连接</p>
</li>
</ul>
</li>
<li><p>外连接</p>
<ul>
<li>左外连接</li>
<li>右外连接</li>
<li>全外连接</li>
</ul>
</li>
<li><p>交叉连接</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="sql92语法"><a href="#sql92语法" class="headerlink" title="sql92语法"></a>sql92语法</h3><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一、sql92标准</span></span><br><span class="line"><span class="comment">#1、等值连接</span></span><br><span class="line"><span class="comment">#案例1：查询女神名和对应的男神名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">name</span>, boyName</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    boys,</span><br><span class="line">    beauty</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    beauty.boyfriend_id = boys.id;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#2. 为表起别名</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">①提高语句的简洁度</span></span><br><span class="line"><span class="comment">②区分多个重名的字段</span></span><br><span class="line"><span class="comment">③如果给表起了别名，则不能用原表名去select，只能用别名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">#案例：查询员工名、工种号、工种名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    e.last_name, e.job_id, j.job_title</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees e,</span><br><span class="line">    jobs j</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    e.job_id = j.job_id;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#案例：查询有奖金的员工名、部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name, department_name, commission_pct</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees e,</span><br><span class="line">    departments d</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    e.department_id = d.department_id</span><br><span class="line">        <span class="keyword">AND</span> e.commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>





<h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例：查询员工的工资和工资级别</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    salary, grade_level</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees e,</span><br><span class="line">    job_grades g</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    salary <span class="keyword">BETWEEN</span> g.lowest_sal <span class="keyword">AND</span> g.highest_sal</span><br><span class="line">        <span class="keyword">AND</span> g.grade_level = <span class="string">&#x27;A&#x27;</span>;</span><br></pre></td></tr></table></figure>





<h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例：查询员工名和上级的名称</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    e.employee_id, e.last_name, m.employee_id, m.last_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees e,</span><br><span class="line">    employees m</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    e.manager_id = m.manager_id;</span><br></pre></td></tr></table></figure>





<h3 id="sql99语法"><a href="#sql99语法" class="headerlink" title="sql99语法"></a>sql99语法</h3><ul>
<li><p>语法：</p>
<blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名 【连接类型】</span><br><span class="line"><span class="keyword">join</span> 表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">on</span> 连接条件</span><br><span class="line">【<span class="keyword">where</span> 筛选条件】</span><br><span class="line">【<span class="keyword">group</span> <span class="keyword">by</span> 分组】</span><br><span class="line">【<span class="keyword">having</span> 筛选条件】</span><br><span class="line">【<span class="keyword">order</span> <span class="keyword">by</span> 排序列表】</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>分类</p>
<ul>
<li>内连接<ul>
<li>inner</li>
</ul>
</li>
<li>外连接<ul>
<li>左外 left 【outter】</li>
<li>右外 right 【outer】</li>
<li>全外 full 【outer】</li>
</ul>
</li>
<li>交叉连接<ul>
<li>cross</li>
</ul>
</li>
</ul>
</li>
<li><p>特点：</p>
<ol>
<li>添加排序、筛选、分组</li>
<li>inner可以省略</li>
<li>筛选条件放在where后面，连接条件放在on后面，提高分离性，方便阅读</li>
<li>inner join连接和sql92语法中的等值连接效果是一样的，都是查询多表的交集</li>
</ol>
</li>
</ul>
<h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><h5 id="等值连接-1"><a href="#等值连接-1" class="headerlink" title="等值连接"></a>等值连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例：查询哪个部门的员工个数&gt;3的部门名和员工个数，并按个数降序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    department_name, <span class="keyword">COUNT</span>(<span class="number">1</span>) 员工个数</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees e</span><br><span class="line">        <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">    departments d <span class="keyword">ON</span> e.department_id = d.department_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) &gt; <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例：查询员工名、部门名、工种名，并按部门名排序（三表连接）</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name, department_name, job_title</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees e</span><br><span class="line">        <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">    departments d <span class="keyword">ON</span> e.department_id = d.department_id</span><br><span class="line">        <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">    jobs j <span class="keyword">ON</span> e.job_id = j.job_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_name <span class="keyword">DESC</span>; </span><br></pre></td></tr></table></figure>





<h5 id="非等值连接-1"><a href="#非等值连接-1" class="headerlink" title="非等值连接"></a>非等值连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例：查询不同工资级别的员工个数&gt;20，按工资级别降序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>), grade_level</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees e</span><br><span class="line">        <span class="keyword">JOIN</span></span><br><span class="line">    job_grades g <span class="keyword">ON</span> e.salary <span class="keyword">BETWEEN</span> g.lowest_sal <span class="keyword">AND</span> g.highest_sal</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> grade_level</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) &gt; <span class="number">20</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> grade_level <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>



<h5 id="自连接-1"><a href="#自连接-1" class="headerlink" title="自连接"></a>自连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询姓名中包含字符k的员工的名字、上级的名字</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    e.last_name, m.last_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees e</span><br><span class="line">        <span class="keyword">JOIN</span></span><br><span class="line">    employees m <span class="keyword">ON</span> e.manager_id = m.manager_id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    e.last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%k%&#x27;</span>;</span><br></pre></td></tr></table></figure>





<h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><ul>
<li>应用场景：用于查询一个表有，另一个表没有的记录</li>
<li>特点：<ol>
<li>外连接的查询结果为主表中的所有记录<ul>
<li>如果从表中有和它匹配的，则显示匹配的值</li>
<li>如果从表中没有和它匹配的，则显示null值</li>
<li>外连接查询结果=内连接结果+主表中有而从表中没有的记录</li>
</ul>
</li>
<li>左外连接， left join左边的是主表；右外连接 right join右边的是主表</li>
<li>左外和右外交换两个表的顺序，可以实现同样的效果</li>
<li>全外连接=内连接的结果（两表交集）+表1有表2没有+表2有表1没有</li>
<li>mysql不支持全外</li>
</ol>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例：查询男朋友不在男神表的女神</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    beauty b</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    boys bo <span class="keyword">ON</span> b.boyfriend_id = bo.id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    bo.id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#案例：查询哪个部门没有员工</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    d.*, e.employee_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    departments d</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    employees e <span class="keyword">ON</span> d.department_id = e.department_id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    e.employee_id <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>





<p>交叉连接</p>
<p>笛卡尔乘积</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    b.*, bo.*</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    beauty b</span><br><span class="line">        <span class="keyword">CROSS</span> <span class="keyword">JOIN</span></span><br><span class="line">    boys bo;</span><br></pre></td></tr></table></figure>



<h4 id="join总结"><a href="#join总结" class="headerlink" title="join总结"></a>join总结</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210402171209479.png" alt="image-20210402171209479"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210402171234476.png" alt="image-20210402171234476"></p>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>含义：</p>
<blockquote>
<p>出现在其他语句中的select语句，称为子查询或内查询。外部的查询语句，称为主查询或外查询</p>
</blockquote>
<p>分类：</p>
<ul>
<li>按子查询出现的位置<ul>
<li>select后面<ul>
<li>仅仅支持标量子查询</li>
</ul>
</li>
<li>from后面<ul>
<li>支持表子查询</li>
</ul>
</li>
<li>where或having后面<ul>
<li><strong>标量子查询</strong></li>
<li><strong>列子查询</strong></li>
<li>行子查询</li>
</ul>
</li>
<li>exists后面（相关子查询）<ul>
<li>表子查询</li>
</ul>
</li>
</ul>
</li>
<li>按结果集的行列数<ul>
<li>标量子查询（结果集只有一行一列）即确定的一个</li>
<li>列子查询（结果集只有一列多行）</li>
<li>行子查询（结果集只有一行多列）</li>
<li>表子查询（结果集一般为多行多列）</li>
</ul>
</li>
</ul>
<h3 id="where或having后面"><a href="#where或having后面" class="headerlink" title="where或having后面"></a>where或having后面</h3><p>特点：</p>
<ol>
<li><p>子查询放在小括号内</p>
</li>
<li><p>子查询一般放在条件的右侧</p>
</li>
<li><p>标量子查询，一般搭配单行操作符使用</p>
<ul>
<li>&lt;  &gt;  &gt;=  &lt;=  =  &lt;&gt; </li>
</ul>
</li>
<li><p>列子查询，一般搭配多行操作符使用</p>
<ul>
<li>in、any、some、all</li>
</ul>
</li>
<li><p>子查询优先主查询生效</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 标量子查询</span></span><br><span class="line"><span class="comment">#案例1：谁的工资比Abel高？</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    salary &gt; (<span class="keyword">SELECT</span> </span><br><span class="line">            salary</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            employees</span><br><span class="line">        <span class="keyword">WHERE</span></span><br><span class="line">            last_name = <span class="string">&#x27;Abel&#x27;</span>);</span><br><span class="line">            </span><br><span class="line"><span class="comment">#案例2：返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id 和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name, job_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    job_id = (<span class="keyword">SELECT</span> </span><br><span class="line">            job_id</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            employees</span><br><span class="line">        <span class="keyword">WHERE</span></span><br><span class="line">            employee_id = <span class="number">141</span>)</span><br><span class="line">        <span class="keyword">AND</span> salary &gt; (<span class="keyword">SELECT</span> </span><br><span class="line">            salary</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            employees</span><br><span class="line">        <span class="keyword">WHERE</span></span><br><span class="line">            employee_id = <span class="number">143</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment">#2. 列子查询</span></span><br><span class="line"><span class="comment">#案例：返回其他部门中比job_id为IT_PROG部门所有工资都低的员工 的员工名、姓名、job_id以及salary</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name, employee_id, job_id, salary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    salary &gt; <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">            salary</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            employees</span><br><span class="line">        <span class="keyword">WHERE</span></span><br><span class="line">            job_id = <span class="string">&#x27;IT_PROG&#x27;</span>)</span><br><span class="line">        <span class="keyword">AND</span> job_id &lt;&gt; <span class="string">&#x27;IT_PROG&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 行子查询（结果集一行多列或多行多列）</span></span><br><span class="line"><span class="comment">#案例：查询员工编号最小并且工资最高的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    (employee_id , salary) = (<span class="keyword">SELECT</span> </span><br><span class="line">            <span class="keyword">MIN</span>(employee_id), <span class="keyword">MAX</span>(salary)</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            employees);</span><br></pre></td></tr></table></figure>





<h3 id="select后面"><a href="#select后面" class="headerlink" title="select后面"></a>select后面</h3><ul>
<li>仅仅支持标量子查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例：查询每个部门的员工数</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    d.*,</span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">            <span class="keyword">COUNT</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            employees e</span><br><span class="line">        <span class="keyword">WHERE</span></span><br><span class="line">            e.department_id = d.department_id) 个数</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    departments d;</span><br></pre></td></tr></table></figure>





<h3 id="from后面"><a href="#from后面" class="headerlink" title="from后面"></a>from后面</h3><ul>
<li>将子查询结果充当一张表，要求必须起别名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例：查询每个部门的平均工资的工资等级</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    ag_dep.*, g.grade_level</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">        <span class="keyword">AVG</span>(salary) ag, department_id</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) ag_dep</span><br><span class="line">        <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">    job_grades g <span class="keyword">ON</span> ag_dep.ag <span class="keyword">BETWEEN</span> lowest_sal <span class="keyword">AND</span> highest_sal;</span><br></pre></td></tr></table></figure>



<h3 id="exists后面-相关子查询"><a href="#exists后面-相关子查询" class="headerlink" title="exists后面(相关子查询)"></a>exists后面(相关子查询)</h3><p>exists (完整的查询语句)</p>
<p>结果：1或0</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例：查询有员工的部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    department_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    departments d</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="keyword">EXISTS</span>( <span class="keyword">SELECT</span> </span><br><span class="line">            *</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            employees e</span><br><span class="line">        <span class="keyword">WHERE</span></span><br><span class="line">            d.department_id = e.department_id);</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    department_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    departments d</span><br><span class="line"><span class="keyword">WHERE</span> department_name</span><br><span class="line">    <span class="keyword">in</span>( <span class="keyword">SELECT</span> </span><br><span class="line">            department_name</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            employees e</span><br><span class="line">        <span class="keyword">WHERE</span></span><br><span class="line">            d.department_id = e.department_id);</span><br><span class="line">            </span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>应用场景：</p>
<p>当要显示的数据，一页显示不全，需要分页提交sql请求</p>
<p>语法：</p>
<p>select 查询列表</p>
<p>【…】</p>
<p>limit offset, size;</p>
<ul>
<li>offset 要显示条目的起始索引（起始索引从0开始）</li>
<li>size要显示的条目个数</li>
</ul>
<p>特点：</p>
<ol>
<li><p>limit语句放在查询语句的最后</p>
</li>
<li><p>公式</p>
<p>要显示的页数page，每页的条目数size</p>
<p>limit (page-1)*size,size;</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">limit</span> <span class="number">0</span>, <span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">limit</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>







<h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p>union 联合 合并</p>
<p>将多条查询语句的结果合并成一个结果</p>
<p>语法：</p>
<p>查询语句1</p>
<p>union</p>
<p>查询语句2</p>
<p>union</p>
<p>…</p>
<p>应用场景：</p>
<p>要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时</p>
<p>特点：</p>
<ol>
<li>要求多条查询语句的查询列数是一致的</li>
<li>要求多条查询语句的查询的每一列的类型和顺序最好一致</li>
<li>union关键字默认去重，如果使用union all可以包含重复项</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例：查询部门编号&gt;90或邮箱包含a的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span> <span class="keyword">OR</span> department_id &gt; <span class="number">90</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> email <span class="keyword">like</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> department_id&gt;<span class="number">90</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>java泛型</title>
    <url>/posts/ee13b5e7/</url>
    <content><![CDATA[<p>为什么要有泛型</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210311102556143.png" alt="image-20210311102556143"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210311103023954.png" alt="image-20210311103023954"></p>
<h2 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h2><ol>
<li>jdk 5.0新增的特性</li>
</ol>
<ol start="2">
<li><p>在集合中使用泛型：</p>
<p>总结：</p>
<p>① 集合接口或集合类在jdk5.0时都修改为带泛型的结构。</p>
<p>② 在实例化集合类时，可以指明具体的泛型类型</p>
<p>③ 指明完以后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。</p>
<p>比如：add(E e)  —&gt;实例化以后：add(Integer e)</p>
<p>④ 注意点：泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换</p>
<p>⑤ 如果实例化时，没有指明泛型的类型。默认类型为java.lang.Object类型。</p>
</li>
</ol>
<ol start="3">
<li>如何自定义泛型结构：泛型类、泛型接口；泛型方法。见 GenericTest1.java</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 上午 9:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在集合中使用泛型之前的情况：</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//需求：存放学生的成绩</span></span><br><span class="line">        list.add(<span class="number">78</span>);</span><br><span class="line">        list.add(<span class="number">76</span>);</span><br><span class="line">        list.add(<span class="number">89</span>);</span><br><span class="line">        list.add(<span class="number">88</span>);</span><br><span class="line">        <span class="comment">//问题一：类型不安全</span></span><br><span class="line"><span class="comment">//        list.add(&quot;Tom&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Object score : list)&#123;</span><br><span class="line">            <span class="comment">//问题二：强转时，可能出现ClassCastException</span></span><br><span class="line">            <span class="keyword">int</span> stuScore = (Integer) score;</span><br><span class="line"></span><br><span class="line">            System.out.println(stuScore);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在集合中使用泛型的情况：以ArrayList为例</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ArrayList&lt;Integer&gt; list =  <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="number">78</span>);</span><br><span class="line">        list.add(<span class="number">87</span>);</span><br><span class="line">        list.add(<span class="number">99</span>);</span><br><span class="line">        list.add(<span class="number">65</span>);</span><br><span class="line">        <span class="comment">//编译时，就会进行类型检查，保证数据的安全</span></span><br><span class="line"><span class="comment">//        list.add(&quot;Tom&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//        for(Integer score : list)&#123;</span></span><br><span class="line"><span class="comment">//            //避免了强转操作</span></span><br><span class="line"><span class="comment">//            int stuScore = score;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            System.out.println(stuScore);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> stuScore = iterator.next();</span><br><span class="line">            System.out.println(stuScore);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在集合中使用泛型的情况：以HashMap为例</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        Map&lt;String,Integer&gt; map = new HashMap&lt;String,Integer&gt;();</span></span><br><span class="line">        <span class="comment">//jdk7新特性：类型推断</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;Tom&quot;</span>,<span class="number">87</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Jerry&quot;</span>,<span class="number">87</span>);</span><br><span class="line">        map.put(<span class="string">&quot;Jack&quot;</span>,<span class="number">67</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        map.put(123,&quot;ABC&quot;);</span></span><br><span class="line">        <span class="comment">//泛型的嵌套</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entry = map.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entry.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; e = iterator.next();</span><br><span class="line">            String key = e.getKey();</span><br><span class="line">            Integer value = e.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;----&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="实例举例"><a href="#实例举例" class="headerlink" title="实例举例"></a>实例举例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个Employee类。</span></span><br><span class="line"><span class="comment"> 该类包含：private成员变量name,age,birthday，其中 birthday 为 MyDate 类的对象；</span></span><br><span class="line"><span class="comment"> 并为每一个属性定义 getter, setter 方法；</span></span><br><span class="line"><span class="comment"> 并重写 toString 方法输出 name, age, birthday</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 上午 10:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Employee</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> MyDate birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">int</span> age, MyDate birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyDate <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(MyDate birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指明泛型时的写法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Employee o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(o.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有指明泛型时的写法</span></span><br><span class="line">    <span class="comment">//按 name 排序</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public int compareTo(Object o) &#123;</span></span><br><span class="line"><span class="comment">//        if(o instanceof Employee)&#123;</span></span><br><span class="line"><span class="comment">//            Employee e = (Employee)o;</span></span><br><span class="line"><span class="comment">//            return this.name.compareTo(e.name);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">////        return 0;</span></span><br><span class="line"><span class="comment">//        throw new RuntimeException(&quot;传入的数据类型不一致！&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyDate类包含:</span></span><br><span class="line"><span class="comment"> private成员变量year,month,day；并为每一个属性定义 getter, setter 方法；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 上午 10:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDate</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">MyDate</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDate</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">        <span class="keyword">this</span>.month = month;</span><br><span class="line">        <span class="keyword">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonth</span><span class="params">(<span class="keyword">int</span> month)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.month = month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDay</span><span class="params">(<span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyDate&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;year=&quot;</span> + year +</span><br><span class="line">                <span class="string">&quot;, month=&quot;</span> + month +</span><br><span class="line">                <span class="string">&quot;, day=&quot;</span> + day +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public int compareTo(Object o) &#123;</span></span><br><span class="line"><span class="comment">//        if(o instanceof MyDate)&#123;</span></span><br><span class="line"><span class="comment">//            MyDate m = (MyDate)o;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            //比较年</span></span><br><span class="line"><span class="comment">//            int minusYear = this.getYear() - m.getYear();</span></span><br><span class="line"><span class="comment">//            if(minusYear != 0)&#123;</span></span><br><span class="line"><span class="comment">//                return minusYear;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            //比较月</span></span><br><span class="line"><span class="comment">//            int minusMonth = this.getMonth() - m.getMonth();</span></span><br><span class="line"><span class="comment">//            if(minusMonth != 0)&#123;</span></span><br><span class="line"><span class="comment">//                return minusMonth;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            //比较日</span></span><br><span class="line"><span class="comment">//            return this.getDay() - m.getDay();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        throw new RuntimeException(&quot;传入的数据类型不一致！&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(MyDate m)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//比较年</span></span><br><span class="line">        <span class="keyword">int</span> minusYear = <span class="keyword">this</span>.getYear() - m.getYear();</span><br><span class="line">        <span class="keyword">if</span>(minusYear != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> minusYear;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//比较月</span></span><br><span class="line">        <span class="keyword">int</span> minusMonth = <span class="keyword">this</span>.getMonth() - m.getMonth();</span><br><span class="line">        <span class="keyword">if</span>(minusMonth != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> minusMonth;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//比较日</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getDay() - m.getDay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建该类的 5 个对象，并把这些对象放入 TreeSet 集合中（下一章：TreeSet 需使用泛型来定义）</span></span><br><span class="line"><span class="comment"> 分别按以下两种方式对集合中的元素进行排序，并遍历输出：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 1). 使Employee 实现 Comparable 接口，并按 name 排序</span></span><br><span class="line"><span class="comment"> 2). 创建 TreeSet 时传入 Comparator对象，按生日日期的先后排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 上午 10:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//问题二：按生日日期的先后排序。</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        TreeSet&lt;Employee&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Employee&gt;() &#123;</span><br><span class="line">            <span class="comment">//使用泛型以后的写法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Employee o1, Employee o2)</span> </span>&#123;</span><br><span class="line">                MyDate b1 = o1.getBirthday();</span><br><span class="line">                MyDate b2 = o2.getBirthday();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> b1.compareTo(b2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//使用泛型之前的写法</span></span><br><span class="line">            <span class="comment">//@Override</span></span><br><span class="line"><span class="comment">//            public int compare(Object o1, Object o2) &#123;</span></span><br><span class="line"><span class="comment">//                if(o1 instanceof Employee &amp;&amp; o2 instanceof Employee)&#123;</span></span><br><span class="line"><span class="comment">//                    Employee e1 = (Employee)o1;</span></span><br><span class="line"><span class="comment">//                    Employee e2 = (Employee)o2;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                    MyDate b1 = e1.getBirthday();</span></span><br><span class="line"><span class="comment">//                    MyDate b2 = e2.getBirthday();</span></span><br><span class="line"><span class="comment">//                    //方式一：</span></span><br><span class="line"><span class="comment">////                    //比较年</span></span><br><span class="line"><span class="comment">////                    int minusYear = b1.getYear() - b2.getYear();</span></span><br><span class="line"><span class="comment">////                    if(minusYear != 0)&#123;</span></span><br><span class="line"><span class="comment">////                        return minusYear;</span></span><br><span class="line"><span class="comment">////                    &#125;</span></span><br><span class="line"><span class="comment">////                    //比较月</span></span><br><span class="line"><span class="comment">////                    int minusMonth = b1.getMonth() - b2.getMonth();</span></span><br><span class="line"><span class="comment">////                    if(minusMonth != 0)&#123;</span></span><br><span class="line"><span class="comment">////                        return minusMonth;</span></span><br><span class="line"><span class="comment">////                    &#125;</span></span><br><span class="line"><span class="comment">////                    //比较日</span></span><br><span class="line"><span class="comment">////                    return b1.getDay() - b2.getDay();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                    //方式二：</span></span><br><span class="line"><span class="comment">//                    return b1.compareTo(b2);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">////                return 0;</span></span><br><span class="line"><span class="comment">//                throw new RuntimeException(&quot;传入的数据类型不一致！&quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Employee e1 = <span class="keyword">new</span> Employee(<span class="string">&quot;liudehua&quot;</span>,<span class="number">55</span>,<span class="keyword">new</span> MyDate(<span class="number">1965</span>,<span class="number">5</span>,<span class="number">4</span>));</span><br><span class="line">        Employee e2 = <span class="keyword">new</span> Employee(<span class="string">&quot;zhangxueyou&quot;</span>,<span class="number">43</span>,<span class="keyword">new</span> MyDate(<span class="number">1987</span>,<span class="number">5</span>,<span class="number">4</span>));</span><br><span class="line">        Employee e3 = <span class="keyword">new</span> Employee(<span class="string">&quot;guofucheng&quot;</span>,<span class="number">44</span>,<span class="keyword">new</span> MyDate(<span class="number">1987</span>,<span class="number">5</span>,<span class="number">9</span>));</span><br><span class="line">        Employee e4 = <span class="keyword">new</span> Employee(<span class="string">&quot;liming&quot;</span>,<span class="number">51</span>,<span class="keyword">new</span> MyDate(<span class="number">1954</span>,<span class="number">8</span>,<span class="number">12</span>));</span><br><span class="line">        Employee e5 = <span class="keyword">new</span> Employee(<span class="string">&quot;liangzhaowei&quot;</span>,<span class="number">21</span>,<span class="keyword">new</span> MyDate(<span class="number">1978</span>,<span class="number">12</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        set.add(e1);</span><br><span class="line">        set.add(e2);</span><br><span class="line">        set.add(e3);</span><br><span class="line">        set.add(e4);</span><br><span class="line">        set.add(e5);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Employee&gt; iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//问题一：使用自然排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeSet&lt;Employee&gt; set = <span class="keyword">new</span> TreeSet&lt;Employee&gt;();</span><br><span class="line"></span><br><span class="line">        Employee e1 = <span class="keyword">new</span> Employee(<span class="string">&quot;liudehua&quot;</span>,<span class="number">55</span>,<span class="keyword">new</span> MyDate(<span class="number">1965</span>,<span class="number">5</span>,<span class="number">4</span>));</span><br><span class="line">        Employee e2 = <span class="keyword">new</span> Employee(<span class="string">&quot;zhangxueyou&quot;</span>,<span class="number">43</span>,<span class="keyword">new</span> MyDate(<span class="number">1987</span>,<span class="number">5</span>,<span class="number">4</span>));</span><br><span class="line">        Employee e3 = <span class="keyword">new</span> Employee(<span class="string">&quot;guofucheng&quot;</span>,<span class="number">44</span>,<span class="keyword">new</span> MyDate(<span class="number">1987</span>,<span class="number">5</span>,<span class="number">9</span>));</span><br><span class="line">        Employee e4 = <span class="keyword">new</span> Employee(<span class="string">&quot;liming&quot;</span>,<span class="number">51</span>,<span class="keyword">new</span> MyDate(<span class="number">1954</span>,<span class="number">8</span>,<span class="number">12</span>));</span><br><span class="line">        Employee e5 = <span class="keyword">new</span> Employee(<span class="string">&quot;liangzhaowei&quot;</span>,<span class="number">21</span>,<span class="keyword">new</span> MyDate(<span class="number">1978</span>,<span class="number">12</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        set.add(e1);</span><br><span class="line">        set.add(e2);</span><br><span class="line">        set.add(e3);</span><br><span class="line">        set.add(e4);</span><br><span class="line">        set.add(e5);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Employee&gt; iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Employee employee = iterator.next();</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210311112959243.png" alt="image-20210311112959243"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210311113401792.png" alt="image-20210311113401792"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line"> * 自定义泛型类</span><br><span class="line"> * <span class="meta">@author</span> shkstart</span><br><span class="line"> * <span class="meta">@create</span> <span class="number">2019</span> 上午 <span class="number">11</span>:<span class="number">05</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    String orderName;</span><br><span class="line">    <span class="keyword">int</span> orderId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类的内部结构就可以使用类的泛型</span></span><br><span class="line"></span><br><span class="line">    T orderT;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        T[] arr = new T[10];</span></span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line">        T[] arr = (T[]) <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(String orderName,<span class="keyword">int</span> orderId,T orderT)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.orderT = orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如下的三个方法都不是泛型方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getOrderT</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderT</span><span class="params">(T orderT)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderT = orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Order&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;orderName=&#x27;&quot;</span> + orderName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, orderId=&quot;</span> + orderId +</span><br><span class="line">                <span class="string">&quot;, orderT=&quot;</span> + orderT +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态方法中不能使用类的泛型。</span></span><br><span class="line"><span class="comment">//    public static void show(T orderT)&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(orderT);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        try&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;catch(T t)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系。</span></span><br><span class="line">    <span class="comment">//换句话说，泛型方法所属的类是不是泛型类都没有关系。</span></span><br><span class="line">    <span class="comment">//泛型方法，可以声明为静态的。原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt;  <span class="function">List&lt;E&gt; <span class="title">copyFromArrayToList</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(E e : arr)&#123;</span><br><span class="line">            list.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 如何自定义泛型结构：泛型类、泛型接口；泛型方法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 关于自定义泛型类、泛型接口：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 上午 11:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果定义了泛型类，实例化没有指明类的泛型，则认为此泛型类型为Object类型</span></span><br><span class="line">        <span class="comment">//要求：如果大家定义了类是带泛型的，建议在实例化时要指明类的泛型。</span></span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setOrderT(<span class="number">123</span>);</span><br><span class="line">        order.setOrderT(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建议：实例化时指明类的泛型</span></span><br><span class="line">        Order&lt;String&gt; order1 = <span class="keyword">new</span> Order&lt;String&gt;(<span class="string">&quot;orderAA&quot;</span>,<span class="number">1001</span>,<span class="string">&quot;order:AA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        order1.setOrderT(<span class="string">&quot;AA:hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SubOrder sub1 = <span class="keyword">new</span> SubOrder();</span><br><span class="line">        <span class="comment">//由于子类在继承带泛型的父类时，指明了泛型类型。则实例化子类对象时，不再需要指明泛型。</span></span><br><span class="line">        sub1.setOrderT(<span class="number">1122</span>);</span><br><span class="line"></span><br><span class="line">        SubOrder1&lt;String&gt; sub2 = <span class="keyword">new</span> SubOrder1&lt;&gt;();</span><br><span class="line">        sub2.setOrderT(<span class="string">&quot;order2...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//泛型不同的引用不能相互赋值。</span></span><br><span class="line"><span class="comment">//        list1 = list2;</span></span><br><span class="line"></span><br><span class="line">        Person p1 = <span class="keyword">null</span>;</span><br><span class="line">        Person p2 = <span class="keyword">null</span>;</span><br><span class="line">        p1 = p2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试泛型方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Order&lt;String&gt; order = <span class="keyword">new</span> Order&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="comment">//泛型方法在调用时，指明泛型参数的类型。</span></span><br><span class="line">        List&lt;Integer&gt; list = order.copyFromArrayToList(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubOrder</span> <span class="keyword">extends</span> <span class="title">Order</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;<span class="comment">//SubOrder:不是泛型类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">copyFromArrayToList</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(E e : arr)&#123;</span><br><span class="line">            list.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubOrder1</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Order</span>&lt;<span class="title">T</span>&gt; </span>&#123;<span class="comment">//SubOrder1&lt;T&gt;:仍然是泛型类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="泛型类和泛型方法使用情景"><a href="#泛型类和泛型方法使用情景" class="headerlink" title="泛型类和泛型方法使用情景"></a>泛型类和泛型方法使用情景</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDAO</span> <span class="keyword">extends</span> <span class="title">DAO</span>&lt;<span class="title">Customer</span>&gt;</span>&#123;<span class="comment">//只能操作某一个表的DAO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAO</span>&lt;<span class="title">T</span>&gt; </span>&#123;<span class="comment">//表的共性操作的DAO</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加一条记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一条记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改一条记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> index,T t)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询一条记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getIndex</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询多条记录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getForList</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//泛型方法</span></span><br><span class="line">    <span class="comment">//举例：获取表中一共有多少条记录？获取最大的员工入职时间？</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">E <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAOTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CustomerDAO dao1 = <span class="keyword">new</span> CustomerDAO();</span><br><span class="line"></span><br><span class="line">        dao1.add(<span class="keyword">new</span> Customer());</span><br><span class="line">        List&lt;Customer&gt; list = dao1.getForList(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        StudentDAO dao2 = <span class="keyword">new</span> StudentDAO();</span><br><span class="line">        Student student = dao2.getIndex(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="继承与通配符"><a href="#继承与通配符" class="headerlink" title="继承与通配符"></a>继承与通配符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 泛型在继承方面的体现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2. 通配符的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 下午 2:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 泛型在继承方面的体现</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      虽然类A是类B的父类，但是G&lt;A&gt; 和G&lt;B&gt;二者不具备子父类关系，二者是并列关系。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       补充：类A是类B的父类，A&lt;G&gt; 是 B&lt;G&gt; 的父类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        String str = <span class="keyword">null</span>;</span><br><span class="line">        obj = str;</span><br><span class="line"></span><br><span class="line">        Object[] arr1 = <span class="keyword">null</span>;</span><br><span class="line">        String[] arr2 = <span class="keyword">null</span>;</span><br><span class="line">        arr1 = arr2;</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        Date date = new Date();</span></span><br><span class="line"><span class="comment">//        str = date;</span></span><br><span class="line">        List&lt;Object&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//此时的list1和list2的类型不具有子父类关系</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        list1 = list2;</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        反证法：</span></span><br><span class="line"><span class="comment">        假设list1 = list2;</span></span><br><span class="line"><span class="comment">           list1.add(123);导致混入非String的数据。出错。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        show(list1);</span><br><span class="line">        show1(list2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(List&lt;Object&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        AbstractList&lt;String&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList&lt;String&gt; list3 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        list1 = list3;</span><br><span class="line">        list2 = list3;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list4 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    2. 通配符的使用</span></span><br><span class="line"><span class="comment">       通配符：?</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       类A是类B的父类，G&lt;A&gt;和G&lt;B&gt;是没有关系的，二者共同的父类是：G&lt;?&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;?&gt; list = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        list = list1;</span><br><span class="line">        list = list2;</span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line"><span class="comment">//        print(list1);</span></span><br><span class="line"><span class="comment">//        print(list2);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        List&lt;String&gt; list3 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list3.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        list3.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        list3.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        list = list3;</span><br><span class="line">        <span class="comment">//添加(写入)：对于List&lt;?&gt;就不能向其内部添加数据。</span></span><br><span class="line">        <span class="comment">//除了添加null之外。</span></span><br><span class="line"><span class="comment">//        list.add(&quot;DD&quot;);</span></span><br><span class="line"><span class="comment">//        list.add(&#x27;?&#x27;);</span></span><br><span class="line"></span><br><span class="line">        list.add(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取(读取)：允许读取数据，读取的数据类型为Object。</span></span><br><span class="line">        Object o = list.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(List&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">        Iterator&lt;?&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            Object obj = iterator.next();</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    3.有限制条件的通配符的使用。</span></span><br><span class="line"><span class="comment">        ? extends A:</span></span><br><span class="line"><span class="comment">                G&lt;? extends A&gt; 可以作为G&lt;A&gt;和G&lt;B&gt;的父类，其中B是A的子类。A是上界</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ? super A:</span></span><br><span class="line"><span class="comment">                G&lt;? super A&gt; 可以作为G&lt;A&gt;和G&lt;B&gt;的父类，其中B是A的父类。A是下界</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;? extends Person&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;? <span class="keyword">super</span> Person&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        List&lt;Person&gt; list4 = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        List&lt;Object&gt; list5 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">        list1 = list3;</span><br><span class="line">        list1 = list4;</span><br><span class="line"><span class="comment">//        list1 = list5;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        list2 = list3;</span></span><br><span class="line">        list2 = list4;</span><br><span class="line">        list2 = list5;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取数据：</span></span><br><span class="line">        list1 = list3;</span><br><span class="line">        Person p = list1.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line">        <span class="comment">//Student s = list1.get(0);</span></span><br><span class="line"></span><br><span class="line">        list2 = list4;</span><br><span class="line">        Object obj = list2.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">////编译不通过</span></span><br><span class="line"><span class="comment">//        Person obj = list2.get(0);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入数据：</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        list1.add(new Student());父类不能赋值给子类，？可能是通配为 子类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line">        list2.add(<span class="keyword">new</span> Person());</span><br><span class="line">        list2.add(<span class="keyword">new</span> Student());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>java集合</title>
    <url>/posts/4b0d9081/</url>
    <content><![CDATA[<h1 id="集合框架的概述"><a href="#集合框架的概述" class="headerlink" title="集合框架的概述"></a>集合框架的概述</h1><ol>
<li><p>集合、数组都是对多个数据进行存储操作的结构，简称<strong>java容器</strong>。</p>
<p>说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（.txt  .jpg  数据库中）</p>
</li>
<li><p>数组在储存多个数据方面的特点</p>
<ul>
<li>一旦初始化后，其长度就确定了</li>
<li>数组一旦定义好，其元素的类型就确定了，只能操作指定类型的数据了。比如：String[] arr; int[] arr</li>
</ul>
</li>
<li><p>数组在存储多个数据方面的缺点：</p>
<ul>
<li>一旦初始化后，长度不可修改</li>
<li>数组中提供的方法非常有限，对于添加。删除。插入数据等操作，非常不便</li>
<li>获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用</li>
<li>数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。</li>
</ul>
</li>
</ol>
<h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><ul>
<li>collection接口：单列集合，用来存储一个一个的对象<ul>
<li>List接口：存储有序的、可重复的数据。–动态数组<ul>
<li>ArrayList、</li>
<li>LinkedList、</li>
<li>Vector</li>
</ul>
</li>
<li>Set接口：存储无序的、不可重复的数据。–高中讲的集合（无序，确定，互异）<ul>
<li>HashSet</li>
<li>LinkedHashSet</li>
<li>TreeSet</li>
</ul>
</li>
</ul>
</li>
<li>Mao接口：双列集合，用来存储一对（key-value）一对的数据 –高中函数<ul>
<li>HashMap</li>
<li>LinkedHashMap</li>
<li>TreeMap</li>
<li>HashTable</li>
<li>ProperTies</li>
</ul>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210222113823252.png" alt="image-20210222113823252"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210222113833210.png" alt="image-20210222113833210"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210222113849403.png" alt="image-20210222113849403"></p>
<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><h2 id="Collection接口中的方法的使用"><a href="#Collection接口中的方法的使用" class="headerlink" title="Collection接口中的方法的使用"></a>Collection接口中的方法的使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AAA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add(Object e) ：将元素e添加到集合coll中</span></span><br><span class="line">        coll.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);   <span class="comment">//自动装箱</span></span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//size() ：获取添加的元素的个数</span></span><br><span class="line">        System.out.println(coll.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//addAll(Collection coll1) ：将从coll1集合中的元素添加到coll中</span></span><br><span class="line">        Collection coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll1.add(<span class="number">456</span>);</span><br><span class="line">        coll1.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        coll.addAll(coll1);</span><br><span class="line"></span><br><span class="line">        System.out.println(coll.size());</span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//clear()：清空集合元素</span></span><br><span class="line">        coll.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//isEmpty：判断当前集合是否为空</span></span><br><span class="line">        System.out.println(coll.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210301192653535.png" alt="image-20210301192653535"></p>
<p>向Collection接口的实现类的对象中添加数据obj时，要求obj所在类要重写equals()。</p>
<blockquote>
<ol>
<li>contains(Object obj)：判断当前集合中是否包含obj</li>
<li>containsAll(Collection coll1)：判断形参coll1中的所有元素是否存在于当前集合。</li>
<li>remove(Object obj)：从当前集合中移出obj元素</li>
<li>removeAll(Collection coll1)：差集：从当前集合中移出coll1中的所有元素。</li>
<li>retainAll（Collection coll1）：交集：获取当前集合和coll1集合的交集，并返回给当前集合</li>
<li>equals（Object obj）：要想返回true，需要当前集合和形参元素都相同</li>
<li>hashCode()：返回当前对象的哈希值</li>
<li>toArray()：集合转换为数组</li>
<li>asList()：数组转换为集合，Arrays类的静态方法</li>
<li>Iterator()：返回Iterator接口的实例，用于遍历集合元素。</li>
</ol>
</blockquote>
<h2 id="集合元素的遍历操作，使用迭代器iterator接口"><a href="#集合元素的遍历操作，使用迭代器iterator接口" class="headerlink" title="集合元素的遍历操作，使用迭代器iterator接口"></a>集合元素的遍历操作，使用迭代器iterator接口</h2><ol>
<li>内部的方法：hasNext()和next()</li>
<li>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前</li>
<li>内部定义了remove()，可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()。如果还未调用next()或在上一次调用next方法之后已经调用了remove方法，再调用remove都会报IllegalStateException</li>
</ol>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210302151759585.png" alt="image-20210302151759585"></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AAA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add(Object e) ：将元素e添加到集合coll中</span></span><br><span class="line">        coll.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);   <span class="comment">//自动装箱</span></span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">        <span class="comment">//报异常：NoSuchElementException</span></span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：不推荐</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; coll.size(); i++) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式三：推荐</span></span><br><span class="line">      	<span class="comment">//hasNext()：判断是否还有下一个元素</span></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">          <span class="comment">//next()：①指针下移 ②将下移以后集合位置上的元素返回</span></span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//错误方式一：</span></span><br><span class="line">        <span class="keyword">while</span> ((iterator.next()) != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//错误方式二：</span></span><br><span class="line">        <span class="keyword">while</span> (coll.iterator().hasNext()) &#123;</span><br><span class="line">            System.out.println(coll.iterator().next());</span><br><span class="line">        &#125;</span><br><span class="line"> 				<span class="comment">//删除集合中『Tom』</span></span><br><span class="line">        Iterator iterator = coll.iterator(); <span class="comment">//必须新定义，从头开始遍历</span></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">            Object obj = iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;Tom&quot;</span>.equals(obj)) &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="使用foreach循环遍历"><a href="#使用foreach循环遍历" class="headerlink" title="使用foreach循环遍历"></a>使用foreach循环遍历</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AAA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add(Object e) ：将元素e添加到集合coll中</span></span><br><span class="line">        coll.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);   <span class="comment">//自动装箱</span></span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for(集合元素的类型 局部变量 : 集合对象)。；内部仍然调用了迭代器</span></span><br><span class="line">        <span class="keyword">for</span> (Object obj :</span><br><span class="line">                coll) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AAA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String [] arr = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;MM&quot;</span>, <span class="string">&quot;MM&quot;</span>, <span class="string">&quot;MM&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：普通for赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = <span class="string">&quot;GG&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：增强for循环</span></span><br><span class="line">        <span class="keyword">for</span> (String s :</span><br><span class="line">             arr ) &#123;</span><br><span class="line">            s = <span class="string">&quot;GG&quot;</span>;</span><br><span class="line">            <span class="comment">//新定义String变量，不影响原来的</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Collection子接口：List接口"><a href="#Collection子接口：List接口" class="headerlink" title="Collection子接口：List接口"></a>Collection子接口：List接口</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210302164453636.png" alt="image-20210302164453636"></p>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>ArrayList、LinkedList、Vector三者的异同？</p>
<ul>
<li>同：三个类都是实现了List接口，存储数据的特点相同：存储有序的、可重复的数据</li>
<li>异：<ul>
<li>ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[]存储</li>
<li>LinkedList：对于频繁的插入和删除操作，使用此类效率比ArrayList高；底层使用双向链表存储</li>
<li>Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[]存储</li>
</ul>
</li>
</ul>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="ArrayList源码分析："><a href="#ArrayList源码分析：" class="headerlink" title="ArrayList源码分析："></a>ArrayList源码分析：</h3><h4 id="Jdk-7-情况下："><a href="#Jdk-7-情况下：" class="headerlink" title="Jdk 7 情况下："></a>Jdk 7 情况下：</h4><p>ArrayList list = new ArrayList()；//底层创建了长度是10的Object[]数组elementData</p>
<p>list.add(123);//elementData[0] = new Integer(123);</p>
<p>…</p>
<p>List.add(11);//如果此次添加导致底层elementData数组容量不够，则扩容。默认情况下，扩容为原来的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</p>
<p><strong>结论</strong>：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)</p>
<h4 id="jdk-8-中ArrayList的变化："><a href="#jdk-8-中ArrayList的变化：" class="headerlink" title="jdk 8 中ArrayList的变化："></a>jdk 8 中ArrayList的变化：</h4><p>ArrayList list = new ArrayList()；//底层Object[] elementData初始化为{}。并没有创建长度为10的数组。</p>
<p>list.add(123);//第一次调用add()时，底层才创建了长度为10的数组，并将数据123添加到elementData</p>
<p>…</p>
<p>后续的添加和扩容操作与jdk 7 无异。</p>
<p><strong>结论</strong>：jdk7中的ArrayList的对象的创建类似于单例模式的饿汉式，而jdk8中的对象创建类似于单例模式中的懒汉式，节省内存</p>
<h3 id="LinkedList源码分析"><a href="#LinkedList源码分析" class="headerlink" title="LinkedList源码分析"></a>LinkedList源码分析</h3><p>LinkedList list = new LinkedList(); 内部声明了Node类型的first和last属性，默认值为null</p>
<p>list.add(123);将123封装到Node中，创建了Node对象。</p>
<h3 id="Vector源码分析"><a href="#Vector源码分析" class="headerlink" title="Vector源码分析"></a>Vector源码分析</h3><p>Jdk7 和jdk 8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组，在扩容方面，默认扩容为原来的数组长度的2倍。</p>
<h2 id="List接口中的常用方法"><a href="#List接口中的常用方法" class="headerlink" title="List接口中的常用方法"></a>List接口中的常用方法</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210303191937962.png" alt="image-20210303191937962"></p>
<p>常用方法：</p>
<ul>
<li>增：add(Object obj)</li>
<li>删：remove(int  index) / remove(Object obj)</li>
<li>改：set(int index, Object obj)</li>
<li>查：get(int index)</li>
<li>插：add(int index, Object obj)</li>
<li>长度：size()</li>
<li>遍历：①Iterator迭代器方式；②增强for循环；③普通循环</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210303194056188.png" alt="image-20210303194056188"></p>
<p>区分List中remove(int index)和remove(Object obj)</p>
<p>//list.remove(new Integer(2))</p>
<h2 id="Collection子接口：Set接口"><a href="#Collection子接口：Set接口" class="headerlink" title="Collection子接口：Set接口"></a>Collection子接口：Set接口</h2><p>set接口的框架：</p>
<ul>
<li>collection接口：单列集合，用来存储一个一个的对象<ul>
<li>Set接口：存储无序的、不可重复的数据。–高中讲的集合（无序，确定，互异）<ul>
<li>HashSet：作为Set接口的主要实现类；线程不安全的；可以储存null值</li>
<li>LinkedHashSet：作为HashSet的子类；遍历其内部数据时，可以按照添加的顺序遍历</li>
<li>TreeSet：可以按照添加对象的指定属性，进行排序。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Set接口中没有额外定义的新的方法，都是Collection里的。</p>
<p>要求：向Set中添加的数据，其所在的类一定要重写equals()和hashCode()。重写的quals()和hashCode()尽可能保持一致性。</p>
<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ol>
<li>无序性：不等于随机性。储存的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值添加的。</li>
<li>不可重复性：保证添加的元素按照equals()判断时，不能返回true。即相同的元素只能添加一个</li>
</ol>
<p>添加元素的过程：</p>
<p>我们向HashSet中添加元素a，首先调用元素a所在类的hashCode()方法，计算元素a的哈西值，此哈希值接着通过某种算法计算出在HashSet底层数组中的存放位置（即为：索引位置），判断数组此位置上是否已经有元素。</p>
<p>如果此位置上没有其他元素，则元素a添加成功。</p>
<p>如果此位置上有其他元素b（或以链表形式存在多个元素），则比较元素a与元素b的hash值。</p>
<ul>
<li>如果hash值不相同，则元素a添加成功。</li>
<li>如果hash值相同，进而需要调用元素a所在类的equals()方法：<ul>
<li>equals()返回true，元素a添加失败。</li>
<li>equals()返回false，则元素a添加成功。</li>
<li>七上八下</li>
</ul>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210303204141855.png" alt="image-20210303204141855"></p>
<p>HashSet底层：数组+链表的结构</p>
<h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LinkedHashSet的使用</span></span><br><span class="line"><span class="comment">//LinkedHashSet作为HashSet的子类，在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个</span></span><br><span class="line"><span class="comment">//数据和后一个数据。</span></span><br><span class="line"><span class="comment">//优点：对于频繁的遍历操作，LinkedHashSet效率高于HashSet</span></span><br><span class="line">@Test</span><br><span class="line">public <span class="keyword">void</span> <span class="function"><span class="title">test2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">Set</span> set = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">    set.add(<span class="number">456</span>);</span><br><span class="line">    set.add(<span class="number">123</span>);</span><br><span class="line">    set.add(<span class="number">123</span>);</span><br><span class="line">    set.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">    set.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">    Iterator iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.向TreeSet中添加的数据，要求是相同类的对象。</span></span><br><span class="line"><span class="comment">    2.两种排序方式：自然排序（实现Comparable接口） 和 定制排序（Comparator）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals().</span></span><br><span class="line"><span class="comment">    4.定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals().</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//失败：不能添加不同类的对象</span></span><br><span class="line"><span class="comment">//        set.add(123);</span></span><br><span class="line"><span class="comment">//        set.add(456);</span></span><br><span class="line"><span class="comment">//        set.add(&quot;AA&quot;);   ！！！</span></span><br><span class="line"><span class="comment">//        set.add(new User(&quot;Tom&quot;,12));</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//举例一：</span></span><br><span class="line"><span class="comment">//        set.add(34);</span></span><br><span class="line"><span class="comment">//        set.add(-34);</span></span><br><span class="line"><span class="comment">//        set.add(43);</span></span><br><span class="line"><span class="comment">//        set.add(11);</span></span><br><span class="line"><span class="comment">//        set.add(8);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例二：</span></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jim&quot;</span>,<span class="number">2</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mike&quot;</span>,<span class="number">65</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">33</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Comparator com = <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="comment">//按照年龄从小到大排列。定制排序</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    User u1 = (User)o1;</span><br><span class="line">                    User u2 = (User)o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的数据类型不匹配&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet(com);</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jim&quot;</span>,<span class="number">2</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mike&quot;</span>,<span class="number">65</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mary&quot;</span>,<span class="number">33</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">33</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User equals()....&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        User user = (User) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != user.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(user.name) : user.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123; <span class="comment">//return name.hashCode() + age;</span></span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照姓名从大到小排列,年龄从小到大排列。二级排序</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User user = (User)o;</span><br><span class="line"><span class="comment">//            return -this.name.compareTo(user.name);</span></span><br><span class="line">            <span class="keyword">int</span> compare = -<span class="keyword">this</span>.name.compareTo(user.name);</span><br><span class="line">            <span class="keyword">if</span>(compare != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.age,user.age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的类型不匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210308144532969.png" alt="image-20210308144532969"></p>
<h1 id="每天一考"><a href="#每天一考" class="headerlink" title="每天一考"></a>每天一考</h1><ol>
<li><p>集合Collection中存储的如果是自定义类的对象，需要自定义重写哪个方法？为什么？</p>
<p>equals()方法。</p>
<ul>
<li><p>List：equals()方法</p>
</li>
<li><p>Set：(HashSet、LinkedHashSet) equals()、hasCode()</p>
<p>​            (TreeSet)  Comparable：compareTo(Object obj)</p>
<p>​                                    Comparator：compare(Object o1, Object o2)</p>
</li>
</ul>
</li>
<li><p>ArrayList、LinkedList、Vector三者的相同点与不同点？</p>
</li>
<li><p>List接口的常用方法有哪些？（增删改查插长度遍历）</p>
</li>
<li><p>如何使用Iterator和增强for循环遍历List</p>
</li>
<li><p>Set存储数据的特点是什么？常见的实现类有什么？</p>
</li>
</ol>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210308161856210.png" alt="image-20210308161856210"></p>
<h2 id="一、Map的实现类的结构："><a href="#一、Map的实现类的结构：" class="headerlink" title="一、Map的实现类的结构："></a>一、Map的实现类的结构：</h2><ul>
<li><p>Map:双列数据，存储key-value对的数据   —类似于高中的函数：y = f(x)</p>
<ul>
<li><p>HashMap:作为Map的主要实现类；线程不安全的，效率高；存储null的key和value</p>
<ul>
<li><p>LinkedHashMap:保证在遍历map元素时，可以按照添加的顺序实现遍历。</p>
<p>原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。</p>
<p>对于频繁的遍历操作，此类执行效率高于HashMap。</p>
</li>
</ul>
</li>
<li><p>TreeMap:保证按照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序</p>
<p>底层使用红黑树</p>
</li>
<li><p>Hashtable:作为古老的实现类；线程安全的，效率低；不能存储null的key和value</p>
<ul>
<li>Properties:常用来处理配置文件。key和value都是String类型</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>HashMap的底层：数组+链表  （jdk7及之前）</p>
<p>数组+链表+红黑树 （jdk 8）</p>
<p>面试题：</p>
<ul>
<li> HashMap的底层实现原理？</li>
<li> HashMap 和 Hashtable的异同？</li>
<li> CurrentHashMap 与 Hashtable的异同？（暂时不讲）</li>
</ul>
<h2 id="二、Map结构的理解："><a href="#二、Map结构的理解：" class="headerlink" title="二、Map结构的理解："></a>二、Map结构的理解：</h2><p>   Map中的key:无序的、不可重复的，使用Set存储所有的key  —&gt; key所在的类要重写equals()和hashCode() （以HashMap为例）</p>
<p>   Map中的value:无序的、可重复的，使用Collection存储所有的value —&gt;value所在的类要重写equals()</p>
<p>   一个键值对：key-value构成了一个Entry对象。</p>
<p>   Map中的entry:无序的、不可重复的，使用Set存储所有的entry<br>    <img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210310192505218.png" alt="image-20210310192505218"></p>
<h2 id="三、HashMap的底层实现原理？以jdk7为例说明："><a href="#三、HashMap的底层实现原理？以jdk7为例说明：" class="headerlink" title="三、HashMap的底层实现原理？以jdk7为例说明："></a>三、HashMap的底层实现原理？以jdk7为例说明：</h2><p>   HashMap map = new HashMap():</p>
<p>   在实例化以后，底层创建了长度是16的一维数组Entry[] table。</p>
<p>   …可能已经执行过多次put…</p>
<p>   map.put(key1,value1):</p>
<p>   首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。</p>
<p>   如果此位置上的数据为空，此时的key1-value1添加成功。 —-情况1</p>
<p>   如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),比较key1和已经存在的一个或多个数的哈希值：</p>
<p>   如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。—-情况2</p>
<p>   如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较：</p>
<p>   如果equals()返回false:此时key1-value1添加成功。—-情况3</p>
<p>   如果equals()返回true:使用value1替换value2。</p>
<p>   补充：关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储。</p>
<p>   在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</p>
<p>   jdk8 相较于jdk7在底层实现方面的不同：</p>
<ul>
<li><p>   new HashMap():底层没有创建一个长度为16的数组</p>
</li>
<li><p>   jdk 8底层的数组是：Node[],而非Entry[]</p>
</li>
<li><p>   首次调用put()方法时，底层创建长度为16的数组</p>
</li>
<li><p>jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。</p>
<p>4.1 形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）<br>4.2 当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。<br> *</p>
<p>DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16</p>
<p>DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75</p>
<p>threshold：扩容的临界值，=容量*填充因子：16 * 0.75 =&gt; 12</p>
<p>TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8</p>
<p>MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64<br> *</p>
<h2 id="四、LinkedHashMap的底层实现原理（了解）"><a href="#四、LinkedHashMap的底层实现原理（了解）" class="headerlink" title="四、LinkedHashMap的底层实现原理（了解）"></a>四、LinkedHashMap的底层实现原理（了解）</h2><p>源码中：</p>
<p>static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; {</p>
<pre><code> Entry&lt;K,V&gt; before, after;//能够记录添加的元素的先后顺序
 Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;
    super(hash, key, value, next);
 &#125;</code></pre>
<p> }</p>
<h2 id="五、Map中定义的方法："><a href="#五、Map中定义的方法：" class="headerlink" title="五、Map中定义的方法："></a>五、Map中定义的方法：</h2><h3 id="添加、删除、修改操作："><a href="#添加、删除、修改操作：" class="headerlink" title="添加、删除、修改操作："></a>添加、删除、修改操作：</h3><p> Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中<br> void putAll(Map m):将m中的所有key-value对存放到当前map中<br> Object remove(Object key)：移除指定key的key-value对，并返回value<br> void clear()：清空当前map中的所有数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">56</span>);</span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">87</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        Map map1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map1.put(<span class="string">&quot;CC&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;DD&quot;</span>,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        map.putAll(map1);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//remove(Object key)</span></span><br><span class="line">        Object value = map.remove(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//clear()</span></span><br><span class="line">        map.clear();<span class="comment">//与map = null操作不同,map还在</span></span><br><span class="line">        System.out.println(map.size());<span class="comment">//0</span></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">        map.put(<span class="number">123</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        map.put(<span class="number">345</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        map.put(<span class="number">12</span>,<span class="string">&quot;CC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line"><span class="comment">//        map = new Hashtable();</span></span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="元素查询的操作："><a href="#元素查询的操作：" class="headerlink" title="元素查询的操作："></a>元素查询的操作：</h3><p> Object get(Object key)：获取指定key对应的value<br> boolean containsKey(Object key)：是否包含指定的key<br> boolean containsValue(Object value)：是否包含指定的value<br> int size()：返回map中key-value对的个数<br> boolean isEmpty()：判断当前map是否为空<br> boolean equals(Object obj)：判断当前map和参数对象obj是否相等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">    map.put(<span class="number">45</span>,<span class="number">123</span>);</span><br><span class="line">    map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">56</span>);</span><br><span class="line">    <span class="comment">// Object get(Object key)</span></span><br><span class="line">    System.out.println(map.get(<span class="number">45</span>));</span><br><span class="line">    <span class="comment">//containsKey(Object key)</span></span><br><span class="line">    <span class="keyword">boolean</span> isExist = map.containsKey(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">    System.out.println(isExist);</span><br><span class="line"></span><br><span class="line">    isExist = map.containsValue(<span class="number">123</span>);</span><br><span class="line">    System.out.println(isExist);</span><br><span class="line"></span><br><span class="line">    map.clear();</span><br><span class="line"></span><br><span class="line">    System.out.println(map.isEmpty());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="元视图操作的方法："><a href="#元视图操作的方法：" class="headerlink" title="元视图操作的方法："></a>元视图操作的方法：</h3><p> Set keySet()：返回所有key构成的Set集合<br> Collection values()：返回所有value构成的Collection集合<br> Set entrySet()：返回所有key-value对构成的Set集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">    map.put(<span class="number">45</span>,<span class="number">1234</span>);</span><br><span class="line">    map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">56</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历所有的key集：keySet()</span></span><br><span class="line">    Set set = map.keySet();</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">//遍历所有的value集：values()</span></span><br><span class="line">    Collection values = map.values();</span><br><span class="line">    <span class="keyword">for</span>(Object obj : values)&#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">//遍历所有的key-value</span></span><br><span class="line">    <span class="comment">//方式一：entrySet()</span></span><br><span class="line">    Set entrySet = map.entrySet();</span><br><span class="line">    Iterator iterator1 = entrySet.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">        Object obj = iterator1.next();</span><br><span class="line">        <span class="comment">//entrySet集合中的元素都是entry</span></span><br><span class="line">        Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">        System.out.println(entry.getKey() + <span class="string">&quot;----&gt;&quot;</span> + entry.getValue());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">//方式二：</span></span><br><span class="line">    Set keySet = map.keySet();</span><br><span class="line">    Iterator iterator2 = keySet.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator2.hasNext())&#123;</span><br><span class="line">        Object key = iterator2.next();</span><br><span class="line">        Object value = map.get(key);</span><br><span class="line">        System.out.println(key + <span class="string">&quot;=====&quot;</span> + value);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="总结：常用方法："><a href="#总结：常用方法：" class="headerlink" title="总结：常用方法："></a>总结：常用方法：</h2><ul>
<li>添加：put(Object key,Object value)</li>
<li>删除：remove(Object key)</li>
<li>修改：put(Object key,Object value)</li>
<li>查询：get(Object key)</li>
<li>长度：size()</li>
<li>遍历：keySet() / values() / entrySet()</li>
</ul>
<h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向TreeMap中添加key-value，要求key必须是由同一个类创建的对象</span></span><br><span class="line">    <span class="comment">//因为要按照key进行排序：自然排序 、定制排序</span></span><br><span class="line">    <span class="comment">//自然排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeMap map = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">&quot;Rose&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        map.put(u1,<span class="number">98</span>);</span><br><span class="line">        map.put(u2,<span class="number">89</span>);</span><br><span class="line">        map.put(u3,<span class="number">76</span>);</span><br><span class="line">        map.put(u4,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        Iterator iterator1 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            Object obj = iterator1.next();</span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;----&gt;&quot;</span> + entry.getValue());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定制排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeMap map = <span class="keyword">new</span> TreeMap(<span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    User u1 = (User)o1;</span><br><span class="line">                    User u2 = (User)o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的类型不匹配！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">&quot;Rose&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        map.put(u1,<span class="number">98</span>);</span><br><span class="line">        map.put(u2,<span class="number">89</span>);</span><br><span class="line">        map.put(u3,<span class="number">76</span>);</span><br><span class="line">        map.put(u4,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        Iterator iterator1 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            Object obj = iterator1.next();</span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;----&gt;&quot;</span> + entry.getValue());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Properties:常用来处理配置文件。key和value都是String类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            pros.load(fis);<span class="comment">//加载流对应的文件</span></span><br><span class="line"></span><br><span class="line">            String name = pros.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, password = &quot;</span> + password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h1><p>reverse(List)：反转 List 中元素的顺序<br>shuffle(List)：对 List 集合元素进行随机排序<br>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序<br>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序<br>swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</p>
<p>Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素<br>Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素<br>Object min(Collection)<br>Object min(Collection，Comparator)<br>int frequency(Collection，Object)：返回指定集合中指定元素的出现次数<br>void copy(List dest,List src)：将src中的内容复制到dest中<br>boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Collections:操作Collection、Map的工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 面试题：Collection 和 Collections的区别？</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 下午 4:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(-<span class="number">97</span>);</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//报异常：IndexOutOfBoundsException(&quot;Source does not fit in dest&quot;)</span></span><br><span class="line"><span class="comment">//        List dest = new ArrayList();</span></span><br><span class="line"><span class="comment">//        Collections.copy(dest,list);</span></span><br><span class="line">        <span class="comment">//正确的：</span></span><br><span class="line">        List dest = Arrays.asList(<span class="keyword">new</span> Object[list.size()]);</span><br><span class="line">        System.out.println(dest.size());<span class="comment">//list.size();</span></span><br><span class="line">        Collections.copy(dest,list);</span><br><span class="line"></span><br><span class="line">        System.out.println(dest);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Collections 类中提供了多个 synchronizedXxx() 方法，</span></span><br><span class="line"><span class="comment">        该方法可使将指定集合包装成线程同步的集合，从而可以解决</span></span><br><span class="line"><span class="comment">        多线程并发访问集合时的线程安全问题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//返回的list1即为线程安全的List</span></span><br><span class="line">        List list1 = Collections.synchronizedList(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(-<span class="number">97</span>);</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Collections.reverse(list);</span></span><br><span class="line"><span class="comment">//        Collections.shuffle(list);</span></span><br><span class="line"><span class="comment">//        Collections.sort(list);</span></span><br><span class="line"><span class="comment">//        Collections.swap(list,1,2);</span></span><br><span class="line">        <span class="keyword">int</span> frequency = Collections.frequency(list, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(frequency);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="每日一考"><a href="#每日一考" class="headerlink" title="每日一考"></a>每日一考</h1><ol>
<li><p>Map存储数据的特点是什么？并指明key，value，entry存储数据的特点。</p>
<p>双列数据，存储key-value对数据。</p>
<p>key：无序的、不可重复的-àSet存储</p>
<p>value:无序的、可重复的 –&gt;Collection存储</p>
<p>key-value:无序的、不可重复 àSet存储</p>
</li>
</ol>
<ol start="2">
<li>描述HashMap的底层实现原理(jdk 8版)</li>
</ol>
<ol start="3">
<li>Map中常用实现类有哪些？各自有什么特点？</li>
</ol>
<ol start="4">
<li>如何遍历Map中的key-value对，代码实现</li>
</ol>
<ol start="5">
<li>Collection和Collections的区别？</li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库第三章——关系数据库基础</title>
    <url>/posts/d0584767/</url>
    <content><![CDATA[<h1 id="关系数据库简史"><a href="#关系数据库简史" class="headerlink" title="关系数据库简史"></a>关系数据库简史</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109100148025.png" alt="image-20210109100148025"></p>
<h1 id="关系模型概述"><a href="#关系模型概述" class="headerlink" title="关系模型概述"></a>关系模型概述</h1><ul>
<li>关系数据库系统是支持<strong>关系模型</strong>的数据库系统</li>
<li>关系模型<ul>
<li>数据结构：<ul>
<li>关系(二维表)</li>
</ul>
</li>
<li>数据操作<ul>
<li>查询操作(重点)</li>
<li>增、删、改操作</li>
</ul>
</li>
<li>完整性约束：<ul>
<li>实体完整性</li>
<li>参照完整性</li>
<li>用户定义的完整性</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="关系数据库的基本概念"><a href="#关系数据库的基本概念" class="headerlink" title="关系数据库的基本概念"></a>关系数据库的基本概念</h1><ul>
<li>关系模型认为数据库是一组关系，每个关系从外观上看起来象一张二维表</li>
<li>在正式的关系模型术语中, 行称为<strong>元组 (tuple)</strong>, 列标题称为<strong>属性(attribute)</strong>, 表称为关系 <strong>(relation)**。属性的取值范围称为该属性的</strong>域 (domain)**</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109100548907.png" alt="image-20210109100548907"></p>
<h2 id="域-Domain"><a href="#域-Domain" class="headerlink" title="域 (Domain)"></a>域 (Domain)</h2><ul>
<li>域是原子值的集合(set)。“原子”的含义是指域中每个值是不可分割的<ul>
<li>域是一组具有相同数据类型、格式、度量单位的“原子”值的集合，用于表示属性的取值范围</li>
</ul>
</li>
<li>例如：<ul>
<li>院系域：{1，2，3，4，……，最大院系编号}</li>
<li>中国民族域：中华人民共和国56个民族名称</li>
<li>性别域：{男，女}</li>
<li>生日域：YYYYMMDD</li>
</ul>
</li>
</ul>
<h3 id="dom-Ai-第i个属性的域"><a href="#dom-Ai-第i个属性的域" class="headerlink" title="dom(Ai)(第i个属性的域)"></a>dom(Ai)(第i个属性的域)</h3><ul>
<li>例如：<ul>
<li>dom(StudentDepartID) =院系域</li>
<li>dom(StudentNation)  =中国民族域</li>
<li>dom(StudentGender) =性别域</li>
</ul>
</li>
<li>不同的属性可出自同一个域<ul>
<li>姓名域、性别域</li>
</ul>
</li>
</ul>
<h2 id="关系模式-Relation-Schema"><a href="#关系模式-Relation-Schema" class="headerlink" title="关系模式(Relation Schema)"></a>关系模式(Relation Schema)</h2><ul>
<li>R的<strong>关系模式</strong>表示为 R(A1, A2, . . ., An), 由关系名 R 和属性列表 A1, A2, . . ., An组成</li>
<li><strong>关系的目或度</strong>是指关系模式属性的个数 </li>
<li>例如：StudentInfo(StudentNo,StudentPassword,StudentName,StudentGender,……,StudentDepartID)</li>
</ul>
<h3 id="关系的一种定义"><a href="#关系的一种定义" class="headerlink" title="关系的一种定义"></a>关系的一种定义</h3><blockquote>
<p>关系模式R(A1, A2, . . ., An)的关系 (或关系状态) <strong>r</strong> 是一个n元组的集合，即**r = {t1, t2, . . ., tm}**。每个n元组t是n个值的有序列表 t = &lt;v1, v2, . . ., vn&gt;, 每个值 vi(1≤i ≤n)是dom(Ai) 的一个元素或者为 **null(空)**。元组t第i个值同属性Ai相对应，它可表示为 t<a href="%E5%8D%B3%E5%85%83%E7%BB%84%E5%9C%A8Ai%E5%B1%9E%E6%80%A7%E4%B8%8A%E7%9A%84%E5%88%86%E9%87%8F">Ai(即元组在Ai属性上的分量) </a> </p>
</blockquote>
<ul>
<li><p>注意：</p>
<blockquote>
<p>严格意义上，“属性”是指的列标题，不包括元组的分量，这就是为什么n元组是“有序的”原因</p>
</blockquote>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109101709830.png" alt="image-20210109101709830"></p>
<h4 id="为什么会有“空值”-null-value"><a href="#为什么会有“空值”-null-value" class="headerlink" title="为什么会有“空值”(null value)"></a>为什么会有“空值”(null value)</h4><ul>
<li>值是未知的</li>
<li>值存在但不能获得</li>
<li>当前属性对当前元组不适合</li>
</ul>
<h3 id="关系的另一种数学定义"><a href="#关系的另一种数学定义" class="headerlink" title="关系的另一种数学定义"></a>关系的另一种数学定义</h3><blockquote>
<p>关系 r(R) 是定义在域 dom (A1), dom(A2), . . ., dom(An)上的、度为n的数学关系，它是这些域的笛卡尔积的子集:<br> r(R)   (dom (A1) x dom(A2) x . . . x dom(An))</p>
</blockquote>
<h4 id="域的笛卡尔积-Cartesian-product"><a href="#域的笛卡尔积-Cartesian-product" class="headerlink" title="域的笛卡尔积(Cartesian product)"></a>域的笛卡尔积(Cartesian product)</h4><p>笛卡尔积包含来自其组成域的值的所有可能的组合<br>如果将域中值的个数(即域D的基数)表示成| D | (假设所有域都是有限的)，那么，笛卡尔积中总的元组个数为:</p>
<blockquote>
<p>| | dom(A1) | * | dom(A2) | * . . . * | dom(An) | \</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109102120869.png" alt="image-20210109102120869"></p>
<ul>
<li>在所有可能的组合中，给定时间的关系状态即当前关系状态，仅反映了代表现实世界特定状态的<strong>有效元组</strong> </li>
<li>一般来说，当现实世界的状态改变时，关系的状态也会改变，它会转换成另一个关系状态</li>
<li>关系模式R是相对静态的，不会经常发生改变，极少数情况除外（如添加一个表示新的信息的属性）</li>
<li>关系是关系模式在<strong>某一时刻</strong>的状态或内容</li>
</ul>
<h2 id="定义总结"><a href="#定义总结" class="headerlink" title="定义总结"></a>定义总结</h2><table>
<thead>
<tr>
<th>非正式术语</th>
<th>正式术语</th>
</tr>
</thead>
<tbody><tr>
<td>表</td>
<td>关系</td>
</tr>
<tr>
<td>列标题</td>
<td>属性</td>
</tr>
<tr>
<td>列所有可能的值</td>
<td>域</td>
</tr>
<tr>
<td>行</td>
<td>元组</td>
</tr>
<tr>
<td>表定义</td>
<td>关系的模式</td>
</tr>
<tr>
<td>填充表</td>
<td>关系的状态</td>
</tr>
</tbody></table>
<h1 id="关系的类型"><a href="#关系的类型" class="headerlink" title="关系的类型"></a>关系的类型</h1><ul>
<li><p>基本关系(基本表)</p>
<blockquote>
<p>实际存在的表，是实际存储数据的逻辑表示</p>
</blockquote>
</li>
<li><p>查询表</p>
<blockquote>
<p>查询结果对应的表</p>
</blockquote>
</li>
<li><p>视图表(虚表，不占存储空间)</p>
<blockquote>
<p>由基本表或其他视图表导出的表</p>
</blockquote>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109102612734.png" alt="image-20210109102612734"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109102622860.png" alt="image-20210109102622860"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109102636880.png" alt="image-20210109102636880"></p>
<h1 id="关系的性质"><a href="#关系的性质" class="headerlink" title="关系的性质"></a>关系的性质</h1><h2 id="以下性质也是“关系”区别于普通文件或表格的主要特征"><a href="#以下性质也是“关系”区别于普通文件或表格的主要特征" class="headerlink" title="以下性质也是“关系”区别于普通文件或表格的主要特征:"></a>以下性质也是“关系”区别于普通文件或表格的主要特征:</h2><ul>
<li><p>列是同质的，即每一列中的分量是同一类型的数据，来自同一个域</p>
</li>
<li><p>关系中的元组(行)无先后顺序</p>
<blockquote>
<p>关系是元组的集合(set)。在数学上，一个集合的元素间是无序的，因此，一个关系中的元组间也没有特定的顺序，虽然在表格形式下，行之间是有顺序的</p>
</blockquote>
</li>
<li><p>关系中的属性(列)无先后顺序</p>
<blockquote>
<p>在逻辑上，属性和相应的属性值之间的顺序也是无关紧要的，只要维护好属性和属性值之间的对应关系</p>
</blockquote>
</li>
<li><p>一个关系中所有元组都是独一无二的</p>
<ul>
<li><p>关系模式的一个或一组属性**(必须是最小组合)**，使得关系任何一个状态中的任意两个元组在该属性子集上值的组合都不同</p>
<ul>
<li><p>称为键(或候选键)</p>
</li>
<li><p>若一个关系有多个候选键，则选定其中一个为<strong>主键(Primary Key)，其余的为次要键或唯一键</strong></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>元组的每一个值都是原子的，不可再分的(符合第一范式)</p>
<ul>
<li>不允许存在复合属性和多值属性</li>
</ul>
</li>
</ul>
<h2 id="复合属性-Composite-Attributes"><a href="#复合属性-Composite-Attributes" class="headerlink" title="复合属性 (Composite Attributes)"></a>复合属性 (Composite Attributes)</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109103430482.png" alt="image-20210109103430482"></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109103458786.png" alt="image-20210109103458786"></p>
<h2 id="多值属性"><a href="#多值属性" class="headerlink" title="多值属性"></a>多值属性</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109103541861.png" alt="image-20210109103541861"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109103556392.png" alt="image-20210109103556392"></p>
<h1 id="关系数据库和关系数据库模式"><a href="#关系数据库和关系数据库模式" class="headerlink" title="关系数据库和关系数据库模式"></a>关系数据库和关系数据库模式</h1><ul>
<li><strong>关系数据库模式 S</strong> 是关系模式的集合S = {R1, R2, . . ., Rm} 以及完整性约束 (IC：Integrity Constraint)的集合。S的一个<strong>关系数据库状态</strong>DB是关系状态的集合 DB = {r1, r2, . . ., rm}， 其中每个 ri 是 Ri 的一个状态，并且ri满足IC中规定的完整性约束</li>
<li>当提及一个关系数据库时, 常隐含地包含它的模式和当前状态</li>
</ul>
<h1 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h1><blockquote>
<p><strong>约束</strong>：约束是指所有有效关系状态必须满足的条件</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109104035278.png" alt="image-20210109104035278"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109104101127.png" alt="image-20210109104101127"></p>
<h2 id="关系的完整性"><a href="#关系的完整性" class="headerlink" title="关系的完整性"></a>关系的完整性</h2><ol>
<li><p>单一关系</p>
</li>
<li><p>多个关系</p>
</li>
</ol>
<h3 id="一、单一关系"><a href="#一、单一关系" class="headerlink" title="一、单一关系"></a>一、单一关系</h3><h4 id="域约束-Domain-Constraints"><a href="#域约束-Domain-Constraints" class="headerlink" title="域约束 (Domain Constraints)"></a>域约束 (Domain Constraints)</h4><blockquote>
<p>域约束指元组中每个属性A的值必须是来自域dom(A)的原子值</p>
<p>例如：性别只能是“男”或“女”，民族只能是56个民族之一，而不能是其他的值</p>
</blockquote>
<h4 id="键约束-Key-Constraints"><a href="#键约束-Key-Constraints" class="headerlink" title="键约束 (Key Constraints)"></a>键约束 (Key Constraints)</h4><ul>
<li><p>关系被定义为元组的集合。按照定义，集合中的所有元素是不同的，因此，一个关系中的所有元组也必须是不同的</p>
<ul>
<li>每个关系必须要有主键，且每个元组的主键值不得重复</li>
</ul>
</li>
<li><p>“一个关系的键是什么？”这是关系模式的特性（而且是不随时间变化的特性），因此必须从属性的含义判断是否能作为键</p>
<ul>
<li>学生关系的“Name” 属性不能被指定为键</li>
</ul>
</li>
</ul>
<h4 id="非空约束-Not-Null"><a href="#非空约束-Not-Null" class="headerlink" title="非空约束 (Not Null)"></a>非空约束 (Not Null)</h4><blockquote>
<p>例如：学生姓名不允许为空</p>
</blockquote>
<h4 id="实体完整性-Entity-Integrity-约束"><a href="#实体完整性-Entity-Integrity-约束" class="headerlink" title="实体完整性(Entity Integrity)约束"></a>实体完整性(Entity Integrity)约束</h4><ul>
<li><p>主键不允许为空</p>
</li>
<li><p>复合主键的各属性都不能取空值，而不仅是主键整体不能取空值</p>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109104425053.png" alt="image-20210109104425053"></p>
<h2 id="二、多个关系"><a href="#二、多个关系" class="headerlink" title="二、多个关系"></a>二、多个关系</h2><h3 id="参照完整性-Referential-Integrity-约束"><a href="#参照完整性-Referential-Integrity-约束" class="headerlink" title="参照完整性(Referential Integrity)约束"></a>参照完整性(Referential Integrity)约束</h3><ul>
<li>外键或者取Null值(在允许为Null的情况下)<ul>
<li>如果外键是主属性(组成键的属性)，则不允许为空</li>
</ul>
</li>
<li>外键或者等于其被参照关系某个元组的主键值</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109104627218.png" alt="image-20210109104627218"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109104653268.png" alt="image-20210109104653268"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109104715790.png" alt="image-20210109104715790"></p>
<h3 id="用户定义的完整性"><a href="#用户定义的完整性" class="headerlink" title="用户定义的完整性"></a>用户定义的完整性</h3><blockquote>
<p>例如：学生每学期的选课门数不得超过10<br>实际上是业务规则</p>
</blockquote>
<h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><h2 id="关系操作"><a href="#关系操作" class="headerlink" title="关系操作"></a>关系操作</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109104907070.png" alt="image-20210109104907070"></p>
<h2 id="数据操作-1"><a href="#数据操作-1" class="headerlink" title="数据操作"></a>数据操作</h2><ul>
<li><p>关系模型操作分为<strong>检索</strong>和<strong>更新</strong>。</p>
</li>
<li><p>当对关系进行更新操作时，不应该违反定义在关系数据库上的完整性约束</p>
</li>
</ul>
<h3 id="更新（增删改操作）"><a href="#更新（增删改操作）" class="headerlink" title="更新（增删改操作）"></a>更新（增删改操作）</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109105126821.png" alt="image-20210109105126821"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109105154029.png" alt="image-20210109105154029"></p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul>
<li>用于从关系中删除元组(“一次一集合”，不必使用循环语句)</li>
<li>当指定删除操作时，一般要给出一个关系属性上的条件来选择要被删除的元组</li>
<li>有可能会违反：<ul>
<li>参照完整性约束</li>
</ul>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109105258299.png" alt="image-20210109105258299"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109105310892.png" alt="image-20210109105310892"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109105323350.png" alt="image-20210109105323350"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109105337617.png" alt="image-20210109105337617"></p>
<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><ul>
<li>用于改变关系中指定元组的一个或多个属性值 (“一次一集合”，不必使用循环语句)</li>
<li>一般需要在关系的属性上指定条件来选择要修改的元组</li>
<li>修改主键的本质：删除旧的元组并插入新的元组</li>
<li>有可能会违反：<ul>
<li>域约束</li>
<li>键约束</li>
<li>非空约束</li>
<li>实体完整性约束</li>
<li>参照完整性约束</li>
</ul>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109105523258.png" alt="image-20210109105523258"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109105533814.png" alt="image-20210109105533814"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109105542416.png" alt="image-20210109105542416"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109105552247.png" alt="image-20210109105552247"></p>
<h1 id="关系代数概述"><a href="#关系代数概述" class="headerlink" title="关系代数概述"></a>关系代数概述</h1><ul>
<li>关系代数是一种<strong>抽象的</strong>查询语言，是关系数据操纵语言的一种<strong>传统</strong>(SQL语言的基础)表达方式，它是用<strong>对关系的运算</strong>来表达查询的</li>
<li>运算：<ul>
<li>运算对象(Operand)</li>
<li>运算符(Operator)</li>
<li>运算结果(Result)<br>(3+6)*4=36    (表达式)</li>
</ul>
</li>
<li>关系代数的运算<ul>
<li>运算对象—》关系</li>
<li>运算结果—》关系</li>
<li>运算符   —》四类</li>
<li>关系代数操作的一个序列形成关系代数表达式，其运算结果也是一个关系</li>
</ul>
</li>
</ul>
<h2 id="关系代数的运算符"><a href="#关系代数的运算符" class="headerlink" title="关系代数的运算符"></a>关系代数的运算符</h2><ul>
<li><p>集合运算符</p>
<ul>
<li><p>将关系看成元组的集合</p>
</li>
<li><p>运算是从关系的“水平”方向即行的角度来进行</p>
</li>
</ul>
</li>
<li><p>专门的关系运算符</p>
<ul>
<li>不仅涉及行而且涉及列</li>
</ul>
</li>
<li><p>算术比较符</p>
<ul>
<li>辅助专门的关系运算符进行操作</li>
</ul>
</li>
<li><p>逻辑运算符</p>
<ul>
<li>辅助专门的关系运算符进行操作</li>
</ul>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109111947940.png" alt="image-20210109111947940"></p>
<h1 id="专门的关系运算"><a href="#专门的关系运算" class="headerlink" title="专门的关系运算"></a>专门的关系运算</h1><ol>
<li>SELECT</li>
<li>PROJECT</li>
<li>JOIN</li>
<li>DIVISION</li>
</ol>
<h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><blockquote>
<p>SELECT(选择) 操作用于从一个关系中选出满足选择条件的元组的一个子集</p>
<p>表示方法:<br>σ&lt;选择条件&gt;(R)<br>σ(sigma) 表示选择操作, &lt;选择条件&gt;是作用于关系 R的一个布尔表达式</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109112329473.png" alt="image-20210109112329473"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109112343655.png" alt="image-20210109112343655"></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>R可以是一个基本关系(或者视图表)，<strong>也可以是其他关系代数运算的中间结果关系(以后的运算都是如此)</strong></li>
<li>选择得到的关系与 R有相同的属性</li>
<li>选择得到的关系的元组个数小于或等于R的元组个数(选择条件选中的元组占所有元组的比率被称为条件的<strong>选中率</strong>)</li>
<li>选择运算是从<strong>行的角度</strong>进行的运算</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109112507494.png" alt="image-20210109112507494"></p>
<h3 id="关于“筛选条件”"><a href="#关于“筛选条件”" class="headerlink" title="关于“筛选条件”"></a>关于“筛选条件”</h3><ul>
<li>&lt;选择条件&gt; 由若干个如下子句构成：<ul>
<li>&lt;属性名&gt; &lt;比较操作符&gt; &lt;常量值&gt;</li>
<li>&lt;属性名&gt; &lt;比较操作符&gt; &lt;属性名&gt;</li>
</ul>
</li>
<li>&lt;属性名&gt; 是R的某一个属性的名称</li>
<li>&lt;比较操作符&gt; 通常是操作符集 {=,  &lt;, ≤, &gt;, ≥ , ≠ }中的一个, &lt;常量值&gt; 是来自于属性域中的一个常量值 </li>
<li>可以用布尔操作符 AND, OR, NOT 任意连接子句，从而形成一个复合选择条件</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109112646329.png" alt="image-20210109112646329"></p>
<h3 id="SELECT运算的特性"><a href="#SELECT运算的特性" class="headerlink" title="SELECT运算的特性"></a>SELECT运算的特性</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109112729098.png" alt="image-20210109112729098"></p>
<h2 id="PROJECT"><a href="#PROJECT" class="headerlink" title="PROJECT"></a>PROJECT</h2><blockquote>
<p>PROJECT(投影) 从一个关系中选择某些列(属性)并丢弃掉其它列(属性) 而得到一个新的关系</p>
</blockquote>
<p>表示方法：</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109112824475.png" alt="image-20210109112824475"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109112835069.png" alt="image-20210109112835069"></p>
<h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ul>
<li>R可以是一个基本关系(或者视图表)，<strong>也可以是其他关系代数运算的中间结果关系</strong></li>
<li>PROJECT 操作得到的关系仅有&lt;属性列表&gt; 中列出的属性并且其顺序和属性列表的顺序一致</li>
<li>如果属性列表只包含R的<strong>非键</strong>属性，那么就有可能出现重复的元组，PROJECT操作将会去除任何重复的元组，这样PROJECT操作的结果就是一个有效的关系，这种做法叫<strong>重复消除</strong></li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109113019308.png" alt="image-20210109113019308"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109113031447.png" alt="image-20210109113031447"></p>
<h3 id="PROJECT运算的特性"><a href="#PROJECT运算的特性" class="headerlink" title="PROJECT运算的特性"></a>PROJECT运算的特性</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109113107455.png" alt="image-20210109113107455"></p>
<h3 id="操作序列和RENAME-重命名-操作"><a href="#操作序列和RENAME-重命名-操作" class="headerlink" title="操作序列和RENAME(重命名)操作"></a>操作序列和RENAME(重命名)操作</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109113400198.png" alt="image-20210109113400198"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109113440816.png" alt="image-20210109113440816"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109113411771.png" alt="image-20210109113411771"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109113425304.png" alt="image-20210109113425304"></p>
<h2 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h2><ul>
<li>主要是用于将两个有联系的关系连接起来<ul>
<li>用于处理关系间的联系，对于任何包含多个关系的关系数据库非常重要</li>
</ul>
</li>
<li>表示方法<ul>
<li>R(A1, A2, . . ., An) 和 S(B1, B2, . . ., Bm) 的连接表示为:</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109114630208.png" alt="image-20210109114630208"></li>
</ul>
</li>
</ul>
<h3 id="示例：查询有家属的女性员工姓名及其家属姓名"><a href="#示例：查询有家属的女性员工姓名及其家属姓名" class="headerlink" title="示例：查询有家属的女性员工姓名及其家属姓名"></a>示例：查询有家属的女性员工姓名及其家属姓名</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109114722030.png" alt="image-20210109114722030"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109114732655.png" alt="image-20210109114732655"></p>
<ul>
<li>笛卡尔积和连接的主要区别是：只有符合连接条件的元组才会出现在连接结果中；然而两个关系所有元组的组合都会出现在笛卡尔积的结果中</li>
</ul>
<h3 id="连接条件"><a href="#连接条件" class="headerlink" title="连接条件"></a>连接条件</h3><p>通常连接条件的形式如下: </p>
<ul>
<li>&lt;条件&gt; AND &lt;条件&gt; AND . . . AND &lt;条件&gt; </li>
<li>每一个条件的表示形式为 AiθBj, Ai 是 R的一个属性, Bj 是 S的一个属性, Ai 和 Bj 有相同的域， θ(theta) 是一个比较运算符 {=, &lt;,≤ , &gt;,≥  ,≠ }. </li>
<li>带有上述连接条件的JOIN操作称为 THETA JOIN </li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109115110691.png" alt="image-20210109115110691"></p>
<h3 id="等值连接-EQUIJOIN"><a href="#等值连接-EQUIJOIN" class="headerlink" title="等值连接(EQUIJOIN)"></a>等值连接(EQUIJOIN)</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109115447585.png" alt="image-20210109115447585"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109115640518.png" alt="image-20210109115640518"></p>
<h3 id="自然连接-NATURAL-JOIN"><a href="#自然连接-NATURAL-JOIN" class="headerlink" title="自然连接(NATURAL JOIN)"></a>自然连接(NATURAL JOIN)</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109115625090.png" alt="image-20210109115625090"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109115659326.png" alt="image-20210109115659326"></p>
<h2 id="DIVISION"><a href="#DIVISION" class="headerlink" title="DIVISION"></a>DIVISION</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109115719663.png" alt="image-20210109115719663"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109115923070.png" alt="image-20210109115923070"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109115934138.png" alt="image-20210109115934138"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109115954524.png" alt="image-20210109115954524"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109120007909.png" alt="image-20210109120007909"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109120018290.png" alt="image-20210109120018290"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109120027045.png" alt="image-20210109120027045"></p>
<h1 id="传统的集合运算"><a href="#传统的集合运算" class="headerlink" title="传统的集合运算"></a>传统的集合运算</h1><ol>
<li><strong>UNION</strong></li>
<li><strong>MINUS</strong></li>
<li>SET DIFFERENCE</li>
<li><strong>INTERSECTION</strong></li>
<li><strong>笛卡尔积</strong></li>
<li>CARTESIAN PRODUCT</li>
</ol>
<h2 id="UNION（并）"><a href="#UNION（并）" class="headerlink" title="UNION（并）"></a>UNION（并）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>属于关系R或属于关系S的元组组成的集合</li>
<li>R∪S ={ t | t∈R∨t∈S }</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109113800943.png" alt="image-20210109113800943"></li>
</ul>
<h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><ul>
<li>并结果中的重复元组会被消除</li>
<li>两个关系R和S若进行并运算，则它们必须具有相同的关系模式(<strong>并相容性</strong>)</li>
<li>两个关系要有相同的属性个数，并且每个相对应的属性对都具有相同的域 (<strong>属性名不一定要一致，若不一致，则以R关系(前一个关系)的属性名为准</strong> ）</li>
</ul>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109113706266.png" alt="image-20210109113706266"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109113715428.png" alt="image-20210109113715428"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109113725032.png" alt="image-20210109113725032"></p>
<h2 id="MINUS（差）"><a href="#MINUS（差）" class="headerlink" title="MINUS（差）"></a>MINUS（差）</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul>
<li><p>由属于关系R而不属于关系S的元组组成的集合</p>
</li>
<li><p>R-S ={ t | t∈R∧t  S }</p>
</li>
<li><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109113921557.png" alt="image-20210109113921557"></p>
</li>
</ul>
<h2 id="INTERSECTION（交）"><a href="#INTERSECTION（交）" class="headerlink" title="INTERSECTION（交）"></a>INTERSECTION（交）</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><ul>
<li>既属于关系R又属于关系S的元组组成的集合</li>
<li>R∩S ={ t | t∈R∧t∈S }</li>
<li>R∩S=R-(R-S)</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109114031838.png" alt="image-20210109114031838"></li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109114116429.png" alt="image-20210109114116429"></p>
<h3 id="UNION-INTERSECTION和MINUS的特性"><a href="#UNION-INTERSECTION和MINUS的特性" class="headerlink" title="UNION, INTERSECTION和MINUS的特性"></a>UNION, INTERSECTION和MINUS的特性</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109114204061.png" alt="image-20210109114204061"></p>
<h2 id="笛卡尔积（叉积）"><a href="#笛卡尔积（叉积）" class="headerlink" title="笛卡尔积（叉积）"></a>笛卡尔积（叉积）</h2><p>R(A1, A2, . . ., An) x S(B1, B2, . . ., Bm) 的结果是一个关系 Q ，Q具有 n + m 个属性，属性次序为 Q(A1, A2, . . ., An, B1, B2, . . ., Bm)。Q对于来自R的一个元组和来自S的一个元组的每一种组合，都有一个相对应的元组。因此, 如果R 有nR 个元组， S 有 nS个元组, 则 R x S有nR * nS个元组</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109114419140.png" alt="image-20210109114419140"></p>
<h1 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210109120047821.png" alt="image-20210109120047821"></p>
]]></content>
      <categories>
        <category>数据库原理及应用</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>计网第四章——网络层</title>
    <url>/posts/87cd1f77/</url>
    <content><![CDATA[<h1 id="网络层概述"><a href="#网络层概述" class="headerlink" title="网络层概述"></a>网络层概述</h1><blockquote>
<p>主要任务是把<strong>分组</strong>从源端传到目的端，为分组交换网上的不同主机提供通信服务。</p>
<p>网络层传输单位：<strong>数据报</strong></p>
<p>分组把数据报切割。</p>
</blockquote>
<h2 id="传输单元名词辨析"><a href="#传输单元名词辨析" class="headerlink" title="传输单元名词辨析"></a>传输单元名词辨析</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105163927766.png" alt="image-20210105163927766"></p>
<h2 id="网络层功能："><a href="#网络层功能：" class="headerlink" title="网络层功能："></a>网络层功能：</h2><ol>
<li><p><strong>路由选择与分组转发</strong></p>
<p>寻找最佳路径</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105153730831.png" alt="image-20210105153730831"></p>
</li>
<li><p><strong>异构网络互联</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105153844848.png" alt="image-20210105153844848"></p>
</li>
<li><p><strong>拥塞控制</strong></p>
<p>所有结点都来不及接受分组，导致大量分组丢弃</p>
<p>解决方法：</p>
<ul>
<li>开环控制（静态）</li>
<li>闭环控制（动态）</li>
</ul>
</li>
</ol>
<h2 id="数据交换方式"><a href="#数据交换方式" class="headerlink" title="数据交换方式"></a>数据交换方式</h2><h3 id="为什么要数据交换"><a href="#为什么要数据交换" class="headerlink" title="为什么要数据交换"></a>为什么要数据交换</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105154138653.png" alt="image-20210105154138653"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105155214695.png" alt="image-20210105155214695"></p>
<h3 id="交换方式"><a href="#交换方式" class="headerlink" title="交换方式"></a>交换方式</h3><h4 id="1-电路交换"><a href="#1-电路交换" class="headerlink" title="1. 电路交换"></a>1. 电路交换</h4><ul>
<li><p>特点</p>
<ul>
<li>独占资源</li>
</ul>
</li>
</ul>
<ul>
<li><p>例如：电话网络</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105160039522.png" alt="image-20210105160039522"></p>
</li>
<li><p>电路交换的阶段</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105160110880.png" alt="image-20210105160110880"></p>
</li>
<li><p>优点</p>
<ol>
<li>通信时延小</li>
<li>有序传输</li>
<li>没有冲突</li>
<li>实时性强</li>
</ol>
</li>
<li><p>缺点</p>
<ol>
<li>建立连接时间长</li>
<li>线路独占，使用效率低</li>
<li>灵活性差</li>
<li>无差错控制能力</li>
</ol>
</li>
</ul>
<h4 id="2-报文交换"><a href="#2-报文交换" class="headerlink" title="2. 报文交换"></a>2. 报文交换</h4><blockquote>
<p>报文：源应用发送的信息整体</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105160530729.png" alt="image-20210105160530729"></p>
<ul>
<li>优点<ol>
<li>无需建立连接</li>
<li>存储转发，动态分配链路</li>
<li>线路可靠性较高</li>
<li>线路利用率较高</li>
<li>多目标服务</li>
</ol>
</li>
<li>缺点<ol>
<li>有存储转发时延</li>
<li>报文大小不定，需要网络结点有较大缓存空间</li>
</ol>
</li>
</ul>
<h4 id="3-分组交换"><a href="#3-分组交换" class="headerlink" title="3. 分组交换"></a>3. 分组交换</h4><blockquote>
<p>分组：把大的数据块分割成小的数据块</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105161011464.png"></p>
<ul>
<li><p>优点：</p>
<ol>
<li>无需建立连接</li>
<li>存储转发，动态分配链路</li>
<li>线路可靠性较高</li>
<li>线路利用率较高</li>
</ol>
</li>
<li><p>缺点：</p>
<ol>
<li>有存储转发时延</li>
<li>需要传输额外的信息量（分组信息）</li>
<li>乱序到目的主机时，要对分组重新排序</li>
</ol>
</li>
</ul>
<h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="数据报方式"><a href="#数据报方式" class="headerlink" title="数据报方式"></a>数据报方式</h5><blockquote>
<p>为网络层提供<strong>无连接服务</strong></p>
<p>不事先为分组的传输确定传输路径，每个分组独立确定传输路径，不同分组的传输路径可能不同。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105163216075.png" alt="image-20210105163216075"></p>
<ul>
<li>无连接</li>
<li>每个分组携带<strong>源和目的地址</strong></li>
<li>路由器根据分组的<em>目的地址</em>转发分组<ul>
<li>基于路由协议/算法构建<em>转发表</em></li>
<li>检索转发表</li>
<li>每个分组独立选路</li>
</ul>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105164730625.png" alt="image-20210105164730625"></p>
<h5 id="虚电路方式"><a href="#虚电路方式" class="headerlink" title="虚电路方式"></a>虚电路方式</h5><blockquote>
<p>为网络层提供<strong>连接服务</strong></p>
<p>首先为分组的传输确定传输路径（建立连接），然后沿该路径（连接）传输系列分组，系列分组路径相同，传输结束后拆除连接。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105163241619.png" alt="image-20210105163241619"></p>
<blockquote>
<p><strong>虚电路</strong>将<em>数据报</em>方式和的<em>电路交换</em>方式结合，以发挥两者优点</p>
</blockquote>
<p>虚电路：</p>
<ul>
<li>一条源主机到目的主机类似于电路的路径（逻辑连接）</li>
<li>路径上所有结点都要维持这条虚电路的建立</li>
<li>都维持一张<em>虚电路表</em>，每一项记录了一个打开的虚电路的信息</li>
</ul>
<p>通信过程：</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105165316215.png" alt="image-20210105165316215"></p>
<h5 id="数据报-amp-虚电路"><a href="#数据报-amp-虚电路" class="headerlink" title="数据报&amp;虚电路"></a>数据报&amp;虚电路</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105165457505.png" alt="image-20210105165457505"></p>
<h4 id="报文交换-amp-分组交换"><a href="#报文交换-amp-分组交换" class="headerlink" title="报文交换&amp;分组交换"></a>报文交换&amp;分组交换</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105161532189.png" alt="image-20210105161532189"></p>
<h4 id="三种数据交换方式比较总结"><a href="#三种数据交换方式比较总结" class="headerlink" title="三种数据交换方式比较总结"></a>三种数据交换方式比较总结</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105161917113.png" alt="image-20210105161917113"></p>
<ol>
<li><strong>报文交换</strong>和<strong>分组交换</strong>都采用<em>存储转发</em></li>
<li>传输数据量大，且传送时间远大于呼叫时，选择<strong>电路交换</strong>。电路交换传输时延最小。</li>
<li>从信道利用率看，<strong>报文交换</strong>和<strong>分组交换</strong>优于<strong>电路交换</strong>。其中分组交换时延更小</li>
</ol>
<h1 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h1><h2 id="路由算法-1"><a href="#路由算法-1" class="headerlink" title="路由算法"></a>路由算法</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105170623003.png" alt="image-20210105170623003"></p>
<h2 id="路由算法分类"><a href="#路由算法分类" class="headerlink" title="路由算法分类"></a>路由算法分类</h2><ul>
<li><h3 id="静态路由算法"><a href="#静态路由算法" class="headerlink" title="静态路由算法"></a>静态路由算法</h3><blockquote>
<p><strong>非自适应路由算法</strong>，管理员手工配置路由信息</p>
</blockquote>
<ul>
<li><p>优点：</p>
<ul>
<li>简便、可靠</li>
<li>在负荷稳定、拓扑变化不大的网络中运行效果很好</li>
<li>广泛用于高度安全性的军事网络和较小的商业网络</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>路由更新慢</li>
<li>不适用大型网络</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><h3 id="动态路由算法"><a href="#动态路由算法" class="headerlink" title="动态路由算法"></a>动态路由算法</h3><blockquote>
<p><strong>自适应路由算法</strong>，路由器彼此交换信息，按照路由算法优化出路由表项</p>
</blockquote>
<ul>
<li>优点：<ul>
<li>路由更新快</li>
<li>适用于大型网络</li>
<li>及时响应链路费用及网络拓扑变化</li>
</ul>
</li>
<li>缺点：<ul>
<li>算法复杂，增加网络负担</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>  <strong>分类</strong>：</p>
<ul>
<li><p>全局性：链路状态路由算法（OSPF）</p>
<blockquote>
<p>所有路由器掌握完整的网络拓扑和链路费用信息</p>
</blockquote>
</li>
<li><p>分散性：距离向量路由算法（RIP）</p>
<blockquote>
<p>路由器只掌握物理相连的邻居及链路费用</p>
</blockquote>
</li>
</ul>
<h1 id="分层次的路由选择协议"><a href="#分层次的路由选择协议" class="headerlink" title="分层次的路由选择协议"></a>分层次的路由选择协议</h1><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><ol>
<li>因特网规模很大</li>
<li>很多单位不向让外界知道自己的路由器选择协议，但还想连入互联网</li>
</ol>
<h2 id="自治系统AS："><a href="#自治系统AS：" class="headerlink" title="自治系统AS："></a>自治系统AS：</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105172222420.png" alt="image-20210105172222420"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105172422404.png" alt="image-20210105172422404"></p>
<h2 id="路由选择协议分类："><a href="#路由选择协议分类：" class="headerlink" title="路由选择协议分类："></a>路由选择协议分类：</h2><h3 id="内部网关协议IGP（一个AS内使用）"><a href="#内部网关协议IGP（一个AS内使用）" class="headerlink" title="内部网关协议IGP（一个AS内使用）"></a>内部网关协议IGP（一个AS内使用）</h3><h4 id="RIP协议（应用层协议）"><a href="#RIP协议（应用层协议）" class="headerlink" title="RIP协议（应用层协议）"></a>RIP协议（应用层协议）</h4><blockquote>
<p>RIP是一种分布式的基于<strong>距离向量</strong>的路由选择协议，是因特网的协议标准，最大优点是简单。</p>
<p>只适用于项<em>小互联网</em></p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105174043671.png" alt="image-20210105174043671"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105174350585.png" alt="image-20210105174350585"></p>
<h5 id="距离向量算法"><a href="#距离向量算法" class="headerlink" title="距离向量算法"></a>距离向量算法</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105174641396.png" alt="image-20210105174641396"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105174839849.png" alt="image-20210105174839849"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105180204071.png" alt="image-20210105180204071"></p>
<h5 id="RIP协议的报文格式"><a href="#RIP协议的报文格式" class="headerlink" title="RIP协议的报文格式"></a>RIP协议的报文格式</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105180548481.png" alt="image-20210105180548481"></p>
<h5 id="RIP故障处理"><a href="#RIP故障处理" class="headerlink" title="RIP故障处理"></a>RIP故障处理</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105180900305.png" alt="image-20210105180900305"></p>
<h5 id="RIP脑图"><a href="#RIP脑图" class="headerlink" title="RIP脑图"></a>RIP脑图</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105180927653.png" alt="image-20210105180927653"></p>
<h4 id="OSPF协议"><a href="#OSPF协议" class="headerlink" title="OSPF协议"></a>OSPF协议</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105203912172.png" alt="image-20210105203912172"></p>
<h5 id="链路状态路由算法"><a href="#链路状态路由算法" class="headerlink" title="链路状态路由算法"></a>链路状态路由算法</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105204303935.png" alt="image-20210105204303935"></p>
<h5 id="OSPF的区域"><a href="#OSPF的区域" class="headerlink" title="OSPF的区域"></a>OSPF的区域</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105204525706.png" alt="image-20210105204525706"></p>
<h5 id="OSPF分组"><a href="#OSPF分组" class="headerlink" title="OSPF分组"></a>OSPF分组</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105214821869.png" alt="image-20210105214821869"></p>
<h5 id="OSPF其他特点"><a href="#OSPF其他特点" class="headerlink" title="OSPF其他特点"></a>OSPF其他特点</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105215014709.png" alt="image-20210105215014709"></p>
<h3 id="外部网关协议EGP"><a href="#外部网关协议EGP" class="headerlink" title="外部网关协议EGP"></a>外部网关协议EGP</h3><ul>
<li>AS之间使用的</li>
<li>BGP</li>
</ul>
<h4 id="BGP协议"><a href="#BGP协议" class="headerlink" title="BGP协议"></a>BGP协议</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105215633890.png" alt="image-20210105215633890"></p>
<h5 id="BGP协议交换信息的过程"><a href="#BGP协议交换信息的过程" class="headerlink" title="BGP协议交换信息的过程"></a>BGP协议交换信息的过程</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105215841220.png" alt="image-20210105215841220"></p>
<ul>
<li>边界路由器身兼多职，AS内部协议+AS外部协议</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105220152970.png" alt="image-20210105220152970"></p>
<h5 id="BGP协议报文格式"><a href="#BGP协议报文格式" class="headerlink" title="BGP协议报文格式"></a>BGP协议报文格式</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105220318039.png" alt="image-20210105220318039"></p>
<h5 id="BGP协议特点"><a href="#BGP协议特点" class="headerlink" title="BGP协议特点"></a>BGP协议特点</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105220403127.png" alt="image-20210105220403127"></p>
<h5 id="BGP-4的四种报文"><a href="#BGP-4的四种报文" class="headerlink" title="BGP-4的四种报文"></a>BGP-4的四种报文</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105220547895.png" alt="image-20210105220547895"></p>
<h3 id="三种路由协议比较"><a href="#三种路由协议比较" class="headerlink" title="三种路由协议比较"></a>三种路由协议比较</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105220720993.png" alt="image-20210105220720993"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210105220742246.png" alt="image-20210105220742246"></p>
<h1 id="IP数据报"><a href="#IP数据报" class="headerlink" title="IP数据报"></a>IP数据报</h1><h2 id="TCP-IP协议栈"><a href="#TCP-IP协议栈" class="headerlink" title="TCP/IP协议栈"></a>TCP/IP协议栈</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106101254940.png" alt="image-20210106101254940"></p>
<h2 id="IP数据报格式"><a href="#IP数据报格式" class="headerlink" title="IP数据报格式"></a>IP数据报格式</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106101417077.png" alt="image-20210106101417077"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106102149226.png" alt="image-20210106102149226"></p>
<ul>
<li>协议字段：<ul>
<li>TCP 6</li>
<li>UDP 17</li>
</ul>
</li>
</ul>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106102828535.png" alt="image-20210106102828535"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106110250659.png" alt="image-20210106110250659"></p>
<ul>
<li>一种八片首饰</li>
</ul>
<h2 id="IP数据报分片"><a href="#IP数据报分片" class="headerlink" title="IP数据报分片"></a>IP数据报分片</h2><h3 id="最大传输带元MTU"><a href="#最大传输带元MTU" class="headerlink" title="最大传输带元MTU"></a>最大传输带元MTU</h3><blockquote>
<p>链路层数据帧可封装的数据的上限。</p>
<p>以太网的MTU是1500字节。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106102501128.png" alt="image-20210106102501128"></p>
<h3 id="IP数据报分片例题"><a href="#IP数据报分片例题" class="headerlink" title="IP数据报分片例题"></a>IP数据报分片例题</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106110058800.png" alt="image-20210106110058800"></p>
<h2 id="IPv4地址"><a href="#IPv4地址" class="headerlink" title="IPv4地址"></a>IPv4地址</h2><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106110545943.png" alt="image-20210106110545943"></p>
<h3 id="IP编制的历史阶段"><a href="#IP编制的历史阶段" class="headerlink" title="IP编制的历史阶段"></a>IP编制的历史阶段</h3><ul>
<li>分类的IP地址</li>
<li>子网的划分</li>
<li>构成超网（无分类编址方法）</li>
</ul>
<h3 id="一、分类的IP地址"><a href="#一、分类的IP地址" class="headerlink" title="一、分类的IP地址"></a>一、分类的IP地址</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106110905405.png" alt="image-20210106110905405"></p>
<ul>
<li>IP地址：<ul>
<li>全世界唯一的<strong>32位/4字节</strong>标识符，标识路由器主机的接口</li>
<li>网络号，主机号</li>
<li>点分十进制</li>
</ul>
</li>
</ul>
<h4 id="互联网中的IP地址"><a href="#互联网中的IP地址" class="headerlink" title="互联网中的IP地址"></a>互联网中的IP地址</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106111258905.png" alt="image-20210106111258905"></p>
<ul>
<li>网桥分网段不分广播域</li>
<li>路由器分广播域</li>
</ul>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106111509936.png" alt="image-20210106111509936"></p>
<h4 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106111803171.png" alt="image-20210106111803171"></p>
<h4 id="私有IP地址"><a href="#私有IP地址" class="headerlink" title="私有IP地址"></a>私有IP地址</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106112018905.png" alt="image-20210106112018905"></p>
<h4 id="分类IP可使用数"><a href="#分类IP可使用数" class="headerlink" title="分类IP可使用数"></a>分类IP可使用数</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106112320617.png" alt="image-20210106112320617"></p>
<h4 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106113044397.png" alt="image-20210106113044397"></p>
<ul>
<li>NET转换表<ul>
<li>请求结构：{【源地址】，【目的地址】，【端口号】}</li>
<li>​    每一行都一一对应</li>
<li>局域内网通信对应LAN端</li>
<li>通过路由器与外网连接对应WAN端</li>
<li>内网主机想访问外网内容要先通过路由器NET转换，从LAN接口转到WAN去访问</li>
</ul>
</li>
</ul>
<h3 id="二、子网划分"><a href="#二、子网划分" class="headerlink" title="二、子网划分"></a>二、子网划分</h3><h4 id="分类IP地址弱点"><a href="#分类IP地址弱点" class="headerlink" title="分类IP地址弱点"></a>分类IP地址弱点</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106113654134.png" alt="image-20210106113654134"></p>
<ol>
<li>IP地址空间的利用率有时候很低<ul>
<li>可能根本用不到那么多主机号，没那么多设备</li>
</ul>
</li>
<li>两级IP地址不够灵活</li>
</ol>
<h4 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106114100549.png" alt="image-20210106114100549"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106114231410.png" alt="image-20210106114231410"></p>
<h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106114503899.png" alt="image-20210106114503899"></p>
<ul>
<li>子网掩码与IP地址逐位相与，就得到子网网络地址</li>
</ul>
<h4 id="子网掩码习题"><a href="#子网掩码习题" class="headerlink" title="子网掩码习题"></a>子网掩码习题</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106115008878.png" alt="image-20210106115008878"></p>
<p>72 = $2^6 + 2^3$        第7位，第4位</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106115818109.png" alt="image-20210106115818109"></p>
<ul>
<li><p>子网掩码：255.255.252.0</p>
<ul>
<li>252即11111100，即前面的8+8+6=22位作为网络号，后面10位主机号</li>
</ul>
</li>
<li><p>IP地址：180.80.77.55</p>
<ul>
<li>180说明是B类IP地址，所以16位作为网络号，6位子网号</li>
<li>77对应01001101，取前6位即子网号010011</li>
<li>主机所在网络号180.80.76.0</li>
</ul>
</li>
<li><p>广播地址：</p>
<ul>
<li>主机号全1，（BCD都有可能，因为不知道子网号占多少位）</li>
<li>所以要把IP地址中后10位全部变为1，导致76-&gt;79，55-&gt;255</li>
<li>最终答案180.80.79.255</li>
</ul>
</li>
</ul>
<h4 id="使用子网时分组的转发"><a href="#使用子网时分组的转发" class="headerlink" title="使用子网时分组的转发"></a>使用子网时分组的转发</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106121227641.png" alt="image-20210106121227641"></p>
<ul>
<li>使用相与的操作</li>
<li>超过分组的TTL生存时间会丢弃</li>
</ul>
<h3 id="三、无分类编址CIDR"><a href="#三、无分类编址CIDR" class="headerlink" title="三、无分类编址CIDR"></a>三、无分类编址CIDR</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106154036122.png" alt="image-20210106154036122"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106154210373.png" alt="image-20210106154210373"></p>
<h4 id="构成超网"><a href="#构成超网" class="headerlink" title="构成超网"></a>构成超网</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106154524023.png" alt="image-20210106154524023"></p>
<h4 id="最长前缀匹配"><a href="#最长前缀匹配" class="headerlink" title="最长前缀匹配"></a>最长前缀匹配</h4><p>![image-20210106155505326](/Users/fine/Library/Application Support/typora-user-images/image-20210106155505326.png)</p>
<h4 id="CIDR习题"><a href="#CIDR习题" class="headerlink" title="CIDR习题"></a>CIDR习题</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106155826382.png" alt="image-20210106155826382"></p>
<ul>
<li>IP地址：192.168.5.0/24<ul>
<li>24，说明前3位都是网络前缀，可以看作网络号</li>
<li>采用定长网络划分，说明将第四位又拿出来划分子网</li>
</ul>
</li>
<li>CIDR不用减去两个子网数目，还是32</li>
<li>主机个数要 -2，8-2=6，全0代表本机，全1代表广播地址，都不可指派</li>
</ul>
<h2 id="ARP协议（网络层协议）"><a href="#ARP协议（网络层协议）" class="headerlink" title="ARP协议（网络层协议）"></a>ARP协议（网络层协议）</h2><h3 id="发送数据的过程"><a href="#发送数据的过程" class="headerlink" title="发送数据的过程"></a>发送数据的过程</h3><ul>
<li>主机与目的机在一个网段</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106160914080.png" alt="image-20210106160914080"></p>
<ol>
<li>若ARP高速缓存中，有目的机IP地址和物理地址的映射，则直接发送</li>
<li>若没有，主机<strong>广播ARP请求分组</strong>：我是IP1，我要找IP3，我的物理地址是MAC1，IP3的地址是多少。由于全F即全1，为广播分组，所以路由器转发</li>
<li>当目的机收到这个请求，发现要找IP3，于是<strong>单播ARP响应分组</strong>：我是IP3，我的物理地址是MAC3</li>
</ol>
<ul>
<li>主机与目的机不在一个网段</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106161631930.png" alt="image-20210106161631930"></p>
<ol>
<li>主机广播后发现目的机不在，于是去找自己的默认路由，然后让默认路由代替自己完成上诉步骤。</li>
<li>在路由器那，源IP地址仍然是IP1，物理地址变成了MAC路由器</li>
</ol>
<h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><p>由于在实际网络的链路传送数据帧时，最终必须使用MAC地址。</p>
<blockquote>
<p><strong>ARP协议</strong>：完成主机或路由器IP地址到MAC地址的映射。解决下一跳走哪的</p>
<p>问题。</p>
</blockquote>
<ul>
<li><p>ARP协议使用过程：</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106162849486.png" alt="image-20210106162849486"></p>
</li>
</ul>
<ul>
<li><p>ARP协议4种典型情况</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106162922838.png" alt="image-20210106162922838"></p>
</li>
</ul>
<h3 id="ARP协议例题"><a href="#ARP协议例题" class="headerlink" title="ARP协议例题"></a>ARP协议例题</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106163106855.png" alt="image-20210106163106855"></p>
<h2 id="DHCP协议（应用层）"><a href="#DHCP协议（应用层）" class="headerlink" title="DHCP协议（应用层）"></a>DHCP协议（应用层）</h2><h3 id="主机如何获得IP地址"><a href="#主机如何获得IP地址" class="headerlink" title="主机如何获得IP地址"></a>主机如何获得IP地址</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106164321947.png" alt="image-20210106164321947"></p>
<h3 id="DHCP协议"><a href="#DHCP协议" class="headerlink" title="DHCP协议"></a>DHCP协议</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106164711570.png" alt="image-20210106164711570"></p>
<h2 id="ICMP协议（网络层）"><a href="#ICMP协议（网络层）" class="headerlink" title="ICMP协议（网络层）"></a>ICMP协议（网络层）</h2><h3 id="TCP-IP协议栈-1"><a href="#TCP-IP协议栈-1" class="headerlink" title="TCP/IP协议栈"></a>TCP/IP协议栈</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106164820299.png" alt="image-20210106164820299"></p>
<h3 id="网际控制报文协议ICMP"><a href="#网际控制报文协议ICMP" class="headerlink" title="网际控制报文协议ICMP"></a>网际控制报文协议ICMP</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106165013626.png" alt="image-20210106165013626"></p>
<h3 id="ICMP差错报文"><a href="#ICMP差错报文" class="headerlink" title="ICMP差错报文"></a>ICMP差错报文</h3><h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106165326147.png" alt="image-20210106165326147"></p>
<h4 id="ICMP差错报告报文数据字段"><a href="#ICMP差错报告报文数据字段" class="headerlink" title="ICMP差错报告报文数据字段"></a>ICMP差错报告报文数据字段</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106165436242.png" alt="image-20210106165436242"></p>
<h4 id="不应发送ICMP差错报文的情况"><a href="#不应发送ICMP差错报文的情况" class="headerlink" title="不应发送ICMP差错报文的情况"></a>不应发送ICMP差错报文的情况</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106165610803.png" alt="image-20210106165610803"></p>
<h3 id="ICMP询问报文"><a href="#ICMP询问报文" class="headerlink" title="ICMP询问报文"></a>ICMP询问报文</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106165722695.png" alt="image-20210106165722695"></p>
<ul>
<li>3、4已经没有使用了</li>
</ul>
<h3 id="ICMP的应用"><a href="#ICMP的应用" class="headerlink" title="ICMP的应用"></a>ICMP的应用</h3><ul>
<li><p>PING</p>
<blockquote>
<p>测试两个主机之间的连通性，使用了<strong>ICMP回送请求和回答报文</strong></p>
</blockquote>
</li>
<li><p>Traceroute</p>
<blockquote>
<p>跟踪一个分组从源点到终点的路径，使用了<strong>ICMP时间超过差错报告报文</strong></p>
</blockquote>
</li>
</ul>
<h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><h3 id="为什么有IPv6"><a href="#为什么有IPv6" class="headerlink" title="为什么有IPv6"></a>为什么有IPv6</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106170218742.png" alt="image-20210106170218742"></p>
<h3 id="IPv6数据报格式"><a href="#IPv6数据报格式" class="headerlink" title="IPv6数据报格式"></a>IPv6数据报格式</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106170329453.png" alt="image-20210106170329453"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106170640936.png" alt="image-20210106170640936"></p>
<h3 id="IPv6和IPv4"><a href="#IPv6和IPv4" class="headerlink" title="IPv6和IPv4"></a>IPv6和IPv4</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106170935513.png" alt="image-20210106170935513"></p>
<h3 id="IPv6地址表示形式"><a href="#IPv6地址表示形式" class="headerlink" title="IPv6地址表示形式"></a>IPv6地址表示形式</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106171225102.png" alt="image-20210106171225102"></p>
<h3 id="IPv6基本地址类型"><a href="#IPv6基本地址类型" class="headerlink" title="IPv6基本地址类型"></a>IPv6基本地址类型</h3><ul>
<li>单播<ul>
<li>一对一通信</li>
<li>可做源地址+目的地址</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106171611145.png" alt="image-20210106171611145"></li>
</ul>
</li>
<li>多播<ul>
<li>一对多通信</li>
<li>可做目的地址</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106171627687.png" alt="image-20210106171627687"></li>
</ul>
</li>
<li>任播<ul>
<li>一对多中的一个通信</li>
<li>可做目的地址</li>
<li><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106171642180.png" alt="image-20210106171642180"></li>
</ul>
</li>
</ul>
<h3 id="IPv6向IPv4过渡的策略"><a href="#IPv6向IPv4过渡的策略" class="headerlink" title="IPv6向IPv4过渡的策略"></a>IPv6向IPv4过渡的策略</h3><ul>
<li><p><strong>双栈协议</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106171920372.png" alt="image-20210106171920372"></p>
</li>
</ul>
<ul>
<li><p><strong>隧道技术</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106172009553.png" alt="image-20210106172009553"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106172025249.png" alt="image-20210106172025249"></p>
</li>
</ul>
<h3 id="IPv6脑图"><a href="#IPv6脑图" class="headerlink" title="IPv6脑图"></a>IPv6脑图</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106172139279.png" alt="image-20210106172139279"></p>
<h2 id="IP组播"><a href="#IP组播" class="headerlink" title="IP组播"></a>IP组播</h2><h3 id="IP数据报的三种传输方式"><a href="#IP数据报的三种传输方式" class="headerlink" title="IP数据报的三种传输方式"></a>IP数据报的三种传输方式</h3><ul>
<li><p>单播</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106172812161.png" alt="image-20210106172812161"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106173105860.png" alt="image-20210106173105860"></p>
</li>
</ul>
<ul>
<li><p>广播</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106172832337.png" alt="image-20210106172832337"></p>
</li>
</ul>
<ul>
<li><p>组播（多播）</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106172910093.png" alt="image-20210106172910093"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106173241696.png"></p>
</li>
</ul>
<h3 id="IP组播地址"><a href="#IP组播地址" class="headerlink" title="IP组播地址"></a>IP组播地址</h3><blockquote>
<p>IP组播地址让源设备能够将分组发送给一组设备。属于多播组的设备将被分配<strong>一个组播组IP地址</strong>（一群共同需求主机的相同标识）</p>
</blockquote>
<ul>
<li>源地址总是单播地址</li>
<li>组播地址只能用作分组的目标地址</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106173832147.png" alt="image-20210106173832147"></p>
<h3 id="硬件组播"><a href="#硬件组播" class="headerlink" title="硬件组播"></a>硬件组播</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106174150168.png" alt="image-20210106174150168"></p>
<ul>
<li>01-00-5E</li>
</ul>
<h3 id="因特网范围内组播"><a href="#因特网范围内组播" class="headerlink" title="因特网范围内组播"></a>因特网范围内组播</h3><h4 id="网际组管理协议IGMP协议（网络层）"><a href="#网际组管理协议IGMP协议（网络层）" class="headerlink" title="网际组管理协议IGMP协议（网络层）"></a>网际组管理协议IGMP协议（网络层）</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106174748133.png" alt="image-20210106174748133"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106174722052.png" alt="image-20210106174722052"></p>
<p>IGMP<strong>工作的两个阶段</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106174950473.png" alt="image-20210106174950473"></p>
<h4 id="组播路由选择协议"><a href="#组播路由选择协议" class="headerlink" title="组播路由选择协议"></a>组播路由选择协议</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106175118037.png" alt="image-20210106175118037"></p>
<p>组播路由选择协议常使用的三种算法：</p>
<ol>
<li>基于链路状态的路由选择</li>
<li>基于距离-向量的路由选择</li>
<li>协议无关的组播（稀疏/密集）</li>
</ol>
<h3 id="IP组播脑图"><a href="#IP组播脑图" class="headerlink" title="IP组播脑图"></a>IP组播脑图</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106175325967.png" alt="image-20210106175325967"></p>
<h2 id="移动IP"><a href="#移动IP" class="headerlink" title="移动IP"></a>移动IP</h2><h3 id="移动IP相关术语"><a href="#移动IP相关术语" class="headerlink" title="移动IP相关术语"></a>移动IP相关术语</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106175526732.png" alt="image-20210106175526732"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106175654950.png" alt="image-20210106175654950"></p>
<h3 id="移动IP通信过程"><a href="#移动IP通信过程" class="headerlink" title="移动IP通信过程"></a>移动IP通信过程</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106180013997.png" alt="image-20210106180013997"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106180127519.png" alt="image-20210106180127519"></p>
<h1 id="网络层设备"><a href="#网络层设备" class="headerlink" title="网络层设备"></a>网络层设备</h1><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106180403926.png" alt="image-20210106180403926"></p>
<h3 id="输入端口对线路上收到的分组的处理"><a href="#输入端口对线路上收到的分组的处理" class="headerlink" title="输入端口对线路上收到的分组的处理"></a>输入端口对线路上收到的分组的处理</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106180519277.png" alt="image-20210106180519277"></p>
<h3 id="输出端口将交换结构传送来的分组发送到线路"><a href="#输出端口将交换结构传送来的分组发送到线路" class="headerlink" title="输出端口将交换结构传送来的分组发送到线路"></a>输出端口将交换结构传送来的分组发送到线路</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106180622007.png"></p>
<h2 id="三层设备的区别"><a href="#三层设备的区别" class="headerlink" title="三层设备的区别"></a>三层设备的区别</h2><ul>
<li>路由器：<ul>
<li>可以互联两个不同网络层协议的网段</li>
</ul>
</li>
<li>网桥：<ul>
<li>可以互联两个物理层和链路层不同的网段</li>
</ul>
</li>
<li>集线器：<ul>
<li>不能互联两个物理层不同的网段</li>
</ul>
</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106180908794.png" alt="image-20210106180908794"></p>
<h2 id="路由表和路由转发"><a href="#路由表和路由转发" class="headerlink" title="路由表和路由转发"></a>路由表和路由转发</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210106181034023.png" alt="image-20210106181034023"></p>
<h1 id="第四章总结"><a href="#第四章总结" class="headerlink" title="第四章总结"></a>第四章总结</h1><p>Xmind</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>java IO流</title>
    <url>/posts/16f38452/</url>
    <content><![CDATA[<h1 id="File类的使用"><a href="#File类的使用" class="headerlink" title="File类的使用"></a>File类的使用</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210311163847139.png" alt="image-20210311163847139"></p>
<ol>
<li><p>File类的一个对象，代表一个文件或一个文件目录(俗称：文件夹)</p>
</li>
<li><p>File类声明在java.io包下</p>
</li>
<li><p>File类中涉及到关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，</p>
</li>
<li><p>并未涉及到写入或读取文件内容的操作。如果需要读取或写入文件内容，必须使用IO流来完成。</p>
</li>
<li><p>后续File类的对象常会作为参数传递到流的构造器中，指明读取或写入的”终点”.</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.如何创建File类的实例</span></span><br><span class="line"><span class="comment">        File(String filePath)</span></span><br><span class="line"><span class="comment">        File(String parentPath,String childPath)</span></span><br><span class="line"><span class="comment">        File(File parentFile,String childPath)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2.</span></span><br><span class="line"><span class="comment">    相对路径：相较于某个路径下，指明的路径。</span></span><br><span class="line"><span class="comment">    绝对路径：包含盘符在内的文件或文件目录的路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3.路径分隔符</span></span><br><span class="line"><span class="comment">     windows:\\</span></span><br><span class="line"><span class="comment">     unix:/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造器1</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相对于当前module</span></span><br><span class="line">        File file2 =  <span class="keyword">new</span> File(<span class="string">&quot;D:\\workspace_idea1\\JavaSenior\\day08\\he.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file1);</span><br><span class="line">        System.out.println(file2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器2：</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\workspace_idea1&quot;</span>,<span class="string">&quot;JavaSenior&quot;</span>);</span><br><span class="line">        System.out.println(file3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器3：</span></span><br><span class="line">        File file4 = <span class="keyword">new</span> File(file3,<span class="string">&quot;hi.txt&quot;</span>);</span><br><span class="line">        System.out.println(file4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    public String getAbsolutePath()：获取绝对路径</span></span><br><span class="line"><span class="comment">    public String getPath() ：获取路径</span></span><br><span class="line"><span class="comment">    public String getName() ：获取名称</span></span><br><span class="line"><span class="comment">    public String getParent()：获取上层文件目录路径。若无，返回null</span></span><br><span class="line"><span class="comment">    public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</span></span><br><span class="line"><span class="comment">    public long lastModified() ：获取最后一次的修改时间，毫秒值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    如下的两个方法适用于文件目录：</span></span><br><span class="line"><span class="comment">    public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</span></span><br><span class="line"><span class="comment">    public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io\\hi.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file1.getAbsolutePath());</span><br><span class="line">        System.out.println(file1.getPath());</span><br><span class="line">        System.out.println(file1.getName());</span><br><span class="line">        System.out.println(file1.getParent());</span><br><span class="line">        System.out.println(file1.length());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date(file1.lastModified()));</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(file2.getAbsolutePath());</span><br><span class="line">        System.out.println(file2.getPath());</span><br><span class="line">        System.out.println(file2.getName());</span><br><span class="line">        System.out.println(file2.getParent());</span><br><span class="line">        System.out.println(file2.length());</span><br><span class="line">        System.out.println(file2.lastModified());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\workspace_idea1\\JavaSenior&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] list = file.list();</span><br><span class="line">        <span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File f : files)&#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    public boolean renameTo(File dest):把文件重命名为指定的文件路径</span></span><br><span class="line"><span class="comment">     比如：file1.renameTo(file2)为例：</span></span><br><span class="line"><span class="comment">        要想保证返回true,需要file1在硬盘中是存在的，且file2不能在硬盘中存在。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\io\\hi.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> renameTo = file2.renameTo(file1);</span><br><span class="line">        System.out.println(renameTo);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    public boolean isDirectory()：判断是否是文件目录</span></span><br><span class="line"><span class="comment">    public boolean isFile() ：判断是否是文件</span></span><br><span class="line"><span class="comment">    public boolean exists() ：判断是否存在</span></span><br><span class="line"><span class="comment">    public boolean canRead() ：判断是否可读</span></span><br><span class="line"><span class="comment">    public boolean canWrite() ：判断是否可写</span></span><br><span class="line"><span class="comment">    public boolean isHidden() ：判断是否隐藏</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file1.isDirectory());</span><br><span class="line">        System.out.println(file1.isFile());</span><br><span class="line">        System.out.println(file1.exists());</span><br><span class="line">        System.out.println(file1.canRead());</span><br><span class="line">        System.out.println(file1.canWrite());</span><br><span class="line">        System.out.println(file1.isHidden());</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io&quot;</span>);</span><br><span class="line">        file2 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io1&quot;</span>);</span><br><span class="line">        System.out.println(file2.isDirectory());</span><br><span class="line">        System.out.println(file2.isFile());</span><br><span class="line">        System.out.println(file2.exists());</span><br><span class="line">        System.out.println(file2.canRead());</span><br><span class="line">        System.out.println(file2.canWrite());</span><br><span class="line">        System.out.println(file2.isHidden());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建硬盘中对应的文件或文件目录</span></span><br><span class="line"><span class="comment">    public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</span></span><br><span class="line"><span class="comment">    public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</span></span><br><span class="line"><span class="comment">    public boolean mkdirs() ：创建文件目录。如果此文件目录存在，就不创建了。如果上层文件目录不存在，一并创建</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    删除磁盘中的文件或文件目录</span></span><br><span class="line"><span class="comment">public boolean delete()：删除文件或者文件夹</span></span><br><span class="line"><span class="comment">    删除注意事项：Java中的删除不走回收站。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hi.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!file1.exists())&#123;</span><br><span class="line">            <span class="comment">//文件的创建</span></span><br><span class="line">            file1.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//文件存在</span></span><br><span class="line">            file1.delete();</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//文件目录的创建</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io\\io1\\io3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> mkdir = file1.mkdir();</span><br><span class="line">        <span class="keyword">if</span>(mkdir)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io\\io1\\io4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> mkdir1 = file2.mkdirs();</span><br><span class="line">        <span class="keyword">if</span>(mkdir1)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要想删除成功，io4文件目录下不能有子目录或文件</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\io\\io1\\io4&quot;</span>);</span><br><span class="line">        file3 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\io\\io1&quot;</span>);</span><br><span class="line">        System.out.println(file3.delete());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\io\\io1\\hello.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建一个与file同目录下的另外一个文件，文件名为：haha.txt</span></span><br><span class="line">        File destFile = <span class="keyword">new</span> File(file.getParent(),<span class="string">&quot;haha.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> newFile = destFile.createNewFile();</span><br><span class="line">        <span class="keyword">if</span>(newFile)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课后练习2：判断指定目录下是否有后缀名为.jpg的文件，如果有，就输出该文件名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart 邮箱：shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>  创建时间：2019年2月23日  上午1:55:59</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindJPGFileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;d:\\code&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		String[] fileNames = srcFile.list();</span><br><span class="line">		<span class="keyword">for</span>(String fileName : fileNames)&#123;</span><br><span class="line">			<span class="keyword">if</span>(fileName.endsWith(<span class="string">&quot;.jpg&quot;</span>))&#123;</span><br><span class="line">				System.out.println(fileName);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">		File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;d:\\code&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		File[] listFiles = srcFile.listFiles();</span><br><span class="line">		<span class="keyword">for</span>(File file : listFiles)&#123;</span><br><span class="line">			<span class="keyword">if</span>(file.getName().endsWith(<span class="string">&quot;.jpg&quot;</span>))&#123;</span><br><span class="line">				System.out.println(file.getAbsolutePath());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * File类提供了两个文件过滤器方法</span></span><br><span class="line"><span class="comment">	 * public String[] list(FilenameFilter filter)</span></span><br><span class="line"><span class="comment">	 * public File[] listFiles(FileFilter filter)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">		File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;d:\\code&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		File[] subFiles = srcFile.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> name.endsWith(<span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(File file : subFiles)&#123;</span><br><span class="line">			System.out.println(file.getAbsolutePath());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3. 遍历指定目录所有文件名称，包括子文件目录中的文件。</span></span><br><span class="line"><span class="comment">	拓展1：并计算指定目录占用空间的大小</span></span><br><span class="line"><span class="comment">	拓展2：删除指定文件目录及其下的所有文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart 邮箱：shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>  创建时间：2019年2月23日  上午1:55:31</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListFilesTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 递归:文件目录</span></span><br><span class="line">		<span class="comment">/** 打印出指定目录所有文件名称，包括子文件目录中的文件 */</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 1.创建目录对象</span></span><br><span class="line">		File dir = <span class="keyword">new</span> File(<span class="string">&quot;E:\\teach\\01_javaSE\\_尚硅谷Java编程语言\\3_软件&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 2.打印目录的子文件</span></span><br><span class="line">		printSubFile(dir);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printSubFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 打印目录的子文件</span></span><br><span class="line">		File[] subfiles = dir.listFiles();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (File f : subfiles) &#123;</span><br><span class="line">			<span class="keyword">if</span> (f.isDirectory()) &#123;<span class="comment">// 文件目录</span></span><br><span class="line">				printSubFile(f);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;<span class="comment">// 文件</span></span><br><span class="line">				System.out.println(f.getAbsolutePath());</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 方式二：循环实现</span></span><br><span class="line">	<span class="comment">// 列出file目录的下级内容，仅列出一级的话</span></span><br><span class="line">	<span class="comment">// 使用File类的String[] list()比较简单</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listSubFiles</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">			String[] all = file.list();</span><br><span class="line">			<span class="keyword">for</span> (String s : all) &#123;</span><br><span class="line">				System.out.println(s);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(file + <span class="string">&quot;是文件！&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 列出file目录的下级，如果它的下级还是目录，接着列出下级的下级，依次类推</span></span><br><span class="line">	<span class="comment">// 建议使用File类的File[] listFiles()</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listAllSubFiles</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">			System.out.println(file);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			File[] all = file.listFiles();</span><br><span class="line">			<span class="comment">// 如果all[i]是文件，直接打印</span></span><br><span class="line">			<span class="comment">// 如果all[i]是目录，接着再获取它的下一级</span></span><br><span class="line">			<span class="keyword">for</span> (File f : all) &#123;</span><br><span class="line">				listAllSubFiles(f);<span class="comment">// 递归调用：自己调用自己就叫递归</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 拓展1：求指定目录所在空间的大小</span></span><br><span class="line">	<span class="comment">// 求任意一个目录的总大小</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDirectorySize</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// file是文件，那么直接返回file.length()</span></span><br><span class="line">		<span class="comment">// file是目录，把它的下一级的所有大小加起来就是它的总大小</span></span><br><span class="line">		<span class="keyword">long</span> size = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">			size += file.length();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			File[] all = file.listFiles();<span class="comment">// 获取file的下一级</span></span><br><span class="line">			<span class="comment">// 累加all[i]的大小</span></span><br><span class="line">			<span class="keyword">for</span> (File f : all) &#123;</span><br><span class="line">				size += getDirectorySize(f);<span class="comment">// f的大小;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> size;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 拓展2：删除指定的目录</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDirectory</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 如果file是文件，直接delete</span></span><br><span class="line">		<span class="comment">// 如果file是目录，先把它的下一级干掉，然后删除自己</span></span><br><span class="line">		<span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">			File[] all = file.listFiles();</span><br><span class="line">			<span class="comment">// 循环删除的是file的下一级</span></span><br><span class="line">			<span class="keyword">for</span> (File f : all) &#123;<span class="comment">// f代表file的每一个下级</span></span><br><span class="line">				deleteDirectory(f);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 删除自己</span></span><br><span class="line">		file.delete();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="IO流原理及流的分类"><a href="#IO流原理及流的分类" class="headerlink" title="IO流原理及流的分类"></a>IO流原理及流的分类</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210317195115375.png" alt="image-20210317195115375"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210317195205133.png" alt="image-20210317195205133"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210317195620994.png" alt="image-20210317195620994"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210317195833958.png" alt="image-20210317195833958"></p>
<h1 id="节点流（或文件流）"><a href="#节点流（或文件流）" class="headerlink" title="节点流（或文件流）"></a>节点流（或文件流）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 一、流的分类：</span></span><br><span class="line"><span class="comment"> * 1.操作数据单位：字节流、字符流</span></span><br><span class="line"><span class="comment"> * 2.数据的流向：输入流、输出流</span></span><br><span class="line"><span class="comment"> * 3.流的角色：节点流、处理流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderWriterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相较于当前工程</span></span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;day09\\hello.txt&quot;</span>);</span><br><span class="line">        System.out.println(file1.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将day09下的hello.txt文件内容读入程序中，并输出到控制台</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    说明点：</span></span><br><span class="line"><span class="comment">    1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class="line"><span class="comment">    2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">    3. 读入的文件一定要存在，否则就会报FileNotFoundException。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReader</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.实例化File类的对象，指明要操作的文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相较于当前Module</span></span><br><span class="line">            <span class="comment">//2.提供具体的流</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入</span></span><br><span class="line">            <span class="comment">//read():返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//        int data = fr.read();</span></span><br><span class="line"><span class="comment">//        while(data != -1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)data);</span></span><br><span class="line"><span class="comment">//            data = fr.read();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：语法上针对于方式一的修改</span></span><br><span class="line">            <span class="keyword">int</span> data;</span><br><span class="line">            <span class="keyword">while</span>((data = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.流的关闭操作</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                if(fr != null)</span></span><br><span class="line"><span class="comment">//                    fr.close();</span></span><br><span class="line"><span class="comment">//            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//或</span></span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对read()操作升级：使用read的重载方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReader1</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.File类的实例化</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.FileReader流的实例化</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.读入的操作</span></span><br><span class="line">            <span class="comment">//read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//方式一：</span></span><br><span class="line">                <span class="comment">//错误的写法</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt; cbuf.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//正确的写法</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt; len;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//方式二：</span></span><br><span class="line">                <span class="comment">//错误的写法,对应着方式一的错误的写法</span></span><br><span class="line"><span class="comment">//                String str = new String(cbuf);</span></span><br><span class="line"><span class="comment">//                System.out.print(str);</span></span><br><span class="line">                <span class="comment">//正确的写法</span></span><br><span class="line">                String str = <span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//4.资源的关闭</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    从内存中写出数据到硬盘的文件里。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    说明：</span></span><br><span class="line"><span class="comment">    1. 输出操作，对应的File可以不存在的。并不会报异常</span></span><br><span class="line"><span class="comment">    2.</span></span><br><span class="line"><span class="comment">         File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。</span></span><br><span class="line"><span class="comment">         File对应的硬盘中的文件如果存在：</span></span><br><span class="line"><span class="comment">                如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原有文件的覆盖</span></span><br><span class="line"><span class="comment">                如果流使用的构造器是：FileWriter(file,true):不会对原有文件覆盖，而是在原有文件基础上追加内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.提供File类的对象，指明写出到的文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.提供FileWriter的对象，用于数据的写出</span></span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(file,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.写出的操作</span></span><br><span class="line">            fw.write(<span class="string">&quot;I have a dream!\n&quot;</span>);</span><br><span class="line">            fw.write(<span class="string">&quot;you need to have a dream!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.流资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReaderFileWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File类的对象，指明读入和写出的文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">&quot;hello2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不能使用字符流来处理图片等字节数据</span></span><br><span class="line"><span class="comment">//            File srcFile = new File(&quot;爱情与友情.jpg&quot;);</span></span><br><span class="line"><span class="comment">//            File destFile = new File(&quot;爱情与友情1.jpg&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建输入流和输出流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(srcFile);</span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(destFile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入和写出操作</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;<span class="comment">//记录每次读入到cbuf数组中的字符的个数</span></span><br><span class="line">            <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//每次写出len个字符</span></span><br><span class="line">                fw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流资源</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                if(fw != null)</span></span><br><span class="line"><span class="comment">//                    fw.close();</span></span><br><span class="line"><span class="comment">//            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;finally&#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    if(fr != null)</span></span><br><span class="line"><span class="comment">//                        fr.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//方式二：</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                    fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试FileInputStream和FileOutputStream的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 结论：</span></span><br><span class="line"><span class="comment"> * 1. 对于文本文件(.txt,.java,.c,.cpp)，使用字符流处理</span></span><br><span class="line"><span class="comment"> * 2. 对于非文本文件(.jpg,.mp3,.mp4,.avi,.doc,.ppt,...)，使用字节流处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 下午 2:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputOutputStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用字节流FileInputStream处理文本文件，可能出现乱码。</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileInputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 造文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.读数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;<span class="comment">//记录每次读取的字节的个数</span></span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                String str = <span class="keyword">new</span> String(buffer,<span class="number">0</span>,len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//4.关闭资源</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现对图片的复制操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileInputOutputStream</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情.jpg&quot;</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情2.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//复制的过程</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定路径下文件的复制</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//复制的过程</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        String srcPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\01-视频.avi&quot;</span>;</span><br><span class="line">        String destPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\02-视频.avi&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String srcPath = &quot;hello.txt&quot;;</span></span><br><span class="line"><span class="comment">//        String destPath = &quot;hello3.txt&quot;;</span></span><br><span class="line"></span><br><span class="line">        copyFile(srcPath,destPath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;复制操作花费的时间为：&quot;</span> + (end - start));<span class="comment">//618</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理流之一：缓冲流的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.缓冲流：</span></span><br><span class="line"><span class="comment"> * BufferedInputStream</span></span><br><span class="line"><span class="comment"> * BufferedOutputStream</span></span><br><span class="line"><span class="comment"> * BufferedReader</span></span><br><span class="line"><span class="comment"> * BufferedWriter</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.作用：提供流的读取、写入的速度</span></span><br><span class="line"><span class="comment"> *   提高读写速度的原因：内部提供了一个缓冲区</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. 处理流，就是“套接”在已有的流的基础上。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 下午 2:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现非文本文件的复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BufferedStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情.jpg&quot;</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情3.jpg&quot;</span>);</span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            <span class="comment">//2.1 造节点流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream((srcFile));</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制的细节：读取、写入</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = bis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line"></span><br><span class="line"><span class="comment">//                bos.flush();//刷新缓冲区</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">            <span class="keyword">if</span>(bos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现文件复制的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFileWithBuffered</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            <span class="comment">//2.1 造节点流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream((srcFile));</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制的细节：读取、写入</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = bis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">            <span class="keyword">if</span>(bos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyFileWithBuffered</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        String srcPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\01-视频.avi&quot;</span>;</span><br><span class="line">        String destPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\03-视频.avi&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        copyFileWithBuffered(srcPath,destPath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;复制操作花费的时间为：&quot;</span> + (end - start));<span class="comment">//618 - 176</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用BufferedReader和BufferedWriter实现文本文件的复制</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBufferedReaderBufferedWriter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建文件和相应的流</span></span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">&quot;dbcp.txt&quot;</span>)));</span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">&quot;dbcp1.txt&quot;</span>)));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读写操作</span></span><br><span class="line">            <span class="comment">//方式一：使用char[]数组</span></span><br><span class="line"><span class="comment">//            char[] cbuf = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while((len = br.read(cbuf)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//                bw.write(cbuf,0,len);</span></span><br><span class="line"><span class="comment">//    //            bw.flush();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：使用String</span></span><br><span class="line">            String data;</span><br><span class="line">            <span class="keyword">while</span>((data = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//方法一：</span></span><br><span class="line"><span class="comment">//                bw.write(data + &quot;\n&quot;);//data中不包含换行符</span></span><br><span class="line">                <span class="comment">//方法二：</span></span><br><span class="line">                bw.write(data);<span class="comment">//data中不包含换行符</span></span><br><span class="line">                bw.newLine();<span class="comment">//提供换行的操作</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span>(bw != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="图片的加密"><a href="#图片的加密" class="headerlink" title="图片的加密"></a>图片的加密</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PicTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片的加密</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;爱情与友情.jpg&quot;</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;爱情与友情secret.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//字节数组进行修改</span></span><br><span class="line">                <span class="comment">//错误的</span></span><br><span class="line">                <span class="comment">//            for(byte b : buffer)&#123;</span></span><br><span class="line">                <span class="comment">//                b = (byte) (b ^ 5);</span></span><br><span class="line">                <span class="comment">//            &#125;</span></span><br><span class="line">                <span class="comment">//正确的</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                    buffer[i] = (<span class="keyword">byte</span>) (buffer[i] ^ <span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片的解密</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;爱情与友情secret.jpg&quot;</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;爱情与友情4.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//字节数组进行修改</span></span><br><span class="line">                <span class="comment">//错误的</span></span><br><span class="line">                <span class="comment">//            for(byte b : buffer)&#123;</span></span><br><span class="line">                <span class="comment">//                b = (byte) (b ^ 5);</span></span><br><span class="line">                <span class="comment">//            &#125;</span></span><br><span class="line">                <span class="comment">//正确的</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                    buffer[i] = (<span class="keyword">byte</span>) (buffer[i] ^ <span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="获取文本上每一个字符出现的字数"><a href="#获取文本上每一个字符出现的字数" class="headerlink" title="获取文本上每一个字符出现的字数"></a>获取文本上每一个字符出现的字数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习3:获取文本上字符出现的次数,把数据写入文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> * 1.遍历文本每一个字符</span></span><br><span class="line"><span class="comment"> * 2.字符出现的次数存在Map中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Map&lt;Character,Integer&gt; map = new HashMap&lt;Character,Integer&gt;();</span></span><br><span class="line"><span class="comment"> * map.put(&#x27;a&#x27;,18);</span></span><br><span class="line"><span class="comment"> * map.put(&#x27;你&#x27;,2);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.把map中的数据写入文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 下午 3:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    说明：如果使用单元测试，文件相对路径为当前module</span></span><br><span class="line"><span class="comment">          如果使用main()测试，文件相对路径为当前工程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWordCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Map集合</span></span><br><span class="line">            Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.遍历每一个字符,每一个字符出现的次数放到map中</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;dbcp.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((c = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//int 还原 char</span></span><br><span class="line">                <span class="keyword">char</span> ch = (<span class="keyword">char</span>) c;</span><br><span class="line">                <span class="comment">// 判断char是否在map中第一次出现</span></span><br><span class="line">                <span class="keyword">if</span> (map.get(ch) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    map.put(ch, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(ch, map.get(ch) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.把map中数据存在文件count.txt</span></span><br><span class="line">            <span class="comment">//3.1 创建Writer</span></span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;wordcount.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.2 遍历map,再写入数据</span></span><br><span class="line">            Set&lt;Map.Entry&lt;Character, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry : entrySet) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (entry.getKey()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">                        bw.write(<span class="string">&quot;空格=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;\t&#x27;</span>:<span class="comment">//\t表示tab 键字符</span></span><br><span class="line">                        bw.write(<span class="string">&quot;tab键=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;\r&#x27;</span>:<span class="comment">//</span></span><br><span class="line">                        bw.write(<span class="string">&quot;回车=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>:<span class="comment">//</span></span><br><span class="line">                        bw.write(<span class="string">&quot;换行=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        bw.write(entry.getKey() + <span class="string">&quot;=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关流</span></span><br><span class="line">            <span class="keyword">if</span> (fr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210318174227628.png" alt="image-20210318174227628"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line"> * 处理流之二：转换流的使用</span><br><span class="line"> * <span class="number">1.</span>转换流：属于字符流</span><br><span class="line"> *   InputStreamReader：将一个字节的输入流转换为字符的输入流</span><br><span class="line"> *   OutputStreamWriter：将一个字符的输出流转换为字节的输出流</span><br><span class="line"> *</span><br><span class="line"> * <span class="number">2.</span>作用：提供字节流与字符流之间的转换</span><br><span class="line"> *</span><br><span class="line"> * <span class="number">3.</span> 解码：字节、字节数组  ---&gt;字符数组、字符串</span><br><span class="line"> *    编码：字符数组、字符串 ---&gt; 字节、字节数组</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * <span class="number">4.</span>字符集</span><br><span class="line"> *ASCII：美国标准信息交换码。</span><br><span class="line">    用一个字节的<span class="number">7</span>位可以表示。</span><br><span class="line"> ISO8859-<span class="number">1</span>：拉丁码表。欧洲码表</span><br><span class="line">    用一个字节的<span class="number">8</span>位表示。</span><br><span class="line"> GB2312：中国的中文编码表。最多两个字节编码所有字符</span><br><span class="line"> GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码</span><br><span class="line"> Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。</span><br><span class="line"> UTF-<span class="number">8</span>：变长的编码方式，可用<span class="number">1</span>-<span class="number">4</span>个字节来表示一个字符。</span><br><span class="line"></span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * <span class="meta">@author</span> shkstart</span><br><span class="line"> * <span class="meta">@create</span> <span class="number">2019</span> 下午 <span class="number">4</span>:<span class="number">25</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    此时处理异常的话，仍然应该使用try-catch-finally</span></span><br><span class="line"><span class="comment">    InputStreamReader的使用，实现字节的输入流到字符的输入流的转换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;dbcp.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        InputStreamReader isr = new InputStreamReader(fis);//使用系统默认的字符集</span></span><br><span class="line">        <span class="comment">//参数2指明了字符集，具体使用哪个字符集，取决于文件dbcp.txt保存时使用的字符集</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//使用系统默认的字符集</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            String str = <span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len);</span><br><span class="line">            System.out.print(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        isr.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    此时处理异常的话，仍然应该使用try-catch-finally</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    综合使用InputStreamReader和OutputStreamWriter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.造文件、造流</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;dbcp.txt&quot;</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;dbcp_gbk.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line"></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.读写过程</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.关闭资源</span></span><br><span class="line">        isr.close();</span><br><span class="line">        osw.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>计网第三章——数据链路层</title>
    <url>/posts/ce382230/</url>
    <content><![CDATA[<p>链路层的功能、链路层的两种信道、局域网、广域网、链路层的设备…</p>
<a id="more"></a>





<h1 id="数据链路层功能概述"><a href="#数据链路层功能概述" class="headerlink" title="数据链路层功能概述"></a>数据链路层功能概述</h1><h2 id="数据链路层的研究思想"><a href="#数据链路层的研究思想" class="headerlink" title="数据链路层的研究思想"></a>数据链路层的研究思想</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103093907401.png" alt="image-20210103093907401"></p>
<h2 id="数据链路层基本概念"><a href="#数据链路层基本概念" class="headerlink" title="数据链路层基本概念"></a>数据链路层基本概念</h2><ul>
<li><strong>结点</strong>：主机、路由器</li>
<li><strong>链路</strong>：网络中两个结点之间的<strong>物理通道</strong>，链路的传输介质主要有双绞线、光纤和微波。<ul>
<li>有线链路</li>
<li>无线链路</li>
</ul>
</li>
<li><strong>数据链路</strong>：网络中两个结点之间的<strong>逻辑通道</strong>，吧实现控制数据传输<strong>协议</strong>的硬件和软件加到链路上就构成数据链路。</li>
<li><strong>帧</strong>：链路层的协议数据单元，封装网络层数据报</li>
</ul>
<blockquote>
<p><strong>数据链路层</strong>负责通过一条链路从一个结点向另一个物理链路直接相连的相邻结点传送数据报。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103094412651.png" alt="image-20210103094412651"></p>
<h2 id="数据链路层功能概述-1"><a href="#数据链路层功能概述-1" class="headerlink" title="数据链路层功能概述"></a>数据链路层功能概述</h2><blockquote>
<p>数据链路层在物理层提供服务的基础上<strong>向网络层提供服务</strong>，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。</p>
<p>主要作用是<strong>加强物理层传输原始比特流的功能</strong>，将物理层提供的可能出错的物理连接改造成为<strong>逻辑上无差错的数据链路</strong>，使之对网络层表现为一条无差错的链路。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103094900498.png" alt="image-20210103094900498"></p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol>
<li><h4 id="为网络层提供服务"><a href="#为网络层提供服务" class="headerlink" title="为网络层提供服务"></a>为网络层提供服务</h4><ul>
<li>无确定无连接服务</li>
<li>有确认无连接服务</li>
<li>有确认面向连接服务（有连接一定有确认）</li>
</ul>
</li>
<li><h4 id="链路管理"><a href="#链路管理" class="headerlink" title="链路管理"></a>链路管理</h4><p>连接的建立、维持、释放</p>
</li>
<li><h4 id="组帧"><a href="#组帧" class="headerlink" title="组帧"></a>组帧</h4></li>
<li><h4 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h4><p>限制发送方</p>
</li>
<li><h4 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h4><ul>
<li>帧错</li>
<li>位错</li>
</ul>
</li>
</ol>
<h1 id="封装成帧和透明传输"><a href="#封装成帧和透明传输" class="headerlink" title="封装成帧和透明传输"></a>封装成帧和透明传输</h1><h2 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103095352283.png" alt="image-20210103095352283"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103095829243.png" alt="image-20210103095829243"></p>
<blockquote>
<p><strong>封装成帧</strong>就是在一段数据的前后部分添加首部和尾部，这样就构成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。</p>
</blockquote>
<h3 id="帧同步"><a href="#帧同步" class="headerlink" title="帧同步"></a>帧同步</h3><blockquote>
<p>接收方应当能从接收到的二进制比特流中区分出帧的起始和终止。</p>
</blockquote>
<h3 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h3><blockquote>
<p>指不管所传数据是什么，都能在链路上传送。因此，链路层看不见有什么妨碍数据传输的东西。</p>
</blockquote>
<h3 id="组帧的四种方法"><a href="#组帧的四种方法" class="headerlink" title="组帧的四种方法"></a>组帧的四种方法</h3><ol>
<li><h4 id="字符计数法"><a href="#字符计数法" class="headerlink" title="字符计数法"></a>字符计数法</h4><blockquote>
<p>帧首部使用一个计数字段（第一个字节，八位）来标明帧内字符数。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103100209625.png" alt="image-20210103100209625"></p>
</li>
</ol>
<ol start="2">
<li><h4 id="字符填充法"><a href="#字符填充法" class="headerlink" title="字符填充法"></a>字符填充法</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103100720451.png" alt="image-20210103100720451"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103100854477.png" alt="image-20210103100854477"></p>
<p>转义字符：ESC</p>
</li>
</ol>
<ol start="3">
<li><h4 id="零比特填充法"><a href="#零比特填充法" class="headerlink" title="零比特填充法"></a>零比特填充法</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103101313644.png" alt="image-20210103101313644"></p>
</li>
<li><h4 id="违规编码法"><a href="#违规编码法" class="headerlink" title="违规编码法"></a>违规编码法</h4><blockquote>
<p>用不会用到的来定义帧的起始和终止</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103101442664.png" alt="image-20210103101442664"></p>
</li>
</ol>
<h1 id="差错控制-1"><a href="#差错控制-1" class="headerlink" title="差错控制"></a>差错控制</h1><h2 id="差错从何而来"><a href="#差错从何而来" class="headerlink" title="差错从何而来"></a>差错从何而来</h2><blockquote>
<p>总的来说，传输中的差说都是由于噪声引起的。</p>
</blockquote>
<ul>
<li><p>全局性</p>
<ul>
<li>由于线路本身电气特性所产生的<strong>随机噪声</strong>（热噪声），是信道固有的，随机存在的。</li>
<li>解决方法：提高信噪比来减少或避免干扰。（对传感器下手）</li>
</ul>
</li>
<li><p>局部性</p>
<ul>
<li>外界特定的短暂原因所造成的<strong>冲击噪声</strong>，是产生差错的主要原因</li>
</ul>
</li>
</ul>
<h3 id="差错"><a href="#差错" class="headerlink" title="差错"></a>差错</h3><ul>
<li><p>位错</p>
<ul>
<li>比特位出错，1变0，0变1</li>
</ul>
</li>
<li><p>帧错</p>
<ul>
<li>丢失</li>
<li>重复</li>
<li>失序</li>
</ul>
</li>
</ul>
<h2 id="数据链路层的差错控制"><a href="#数据链路层的差错控制" class="headerlink" title="数据链路层的差错控制"></a>数据链路层的差错控制</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103113618826.png" alt="image-20210103113618826"></p>
<h3 id="差错控制-2"><a href="#差错控制-2" class="headerlink" title="差错控制"></a>差错控制</h3><ol>
<li><h4 id="检错编码"><a href="#检错编码" class="headerlink" title="检错编码"></a>检错编码</h4><ul>
<li><h5 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103114551360.png" alt="image-20210103114551360"></p>
</li>
<li><h5 id="循环冗余码CRC"><a href="#循环冗余码CRC" class="headerlink" title="循环冗余码CRC"></a>循环冗余码CRC</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103115046030.png" alt="image-20210103115046030"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103115205370.png" alt="image-20210103115205370"></p>
<blockquote>
<p>在数据链路层仅仅使用循环冗余检验CRC差错检测技术，只能做到对帧的无差错接受，即『凡是接收端数据链路层接受的帧，我们都能以非常接近于1的概念认为这些帧在传输过程中没有产生差错』。接收端丢弃的帧虽然曾收到了，但最终因为有差错被丢弃。</p>
<p>凡是接收端数据链路层接受的帧均无差错。</p>
</blockquote>
<p><strong>可靠传输</strong>：数据链路层发送端发送什么，接收端就接受什么</p>
<p>链路层使用CRC检验，能够实现无比特差错的传输，但这不是可靠传输，因为没有对丢弃的数据做处理，丢失了这部分数据。</p>
</li>
</ul>
</li>
<li><h4 id="纠错编码"><a href="#纠错编码" class="headerlink" title="纠错编码"></a>纠错编码</h4><ul>
<li><h5 id="海明码"><a href="#海明码" class="headerlink" title="海明码"></a>海明码</h5><blockquote>
<p>发现双比特错，纠正单比特错</p>
<p>工作原理：动一发而牵全身，多个校验码，且每个都可校验多处位置，导致一个位置可能被好几个校验码控制</p>
</blockquote>
<ul>
<li><p>工作流程</p>
<ol>
<li><p>确定校验码位数r</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103120936405.png" alt="image-20210103120936405"></p>
</li>
<li><p>确定校验码和数据的位置</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103121045253.png" alt="image-20210103121045253"></p>
</li>
<li><p>求出校验码的值</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103121335654.png" alt="image-20210103121335654"></p>
</li>
<li><p>检错并纠错</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103121555914.png" alt="image-20210103121555914"></p>
</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="编码VS编码"><a href="#编码VS编码" class="headerlink" title="编码VS编码"></a>编码VS编码</h3><p>数据链路层和物理层的数据编码与调制不同。</p>
<p><strong>物理层编码：</strong></p>
<pre><code>- 针对单个比特
- 解决传输工程中比特同步问题（曼切斯特编码）</code></pre>
<p><strong>数据链路层编码</strong>：</p>
<ul>
<li>针对一组比特</li>
<li>通过冗余码的技术实现一组二进制比特串在传输过程中是否出现了差错</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103114134503.png" alt="image-20210103114134503"></p>
<h2 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103121621528.png" alt="image-20210103121621528"></p>
<h1 id="流量控制与可靠传输机制"><a href="#流量控制与可靠传输机制" class="headerlink" title="流量控制与可靠传输机制"></a>流量控制与可靠传输机制</h1><h2 id="数据链路层的流量控制"><a href="#数据链路层的流量控制" class="headerlink" title="数据链路层的流量控制"></a>数据链路层的流量控制</h2><blockquote>
<p><strong>较高的发送速度</strong>和<strong>较低的接受能力</strong>的不匹配，会造成传输出错，因此流量控制也是数据链路层的一项重要工作。</p>
<p>数据链路层的流量控制是点对点，传输层的流量控制是端到端</p>
</blockquote>
<ul>
<li>数据链路层流量控制手段：接收方收不下就不回复确认</li>
<li>传输层流量控制手段：接收端给发送端一个窗口公告</li>
</ul>
<h2 id="流量控制的方法"><a href="#流量控制的方法" class="headerlink" title="流量控制的方法"></a>流量控制的方法</h2><ol>
<li><p><strong>停止等待协议</strong></p>
<blockquote>
<p>每发送完一个帧就停止发送，等待对方的确认，在收到确认后再发送下一个帧。</p>
</blockquote>
<p>发送窗口=1，接收窗口=1</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103171943641.png" alt="image-20210103171943641"></p>
</li>
<li><p><strong>滑动窗口协议</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103172147264.png" alt="image-20210103172147264"></p>
<ul>
<li><p>后退N帧协议（GBN）</p>
<p>发送窗口&gt;1，接收窗口=1</p>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>选择重传协议（SR）</p>
<p>发送窗口&gt;1，接收窗口&gt;1</p>
</li>
</ul>
<h2 id="可靠传输、滑动窗口、流量控制"><a href="#可靠传输、滑动窗口、流量控制" class="headerlink" title="可靠传输、滑动窗口、流量控制"></a>可靠传输、滑动窗口、流量控制</h2><ul>
<li>可靠传输：发送端发啥，接收端收啥</li>
<li>流量控制：控制发送速率，使接收方有足够的缓冲空间来接收每一个帧</li>
<li>滑动窗口解决：<ul>
<li>流量控制（收不下就不给确认，想发也发不了）</li>
<li>可靠传输：发送方自动重传</li>
</ul>
</li>
</ul>
<h2 id="脑图-1"><a href="#脑图-1" class="headerlink" title="脑图"></a>脑图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103172645307.png" alt="image-20210103172645307"></p>
<h1 id="停止-等待协议"><a href="#停止-等待协议" class="headerlink" title="停止-等待协议"></a>停止-等待协议</h1><ul>
<li><p><strong>为什么要有停止等待协议</strong></p>
<p>除了比特出差错，底层信道返回出现丢包问题。为了实现流量控制。</p>
</li>
</ul>
<ul>
<li><p><strong>研究停等协议的前提</strong></p>
<p>停等协议，每发送完一个分组就停止发送，等待对方确认，在收到确认后再发送下一个分组。</p>
</li>
</ul>
<ul>
<li><p><strong>停等协议有几种应用情况</strong></p>
<ul>
<li>无差错情况</li>
<li>有差错情况</li>
</ul>
</li>
</ul>
<h2 id="无差错情况"><a href="#无差错情况" class="headerlink" title="无差错情况"></a>无差错情况</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103174138329.png" alt="image-20210103174138329"></p>
<h2 id="有差错情况"><a href="#有差错情况" class="headerlink" title="有差错情况"></a>有差错情况</h2><ol>
<li><h3 id="数据帧丢失或者检测到帧出错"><a href="#数据帧丢失或者检测到帧出错" class="headerlink" title="数据帧丢失或者检测到帧出错"></a>数据帧丢失或者检测到帧出错</h3><ul>
<li>发完一个帧后，要保留它的副本</li>
<li>数据帧和确认帧必须编号，可以检查重复</li>
<li>超时计时器：每次发送一个帧就启动一个计时器</li>
<li>超时计时器设置的重传时间应当比帧传输的平均RTT更长一些</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103174611629.png" alt="image-20210103174611629"></p>
</li>
<li><h3 id="ACK丢失"><a href="#ACK丢失" class="headerlink" title="ACK丢失"></a>ACK丢失</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103174738486.png" alt="image-20210103174738486"></p>
</li>
<li><h3 id="ACK迟到"><a href="#ACK迟到" class="headerlink" title="ACK迟到"></a>ACK迟到</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103174910824.png" alt="image-20210103174910824"></p>
</li>
</ol>
<h2 id="停等协议性能分析"><a href="#停等协议性能分析" class="headerlink" title="停等协议性能分析"></a>停等协议性能分析</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103175056362.png" alt="image-20210103175056362"></p>
<h2 id="信道利用率"><a href="#信道利用率" class="headerlink" title="信道利用率"></a>信道利用率</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103175242049.png" alt="image-20210103175242049"></p>
<h2 id="脑图-2"><a href="#脑图-2" class="headerlink" title="脑图"></a>脑图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103175308542.png" alt="image-20210103175308542"></p>
<h1 id="后退N帧协议（GBN）"><a href="#后退N帧协议（GBN）" class="headerlink" title="后退N帧协议（GBN）"></a>后退N帧协议（GBN）</h1><h2 id="停等协议的弊端"><a href="#停等协议的弊端" class="headerlink" title="停等协议的弊端"></a>停等协议的弊端</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103180040238.png" alt="image-20210103180040238"></p>
<h2 id="后退N帧协议中的滑动窗口"><a href="#后退N帧协议中的滑动窗口" class="headerlink" title="后退N帧协议中的滑动窗口"></a>后退N帧协议中的滑动窗口</h2><ul>
<li>发送窗口：发送方维持一组连续的允许发送的帧的序号</li>
<li>接受窗口：接收方维持一组连续的允许接受帧的序号</li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103180633204.png" alt="image-20210103180633204"></p>
<h2 id="GBN发送方必须响应的三件事"><a href="#GBN发送方必须响应的三件事" class="headerlink" title="GBN发送方必须响应的三件事"></a>GBN发送方必须响应的三件事</h2><ol>
<li><h3 id="上层的调用"><a href="#上层的调用" class="headerlink" title="上层的调用"></a>上层的调用</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103181029392.png" alt="image-20210103181029392"></p>
</li>
</ol>
<ol start="2">
<li><h3 id="收到了一个ACK"><a href="#收到了一个ACK" class="headerlink" title="收到了一个ACK"></a>收到了一个ACK</h3><blockquote>
<p>GBN协议中，对n号帧的确认采用<strong>累计确认</strong>的方式，标明接收方已经收到n号帧和它之前的全部帧。</p>
</blockquote>
</li>
</ol>
<ol start="3">
<li><h3 id="超时事件"><a href="#超时事件" class="headerlink" title="超时事件"></a>超时事件</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103181054356.png" alt="image-20210103181054356"></p>
</li>
</ol>
<h2 id="GBN接收方要做的事"><a href="#GBN接收方要做的事" class="headerlink" title="GBN接收方要做的事"></a>GBN接收方要做的事</h2><ul>
<li>如果正确收到n帧号，并且按序，那么接收方为n帧发送一个ACK，并该帧中的数据部分交付给上层。</li>
<li>其余情况都丢弃帧，并为最近按序接受的帧重新发送ACK。接收方无需缓存任何失序帧，只需要维护一个信息：expectedseqnum（下一个按序接受的帧序号）</li>
</ul>
<h2 id="运行中的GBN"><a href="#运行中的GBN" class="headerlink" title="运行中的GBN"></a>运行中的GBN</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103181819264.png" alt="image-20210103181819264"></p>
<ul>
<li>等到一个ACK，滑动窗口会后移，然后发送端发送下一帧</li>
<li>发归发，帧号不满足接收端的exceptedseqnum，不收，不发ACK</li>
<li>等不到ACKn，出现超时，发送超时帧之后所有帧</li>
</ul>
<h2 id="滑动窗口长度"><a href="#滑动窗口长度" class="headerlink" title="滑动窗口长度"></a>滑动窗口长度</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103182212542.png" alt="image-20210103182212542"></p>
<h2 id="GBN协议重点总结"><a href="#GBN协议重点总结" class="headerlink" title="GBN协议重点总结"></a>GBN协议重点总结</h2><ol>
<li>累计确认（偶尔捎带确认）</li>
<li>接收方只按序接受帧，不按序无情丢弃</li>
<li>确认序列号最大的、按序到达的帧</li>
<li>发送窗口最大为 $2^n - 1$ ，接受窗口大小为1</li>
</ol>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103182823204.png" alt="image-20210103182823204"></p>
<h2 id="GBN协议性能分析"><a href="#GBN协议性能分析" class="headerlink" title="GBN协议性能分析"></a>GBN协议性能分析</h2><ul>
<li>因连续发送数据帧而提高了信道利用率</li>
<li>在重传时必须把原来已经正确传送的数据帧重传，使传送效率降低</li>
</ul>
<h2 id="脑图-3"><a href="#脑图-3" class="headerlink" title="脑图"></a>脑图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103183008068.png" alt="image-20210103183008068"></p>
<h1 id="介质访问控制"><a href="#介质访问控制" class="headerlink" title="介质访问控制"></a>介质访问控制</h1><h2 id="传输数据使用的两种链路"><a href="#传输数据使用的两种链路" class="headerlink" title="传输数据使用的两种链路"></a>传输数据使用的两种链路</h2><ul>
<li><p><strong>点对点链路</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103192641015.png" alt="image-20210103192641015"></p>
</li>
</ul>
<ul>
<li><p><strong>广播式链路</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103192718828.png" alt="image-20210103192718828"></p>
</li>
</ul>
<h2 id="介质访问控制-1"><a href="#介质访问控制-1" class="headerlink" title="介质访问控制"></a>介质访问控制</h2><blockquote>
<p>采取一定的措施，使得两对结点之间的通信不会发生互相干扰的情况。</p>
</blockquote>
<ul>
<li><p>静态划分信道</p>
<ul>
<li><p>信道划分介质访问控制</p>
<blockquote>
<p>基于<strong>多路复用</strong>技术划分资源</p>
<p>网络负载重：共享信道效率高，且公平</p>
<p>网络负载轻：共享信道效率低</p>
</blockquote>
<ul>
<li>频分多路复用 FDM</li>
<li>时分多路复用 TDM</li>
<li>波分多路复用 WDM</li>
<li>码分多路复用 CDM</li>
</ul>
</li>
</ul>
</li>
<li><p>动态划分信道</p>
<ul>
<li><p>轮询访问介质访问控制</p>
<blockquote>
<p>既要<strong>不产生冲突</strong>，又要发送时<strong>占全部带宽</strong></p>
</blockquote>
<ul>
<li>轮询协议</li>
<li>令牌传递协议</li>
</ul>
</li>
<li><p>随机访问介质访问控制</p>
<blockquote>
<p>用户根据意愿<strong>随机</strong>发送信息，发送信息时可独占信道带宽</p>
<p>网络负载重：产生冲突开销</p>
<p>网络负载轻：共享信道效率高，单个结点可利用全部带宽</p>
</blockquote>
<ul>
<li>ALOHA协议</li>
<li>CSMA协议</li>
<li><strong>CSMA/CD协议</strong></li>
<li><strong>CSMA/CA协议</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="静态划分信道——信道划分介质访问控制"><a href="#静态划分信道——信道划分介质访问控制" class="headerlink" title="静态划分信道——信道划分介质访问控制"></a>静态划分信道——信道划分介质访问控制</h3><blockquote>
<p>将使用介质的每个设备与来自同一信道的其他设备的通信隔离开，把<strong>时域和频域资源</strong>合理地分配给网络上的设备。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103193539974.png" alt="image-20210103193539974"></p>
<h4 id="频分多路复用FDM"><a href="#频分多路复用FDM" class="headerlink" title="频分多路复用FDM"></a>频分多路复用FDM</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103193641158.png" alt="image-20210103193641158"></p>
<h4 id="时分多路复用TDM"><a href="#时分多路复用TDM" class="headerlink" title="时分多路复用TDM"></a>时分多路复用TDM</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103193753903.png" alt="image-20210103193753903"></p>
<h5 id="改进的时分复用——统计时分复用STDM"><a href="#改进的时分复用——统计时分复用STDM" class="headerlink" title="改进的时分复用——统计时分复用STDM"></a>改进的时分复用——统计时分复用STDM</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103193939945.png" alt="image-20210103193939945"></p>
<h4 id="波分多路复用WDM"><a href="#波分多路复用WDM" class="headerlink" title="波分多路复用WDM"></a>波分多路复用WDM</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103194051105.png" alt="image-20210103194051105"></p>
<h4 id="码分多路复用CDM"><a href="#码分多路复用CDM" class="headerlink" title="码分多路复用CDM"></a>码分多路复用CDM</h4><p> <img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103194705172.png" alt="image-20210103194705172"></p>
<h3 id="动态分配信道——随机访问介质访问控制"><a href="#动态分配信道——随机访问介质访问控制" class="headerlink" title="动态分配信道——随机访问介质访问控制"></a>动态分配信道——随机访问介质访问控制</h3><h4 id="ALOHA协议"><a href="#ALOHA协议" class="headerlink" title="ALOHA协议"></a>ALOHA协议</h4><h5 id="纯ALOHA协议"><a href="#纯ALOHA协议" class="headerlink" title="纯ALOHA协议"></a>纯ALOHA协议</h5><blockquote>
<p>不监听信道，不按时间槽发送，随机重发。<strong>想发就发</strong></p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103200804141.png" alt="image-20210103200804141"></p>
<h5 id="时隙ALOHA协议"><a href="#时隙ALOHA协议" class="headerlink" title="时隙ALOHA协议"></a>时隙ALOHA协议</h5><blockquote>
<p>把时间分成若干个相同的时间片，所有用户在时间片开始时刻同步接入网络信道，若发生冲突，则必须等到下一个时间片开始时刻再发送。<strong>控制想法就发的随意性</strong></p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103201131394.png" alt="image-20210103201131394"></p>
<h5 id="关于ALOHA要知道的事"><a href="#关于ALOHA要知道的事" class="headerlink" title="关于ALOHA要知道的事"></a>关于ALOHA要知道的事</h5><ol>
<li>纯ALOHA比时隙ALOHA吞吐量更低，效率更低</li>
<li>纯ALOHA想发就发，时隙ALOHA只有在时间片段开始时才能发</li>
</ol>
<h4 id="CSMA协议"><a href="#CSMA协议" class="headerlink" title="CSMA协议"></a>CSMA协议</h4><blockquote>
<p>载波监听多路访问协议CSMA（carrier sense multiple accrss）</p>
<p><strong>CS</strong>：载波监听，每一个站在<strong>发送数据之前</strong>要检测一下总线上是否有其他计算机在发送数据。</p>
<p><strong>MA</strong>：多点接入，表示许多计算机以多点接入的方式连接在一根总线上</p>
<p><strong>协议思想</strong>：发送帧之前，监听信道</p>
</blockquote>
<p><strong>接听结果</strong>：</p>
<ul>
<li><p>信道空闲：发送完整帧</p>
</li>
<li><p>信道忙：推迟发送</p>
</li>
</ul>
<ul>
<li><h5 id="1-坚持CSMA"><a href="#1-坚持CSMA" class="headerlink" title="1-坚持CSMA"></a>1-坚持CSMA</h5><blockquote>
<p>坚持指的是对于监听信道<strong>忙</strong>之后的坚持</p>
</blockquote>
<ul>
<li>思想：<ul>
<li>如果一个主机要发送消息，那么它先监听信道</li>
<li>空闲则直接传输，不必等待</li>
<li><strong>忙则一直监听，直到空闲马上传输</strong></li>
<li>如果有冲突（一段时间内未收到肯定回复），<strong>则等待一个随机长的时间再监听</strong>，重复上诉过程</li>
</ul>
</li>
<li>优点<ul>
<li>只要媒体空闲，站点就马上发送，避免媒体利用率的损失</li>
</ul>
</li>
<li>缺点：<ul>
<li>假如有两个或者两个以上的站点有数据要发送，冲突就不可避免</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><h5 id="非坚持CSMA"><a href="#非坚持CSMA" class="headerlink" title="非坚持CSMA"></a>非坚持CSMA</h5><blockquote>
<p>非坚持指的是对于监听信道忙之后就不继续监听</p>
</blockquote>
<ul>
<li>思想：<ul>
<li>如果一个主机要发送消息，那么它先监听信道。</li>
<li>空闲则直接传输，不必等待。</li>
<li><strong>忙则等待一个随机的时间之后再进行监听</strong></li>
</ul>
</li>
<li>优点：<ul>
<li>采用随机的重发时延时间可以减少冲突发生的可能性。</li>
</ul>
</li>
<li>缺点：<ul>
<li>可能存在大家都在延迟等待过程中，使得媒体仍然可能处于空闲状态，媒体使用率低。</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><h5 id="p-坚持CSMA"><a href="#p-坚持CSMA" class="headerlink" title="p-坚持CSMA"></a>p-坚持CSMA</h5><blockquote>
<p>p-坚持指的是对于监听信道<strong>空闲</strong>的处理。</p>
</blockquote>
<ul>
<li>思想：<ul>
<li>如果一个主机要发送消息，那么它先监听信道。</li>
<li><strong>空闲则以p概念直接传输，不必等待；概念1-p等待到下一个时间槽再传输。</strong></li>
<li><strong>忙则等待一个随机的时间之后再进行监听。</strong></li>
</ul>
</li>
<li>优点：<ul>
<li>既能像非坚持算法那样减少冲突，又能像1-坚持算法那样减少媒体空间空闲时间。</li>
</ul>
</li>
<li>缺点：<ul>
<li>发生冲突后还是要坚持把数据帧发送完，造成了浪费。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="三种CSMA对比"><a href="#三种CSMA对比" class="headerlink" title="三种CSMA对比"></a>三种CSMA对比</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103203958986.png" alt="image-20210103203958986"></p>
<h4 id="CSMA-CD协议"><a href="#CSMA-CD协议" class="headerlink" title="CSMA/CD协议"></a>CSMA/CD协议</h4><blockquote>
<p>载波监听多点接入/碰撞检测CSMA/CD（carrier sense multiple access with collision detection）</p>
<p><strong>CS</strong>：载波监听，每一个站在<strong>发送数据之前</strong>以及<strong>发送数据时</strong>都要检测一下总线上是否有其他计算机在发送数据。</p>
<p><strong>MA</strong>：多点接入，表示许多计算机以多点接入的方式连接在一根总线上。（总线型网络）</p>
<p><strong>CD</strong>：碰撞检测（冲突检测），『<strong>边发送边监听</strong>』，适配器边发送数据边检测信道上信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。（半双工网络）</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103204950582.png" alt="image-20210103204950582"></p>
<h5 id="传播时延对载波监听的影响"><a href="#传播时延对载波监听的影响" class="headerlink" title="传播时延对载波监听的影响"></a>传播时延对载波监听的影响</h5><p>争用期：2掏</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103205610649.png" alt="image-20210103205610649"></p>
<h5 id="如何确定碰撞后的重传时机"><a href="#如何确定碰撞后的重传时机" class="headerlink" title="如何确定碰撞后的重传时机"></a>如何确定碰撞后的重传时机</h5><p>截断二进制指数规避算法：</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103205950023.png" alt="image-20210103205950023"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103210401543.png" alt="image-20210103210401543"></p>
<h5 id="最小帧长"><a href="#最小帧长" class="headerlink" title="最小帧长"></a>最小帧长</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103210512838.png" alt="image-20210103210512838"></p>
<h4 id="CSMA-CA协议"><a href="#CSMA-CA协议" class="headerlink" title="CSMA/CA协议"></a>CSMA/CA协议</h4><blockquote>
<p>载波监听多点接入/碰撞避免CSMA/CA(carrier sense multiple access with collision avoidance)</p>
</blockquote>
<p>为什么要有CSMA/CA：无线局域网</p>
<ul>
<li>无法做到360° 全面检测碰撞</li>
<li>隐蔽站：<ul>
<li>当A和C都检测不到信号，认为信道空闲时，同时向终端B发送数据帧，就会导致冲突</li>
</ul>
</li>
</ul>
<p>有礼貌的CSMA/CA，在发送数据的时候会广播自己即将发送数据</p>
<h5 id="CSMA-CA协议工作原理"><a href="#CSMA-CA协议工作原理" class="headerlink" title="CSMA/CA协议工作原理"></a>CSMA/CA协议工作原理</h5><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103211720544.png" alt="image-20210103211720544"></p>
<ol>
<li>预约信道：<ul>
<li>告诉别人我这要多久</li>
</ul>
</li>
<li>ACK帧：<ul>
<li>CRC检验</li>
<li>二进制退避算法重传</li>
</ul>
</li>
<li>RTS/CTS：<ul>
<li>解决隐蔽站的问题</li>
</ul>
</li>
</ol>
<h4 id="CSMA-CD和CSMA-CA"><a href="#CSMA-CD和CSMA-CA" class="headerlink" title="CSMA/CD和CSMA/CA"></a>CSMA/CD和CSMA/CA</h4><ul>
<li>相同点：<ul>
<li>都从属于CSMA的思路，<strong>先听再说</strong>。</li>
<li>二者出现冲突后都会进行有限的重传</li>
</ul>
</li>
<li>不同点：<ul>
<li>传输介质不同：<ul>
<li>CSMA/CD用于总线式以太网【有线】</li>
<li>CSMA/CA用于无线局域网【无线】</li>
</ul>
</li>
<li>载波检测方式不同：<ul>
<li>CSMA/CD通过电缆中电压的变化来检测，碰撞时，电缆中的电压会变化</li>
<li>CSMA/CA采用：<ul>
<li>能量检测（ED）</li>
<li>载波检测（CS）</li>
<li>和能量载波混合检测</li>
</ul>
</li>
</ul>
</li>
<li>CSMA/CD检测冲突，CSMA/CA避免冲突</li>
</ul>
</li>
</ul>
<h3 id="动态分配信道——轮询访问介质访问控制"><a href="#动态分配信道——轮询访问介质访问控制" class="headerlink" title="动态分配信道——轮询访问介质访问控制"></a>动态分配信道——轮询访问介质访问控制</h3><h4 id="轮询协议"><a href="#轮询协议" class="headerlink" title="轮询协议"></a>轮询协议</h4><blockquote>
<p>主节点轮流邀请从属结点发送数据</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103214720748.png" alt="image-20210103214720748"></p>
<p>问题：</p>
<ol>
<li>轮询开销：主节点要一个个问</li>
<li>等待延迟：等主节点问从属结点</li>
<li>单点故障：主节点完了就完了</li>
</ol>
<h4 id="令牌传递协议"><a href="#令牌传递协议" class="headerlink" title="令牌传递协议"></a>令牌传递协议</h4><blockquote>
<p>令牌：一个特殊格式的MAC控制帧，不含任何信息。控制信道的使用，确保同一时刻只有一个结点独占信道。</p>
<p>每个结点都可以在一定时间内（令牌持有时间）获得发送数据的权利，并不是无限制地持有令牌。</p>
</blockquote>
<p>问题：</p>
<ol>
<li>令牌开销</li>
<li>等待延迟</li>
<li>单点故障</li>
</ol>
<p>应用于令牌环网：</p>
<ul>
<li>物理星型拓扑</li>
<li>逻辑环型拓扑</li>
<li>常用于<strong>负载较重、通信量较大</strong>的网络中</li>
</ul>
<h2 id="脑图-4"><a href="#脑图-4" class="headerlink" title="脑图"></a>脑图</h2><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103215529475.png" alt="image-20210103215529475"></p>
<h1 id="局域网基本概念和体系结构"><a href="#局域网基本概念和体系结构" class="headerlink" title="局域网基本概念和体系结构"></a>局域网基本概念和体系结构</h1><h2 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h2><blockquote>
<p>简称LAN，是指在<strong>某一区域内</strong>由多台计算机互联成地计算机组，使用<strong>广播信道</strong>。</p>
</blockquote>
<p>特点：</p>
<ol>
<li>覆盖范围小，一栋楼</li>
<li>使用专门铺设的传输介质，数据传输速率高<ul>
<li>双绞线</li>
<li>同轴电缆</li>
</ul>
</li>
<li>通信延迟时间短，可靠性高</li>
<li>各站为平等关系，共享传输信道</li>
<li>采用<strong>分布式控制</strong>和<strong>广播式通信</strong>，能进行广播和组播</li>
</ol>
<p>决定因素：</p>
<ol>
<li>网络拓扑</li>
<li>传输介质</li>
<li>介质访问控制方法</li>
</ol>
<h3 id="局域网拓扑结构"><a href="#局域网拓扑结构" class="headerlink" title="局域网拓扑结构"></a>局域网拓扑结构</h3><ol>
<li><p>星型拓扑</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103220405931.png" alt="image-20210103220405931"></p>
</li>
<li><p><strong>总线型拓扑</strong></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103220423011.png" alt="image-20210103220423011"></p>
</li>
<li><p>环型拓扑</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103220438921.png" alt="image-20210103220438921"></p>
</li>
<li><p>树形拓扑</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103220454289.png" alt="image-20210103220454289"></p>
</li>
</ol>
<h3 id="局域网传输介质"><a href="#局域网传输介质" class="headerlink" title="局域网传输介质"></a>局域网传输介质</h3><ul>
<li>有线局域网：<ul>
<li>双绞线</li>
<li>同轴电缆</li>
<li>光纤</li>
</ul>
</li>
<li>无线局域网<ul>
<li>电磁波</li>
</ul>
</li>
</ul>
<h3 id="局域网介质访问控制访问方法"><a href="#局域网介质访问控制访问方法" class="headerlink" title="局域网介质访问控制访问方法"></a>局域网介质访问控制访问方法</h3><ol>
<li>CSMA/CD<ul>
<li>常用于<strong>总线型局域网</strong>，也用于树型网络</li>
</ul>
</li>
<li>令牌总线：<ul>
<li>常用于<strong>总线型局域网</strong>，也用于树型网络</li>
<li>把总线型或树型网络的各个工作站按一定顺序（按接口地址大小）排列成一个<strong>逻辑环</strong>。只有令牌持有者才能控制 总线，有发送信息的权利。</li>
</ul>
</li>
<li>令牌环<ul>
<li>用于环型局域网，令牌环网</li>
</ul>
</li>
</ol>
<h3 id="局域网的分类"><a href="#局域网的分类" class="headerlink" title="局域网的分类"></a>局域网的分类</h3><ol>
<li><p><strong>以太网</strong></p>
<ul>
<li><p>分类</p>
<ul>
<li>标准以太网</li>
<li>快速以太网</li>
<li>千兆以太网</li>
<li>10G以太网</li>
</ul>
</li>
<li><p>标准规范：</p>
<ul>
<li>IEEE802.3</li>
</ul>
</li>
<li><p>介质控制：</p>
<ul>
<li>CSMA/CD</li>
</ul>
</li>
<li><p>拓扑：</p>
<ul>
<li>逻辑拓扑总线型</li>
<li>物理拓扑星型</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>令牌环网</p>
<ul>
<li><p>标准规范：</p>
</li>
<li><p>IEEE 802.5</p>
</li>
<li><p>拓扑：</p>
<ul>
<li>物理星型拓扑</li>
<li>逻辑环型拓扑</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol start="3">
<li><p>FDDI网</p>
<ul>
<li><p>标准规范：</p>
</li>
<li><p>IEEE 802.8</p>
</li>
<li><p>拓扑：</p>
<ul>
<li>物理双环拓扑</li>
<li>逻辑环型拓扑</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol start="4">
<li><p>ATM网</p>
<ul>
<li>使用53字节固定长度的单元进行交换</li>
</ul>
</li>
</ol>
<ol start="5">
<li><p><strong>无线局域网</strong>（WLAN）</p>
<ul>
<li>标准规范：<ul>
<li>IEEE 802.11</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="IEEE-802-标准"><a href="#IEEE-802-标准" class="headerlink" title="IEEE 802 标准"></a>IEEE 802 标准</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103221944965.png" alt="image-20210103221944965"></p>
<h3 id="MAC子层和LLC子层"><a href="#MAC子层和LLC子层" class="headerlink" title="MAC子层和LLC子层"></a>MAC子层和LLC子层</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103222401457.png" alt="image-20210103222401457"></p>
<h3 id="局域网脑图"><a href="#局域网脑图" class="headerlink" title="局域网脑图"></a>局域网脑图</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210103222436483.png" alt="image-20210103222436483"></p>
<h1 id="局域网重要类别"><a href="#局域网重要类别" class="headerlink" title="局域网重要类别"></a>局域网重要类别</h1><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><blockquote>
<p>以太网（Ethernet）指的是一种<strong>基带总线局域规范</strong>，是当今世界现有局域网采用的最通用的通信协议标准。</p>
<p>802.3局域网/AKA/以太网</p>
</blockquote>
<h3 id="以太网优势"><a href="#以太网优势" class="headerlink" title="以太网优势"></a>以太网优势</h3><ol>
<li>造价低廉</li>
<li>应用最为广泛的局域网技术</li>
<li>比令牌环网、ATM网便宜、简单</li>
<li>满足网络速率要求：10Mb/s~10GB/s</li>
</ol>
<h3 id="以太网标准"><a href="#以太网标准" class="headerlink" title="以太网标准"></a>以太网标准</h3><ul>
<li>DIX Ethernet V2<ul>
<li>第一个局域网产品规约</li>
</ul>
</li>
<li>IEEE 802.3 <ul>
<li>第一个IEEE 以太网标准</li>
</ul>
</li>
</ul>
<h3 id="以太网提供无连接、不可靠的服务"><a href="#以太网提供无连接、不可靠的服务" class="headerlink" title="以太网提供无连接、不可靠的服务"></a>以太网提供无连接、不可靠的服务</h3><blockquote>
<p>以太网只实现无差错接受，不实现可靠传输</p>
</blockquote>
<ul>
<li>无连接：<ul>
<li>发送方和接收方无『握手过程』</li>
</ul>
</li>
<li>不可靠：<ul>
<li>不对发送方的数据帧<strong>编号</strong>，接收方不向发送方进行<strong>确认</strong>，差错帧直接丢弃，差错纠正由高层负责</li>
</ul>
</li>
</ul>
<h3 id="以太网传输介质与拓扑结构的发展"><a href="#以太网传输介质与拓扑结构的发展" class="headerlink" title="以太网传输介质与拓扑结构的发展"></a>以太网传输介质与拓扑结构的发展</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104101605876.png" alt="image-20210104101605876"></p>
<h3 id="10BASE-T以太网"><a href="#10BASE-T以太网" class="headerlink" title="10BASE-T以太网"></a>10BASE-T以太网</h3><blockquote>
<p>传送<strong>基带信号</strong>的双绞线以太网，T表示双绞线（无屏蔽双绞线UTP），传输速率10Mb/s</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104102146530.png" alt="image-20210104102146530"></p>
<ul>
<li>拓扑结构<ul>
<li>物理上星型拓扑</li>
<li>逻辑上总线型</li>
<li>每段双绞线最长100m</li>
</ul>
</li>
<li>编码方式：<ul>
<li>曼切斯特编码</li>
</ul>
</li>
<li>介质访问控制：<ul>
<li>CSMA/CD</li>
</ul>
</li>
</ul>
<h3 id="适配器与MAC地址"><a href="#适配器与MAC地址" class="headerlink" title="适配器与MAC地址"></a>适配器与MAC地址</h3><blockquote>
<p>计算机与外界局域网的连接是通过<strong>通信适配器</strong>的。</p>
<p>局域网中，硬件地址又称为物理地址，或MAC地址。（实际是标识符）</p>
<p><strong>MAC地址</strong>：每个适配器有一个全球唯一的48位二进制地址，前24位代表厂家（IEEE规定），后24位厂家自己制定。常用6个16进制数表示，02-6-8c-e4-b1-21.</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104102759503.png" alt="image-20210104102759503"></p>
<h3 id="以太网MAC帧"><a href="#以太网MAC帧" class="headerlink" title="以太网MAC帧"></a>以太网MAC帧</h3><blockquote>
<p>最常用的MAC帧是以太网V2的格式</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104103244767.png" alt="image-20210104103244767"></p>
<ul>
<li>数据链路层对数据报加头加尾</li>
<li>FCS：CRC循环冗余检验</li>
<li>链路层最大数据传输单元MTU == 1500</li>
<li>CSMA/CD最小帧长：64</li>
<li>曼切斯特编码：不需要帧结束定界符，数据结束位置即从FCS往前4字节</li>
</ul>
<h3 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h3><blockquote>
<p>速率&gt;100Mb/s的以太网称为高速以太网</p>
</blockquote>
<ol>
<li><p>100BASE-T以太网</p>
<ul>
<li><p>速率：100Mb/s</p>
</li>
<li><p>传输介质：</p>
<ul>
<li>双绞线</li>
</ul>
</li>
<li><p>拓扑：</p>
<ul>
<li>星型拓扑</li>
</ul>
</li>
<li><p>协议：</p>
<ul>
<li>IEEE 802.3 的CSMA/CD</li>
</ul>
</li>
<li><p>通信方式</p>
<ul>
<li>全双工和半双工</li>
<li>全双工方式下无冲突</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>吉比特以太网</p>
<ul>
<li>速率：1Gb/s</li>
<li>传输介质：<ul>
<li>光纤</li>
<li>双绞线</li>
</ul>
</li>
<li>通信方式：<ul>
<li>全双工和半双工</li>
<li>全双工下无冲突</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol start="3">
<li><p>10吉比特</p>
<ul>
<li>速率：10Gb/s</li>
<li>传输介质：<ul>
<li>光纤</li>
</ul>
</li>
<li>通信方式：<ul>
<li>全双工</li>
<li>无争用问题</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="以太网脑图"><a href="#以太网脑图" class="headerlink" title="以太网脑图"></a>以太网脑图</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104104643042.png" alt="image-20210104104643042"></p>
<h2 id="无线局域网"><a href="#无线局域网" class="headerlink" title="无线局域网"></a>无线局域网</h2><h3 id="IEEE-802-11"><a href="#IEEE-802-11" class="headerlink" title="IEEE 802.11"></a>IEEE 802.11</h3><blockquote>
<p>IEEE 802.11 是<strong>无线局域网</strong>通用的标准。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104104847956.png" alt="image-20210104104847956"></p>
<h3 id="802-11的MAC帧头格式"><a href="#802-11的MAC帧头格式" class="headerlink" title="@-@ 802.11的MAC帧头格式"></a>@-@ 802.11的MAC帧头格式</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104105852059.png" alt="image-20210104105852059"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104105620223.png" alt="image-20210104105620223"></p>
<ul>
<li>AP1、AP2：中转基站</li>
<li>A、B：终端设备</li>
</ul>
<h3 id="无线局域网的分类"><a href="#无线局域网的分类" class="headerlink" title="无线局域网的分类"></a>无线局域网的分类</h3><ol>
<li><h4 id="有固定基础设施无线局域网"><a href="#有固定基础设施无线局域网" class="headerlink" title="有固定基础设施无线局域网"></a>有固定基础设施无线局域网</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104110323830.png" alt="image-20210104110323830"></p>
</li>
</ol>
<ol start="2">
<li><h4 id="无固定基础设施无线局域网的自组织网络"><a href="#无固定基础设施无线局域网的自组织网络" class="headerlink" title="无固定基础设施无线局域网的自组织网络"></a>无固定基础设施无线局域网的自组织网络</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104110419561.png" alt="image-20210104110419561"></p>
</li>
</ol>
<h1 id="广域网"><a href="#广域网" class="headerlink" title="广域网"></a>广域网</h1><blockquote>
<p>广域网（WAN，Wide Area Network），通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，能连接多个国家，形成国际性的远程网络。</p>
</blockquote>
<ul>
<li>通信子网主要使用<strong>分组交换技术</strong></li>
<li>将不同地区的<strong>局域网或计算机系统</strong>互联，达到<strong>资源共享</strong>，利用：<ul>
<li>公用分组交换网</li>
<li>卫星通信网</li>
<li>无线分组交换网</li>
</ul>
</li>
<li>因特网是世界范围内最大的广域网</li>
</ul>
<h2 id="广域网中常用的链路层协议"><a href="#广域网中常用的链路层协议" class="headerlink" title="广域网中常用的链路层协议"></a>广域网中常用的链路层协议</h2><h3 id="PPP协议"><a href="#PPP协议" class="headerlink" title="PPP协议"></a>PPP协议</h3><blockquote>
<p>点对点协议PPP（point-to-point protocol）是目前使用最广泛的数据链路层协议，用户使用拨号电话接入因特网时一般使用PPP协议。</p>
</blockquote>
<ul>
<li><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul>
<li>只支持全双工链路</li>
</ul>
</li>
</ul>
<ul>
<li><h4 id="ppp协议应满足的要求"><a href="#ppp协议应满足的要求" class="headerlink" title="ppp协议应满足的要求"></a>ppp协议应满足的要求</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104112205322.png" alt="image-20210104112205322"></p>
</li>
</ul>
<ul>
<li><h4 id="ppp协议无需满足的要求"><a href="#ppp协议无需满足的要求" class="headerlink" title="ppp协议无需满足的要求"></a>ppp协议无需满足的要求</h4><ul>
<li>纠错</li>
<li>流量控制</li>
<li>序号</li>
<li>不支持多点线路</li>
</ul>
</li>
</ul>
<ul>
<li><h4 id="PPP协议的三个组成部分"><a href="#PPP协议的三个组成部分" class="headerlink" title="PPP协议的三个组成部分"></a>PPP协议的三个组成部分</h4><ul>
<li>一个将IP数据报封装到串行链路（同步串行/异步串行）的方法</li>
<li>链路控制协议LCP：<ul>
<li>建立并维护数据链路连接。（身份验证）</li>
</ul>
</li>
<li>网络控制协议NCP：<ul>
<li>PPP可支持多种网络层协议</li>
<li>每个不同的网络层协议需要一个相应的NCP来配置</li>
<li>为网络层协议建立和配置逻辑连接</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><h4 id="ppp协议的状态图"><a href="#ppp协议的状态图" class="headerlink" title="ppp协议的状态图"></a>ppp协议的状态图</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104112721339.png" alt="image-20210104112721339"></p>
<ul>
<li><h4 id="PPP协议的帧格式"><a href="#PPP协议的帧格式" class="headerlink" title="PPP协议的帧格式"></a>PPP协议的帧格式</h4></li>
</ul>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104113010742.png" alt="image-20210104113010742"></p>
</li>
</ul>
<h3 id="HDLC协议"><a href="#HDLC协议" class="headerlink" title="HDLC协议"></a>HDLC协议</h3><blockquote>
<p>高级数据链路控制（High-Level Date Link Control），是一个在同步网上传输数据、<strong>面向比特</strong>的数据链路层协议，由ISO拓展开发。</p>
</blockquote>
<h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><ul>
<li>数据报文可透明传输<ul>
<li>0比特插入法：易于硬件实现</li>
</ul>
</li>
<li>采用全双工通信</li>
<li>所有帧采用CRC检验，对信息帧顺序编号，防止漏收或重复，传输可靠性高</li>
</ul>
<h4 id="HDLC的站"><a href="#HDLC的站" class="headerlink" title="HDLC的站"></a>HDLC的站</h4><ul>
<li><p>主站</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104113838990.png" alt="image-20210104113838990"></p>
</li>
</ul>
<ul>
<li><p>从站</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104113856982.png" alt="image-20210104113856982"></p>
</li>
</ul>
<ul>
<li><p>复合站</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104113916035.png" alt="image-20210104113916035"></p>
</li>
</ul>
<p><strong>三种数据操作方式</strong>：</p>
<ol>
<li>正常响应模式</li>
<li>异步平衡模式</li>
<li>异步响应模式</li>
</ol>
<h4 id="HDLC的帧格式"><a href="#HDLC的帧格式" class="headerlink" title="HDLC的帧格式"></a>HDLC的帧格式</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104114123050.png" alt="image-20210104114123050"></p>
<h3 id="PPP协议-amp-HDLC协议"><a href="#PPP协议-amp-HDLC协议" class="headerlink" title="PPP协议&amp;HDLC协议"></a>PPP协议&amp;HDLC协议</h3><p>相同点：</p>
<ul>
<li>都只支持<strong>全双工</strong>链路</li>
<li>都可以实现透明传输</li>
<li>都可以差错检测，但不纠错</li>
</ul>
<p>不同点：</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104114407674.png" alt="image-20210104114407674"></p>
<h3 id="广域网脑图"><a href="#广域网脑图" class="headerlink" title="广域网脑图"></a>广域网脑图</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104114442387.png" alt="image-20210104114442387"></p>
<h1 id="链路层设备"><a href="#链路层设备" class="headerlink" title="链路层设备"></a>链路层设备</h1><h2 id="扩展以太网"><a href="#扩展以太网" class="headerlink" title="扩展以太网"></a>扩展以太网</h2><h3 id="物理层扩展以太网"><a href="#物理层扩展以太网" class="headerlink" title="物理层扩展以太网"></a>物理层扩展以太网</h3><ul>
<li><p>光线调制和解调</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104114921004.png" alt="image-20210104114921004"></p>
</li>
</ul>
<ul>
<li><p>集线器</p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104114939108.png" alt="image-20210104114939108"></p>
</li>
</ul>
<h3 id="链路层扩展以太网"><a href="#链路层扩展以太网" class="headerlink" title="链路层扩展以太网"></a>链路层扩展以太网</h3><ul>
<li><h4 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h4><blockquote>
<p>网桥根据<strong>MAC帧的目的地址</strong>对帧进行<strong>转发</strong>和<strong>过滤</strong>。</p>
<p>当网桥收到一个帧时，并不向所有接口转发此帧，而是先检查此帧的MAC地址，然后再确定将该帧转发到哪一个接口，或者是丢弃（过滤）。</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104115650137.png" alt="image-20210104115650137"></p>
</li>
</ul>
<ul>
<li>网段：一般指一个计算机网络中使用同一物理层设备（传输介质，中继器，集线器等）能直接通讯的那一部分</li>
</ul>
<ul>
<li><p>网桥优点：</p>
<ul>
<li><p>过滤通信量，增大吞吐量</p>
</li>
<li><p>扩大了物理范围</p>
</li>
<li><p>提高了可靠性</p>
</li>
<li><p>可互联不同物理层、不同MAC子层和不同速率的以太网</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>网桥分类</p>
<ul>
<li><p>透明网桥</p>
<blockquote>
<p>“透明”指以太网的结点并不知道所发送的帧将经过哪几个网桥，是一种即插即用设备——自学习</p>
</blockquote>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104120239094.png" alt="image-20210104120239094"></p>
<p>转发表记录源地址，和接收这个帧的接口</p>
</li>
</ul>
</li>
</ul>
<pre><code>- 源路由网桥

  &gt; 在发送帧时，把详细的最佳路由信息（路由最少/时间最短）放在帧的首部

  方法：

  - 源站以广播方式向与欲通信的目的站发送一个**发现帧**
  - 目的站原路返回一个帧

  ![image-20210104120818272](https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104120818272.png)</code></pre>
<ul>
<li><h4 id="交换机——多接口网桥"><a href="#交换机——多接口网桥" class="headerlink" title="交换机——多接口网桥"></a>交换机——多接口网桥</h4><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104121028544.png" alt="image-20210104121028544"></p>
</li>
</ul>
<p>  交换机分类：</p>
<ul>
<li><p>直通式交换机</p>
<ul>
<li><p>查完目的地址（6B）就立刻转发</p>
</li>
<li><p>延迟小，可靠性低，无法支持具有不同速率的端口的交换</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>储存转发式交换机</p>
<ul>
<li>将帧放入高速缓存，并检查是否正确，正确则转发，错误则丢弃</li>
<li>延迟大，可靠性高，可以支持具有不同速率的端口的交换</li>
</ul>
</li>
</ul>
<h3 id="冲突域和广播域"><a href="#冲突域和广播域" class="headerlink" title="冲突域和广播域"></a>冲突域和广播域</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104121833169.png" alt="image-20210104121833169"></p>
<p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104121928934.png" alt="image-20210104121928934"></p>
<h3 id="链路层设备脑图"><a href="#链路层设备脑图" class="headerlink" title="链路层设备脑图"></a>链路层设备脑图</h3><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104122002008.png" alt="image-20210104122002008"></p>
<h1 id="第三章总结"><a href="#第三章总结" class="headerlink" title="第三章总结"></a>第三章总结</h1><p><img src="https://chasing1874.oss-cn-chengdu.aliyuncs.com/image-20210104122047825.png" alt="image-20210104122047825"></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>notes</tag>
      </tags>
  </entry>
</search>
